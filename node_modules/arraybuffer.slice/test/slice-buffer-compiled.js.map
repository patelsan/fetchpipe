{"version":3,"sources":["slice-buffer.js"],"names":[],"mappings":"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","file":"slice-buffer-compiled.js","sourcesContent":["/*\n * Test dependencies\n */\n\nvar sliceBuffer = require('../index.js');\nvar expect = require('expect.js');\n\n/**\n * Tests\n */\n\ndescribe('sliceBuffer', function() {\n  describe('using standard slice', function() {\n    it('should slice correctly with only start provided', function() {\n      var abv = new Uint8Array(10);\n      for (var i = 0; i < abv.length; i++) {\n        abv[i] = i;\n      }\n\n      var sliced = sliceBuffer(abv.buffer, 3);\n      var sabv = new Uint8Array(sliced);\n      for (var i = 3, ii = 0; i < abv.length; i++, ii++) {\n        expect(abv[i]).to.equal(sabv[ii]);\n      }\n    });\n\n    it('should slice correctly with start and end provided', function() {\n      var abv = new Uint8Array(10);\n      for (var i = 0; i < abv.length; i++) {\n        abv[i] = i;\n      }\n\n      var sliced = sliceBuffer(abv.buffer, 3, 8);\n      var sabv = new Uint8Array(sliced);\n      for (var i = 3, ii = 0; i < 8; i++, ii++) {\n        expect(abv[i]).to.equal(sabv[ii]);\n      }\n    });\n\n    it('should slice correctly with negative start', function() {\n      var abv = new Uint8Array(10);\n      for (var i = 0; i < abv.length; i++) {\n        abv[i] = i;\n      }\n\n      var sliced = sliceBuffer(abv.buffer, -3);\n      var sabv = new Uint8Array(sliced);\n      for (var i = abv.length - 3, ii = 0; i < abv.length; i++, ii++) {\n        expect(abv[i]).to.equal(sabv[ii]);\n      }\n    });\n\n    it('should slice correctly with negative end', function() {\n      var abv = new Uint8Array(10);\n      for (var i = 0; i < abv.length; i++) {\n        abv[i] = i;\n      }\n\n      var sliced = sliceBuffer(abv.buffer, 0, -3);\n      var sabv = new Uint8Array(sliced);\n      for (var i = 0, ii = 0; i < abv.length - 3; i++, ii++) {\n        expect(abv[i]).to.equal(sabv[ii]);\n      }\n    });\n\n    it('should slice correctly with negative start and end', function() {\n      var abv = new Uint8Array(10);\n      for (var i = 0; i < abv.length; i++) {\n        abv[i] = i;\n      }\n\n      var sliced = sliceBuffer(abv.buffer, -6, -3);\n      var sabv = new Uint8Array(sliced);\n      for (var i = abv.length - 6, ii = 0; i < abv.length - 3; i++, ii++) {\n        expect(abv[i]).to.equal(sabv[ii]);\n      }\n    });\n\n    it('should slice correctly with equal start and end', function() {\n      var abv = new Uint8Array(10);\n      for (var i = 0; i < abv.length; i++) {\n        abv[i] = i;\n      }\n\n      var sliced = sliceBuffer(abv.buffer, 1, 1);\n      expect(sliced.byteLength).to.equal(0);\n    });\n    \n    it('should slice correctly when end larger than buffer', function() {\n      var abv = new Uint8Array(10);\n      for (var i = 0; i < abv.length; i++) {\n        abv[i] = i;\n      }\n\n      var sliced = sliceBuffer(abv.buffer, 0, 100);\n      expect(new Uint8Array(sliced)).to.eql(abv);\n    });\n\n    it('shoud slice correctly when start larger than end', function() {\n      var abv = new Uint8Array(10);\n      for (var i = 0; i < abv.length; i++) {\n        abv[i] = i;\n      }\n\n      var sliced = sliceBuffer(abv.buffer, 6, 5);\n      expect(sliced.byteLength).to.equal(0);\n    });\n  });\n\n  describe('using fallback', function() {\n    it('should slice correctly with only start provided', function() {\n      var abv = new Uint8Array(10);\n      for (var i = 0; i < abv.length; i++) {\n        abv[i] = i;\n      }\n      var ab = abv.buffer;\n      ab.slice = undefined;\n\n      var sliced = sliceBuffer(ab, 3);\n      var sabv = new Uint8Array(sliced);\n      for (var i = 3, ii = 0; i < abv.length; i++, ii++) {\n        expect(abv[i]).to.equal(sabv[ii]);\n      }\n    });\n\n    it('should slice correctly with start and end provided', function() {\n      var abv = new Uint8Array(10);\n      for (var i = 0; i < abv.length; i++) {\n        abv[i] = i;\n      }\n      var ab = abv.buffer;\n      ab.slice = undefined;\n\n\n      var sliced = sliceBuffer(ab, 3, 8);\n      var sabv = new Uint8Array(sliced);\n      for (var i = 3, ii = 0; i < 8; i++, ii++) {\n        expect(abv[i]).to.equal(sabv[ii]);\n      }\n    });\n\n    it('should slice correctly with negative start', function() {\n      var abv = new Uint8Array(10);\n      for (var i = 0; i < abv.length; i++) {\n        abv[i] = i;\n      }\n      var ab = abv.buffer;\n      ab.slice = undefined;\n\n\n      var sliced = sliceBuffer(ab, -3);\n      var sabv = new Uint8Array(sliced);\n      for (var i = abv.length - 3, ii = 0; i < abv.length; i++, ii++) {\n        expect(abv[i]).to.equal(sabv[ii]);\n      }\n    });\n\n    it('should slice correctly with negative end', function() {\n      var abv = new Uint8Array(10);\n      for (var i = 0; i < abv.length; i++) {\n        abv[i] = i;\n      }\n      var ab = abv.buffer;\n      ab.slice = undefined;\n\n      var sliced = sliceBuffer(ab, 0, -3);\n      var sabv = new Uint8Array(sliced);\n      for (var i = 0, ii = 0; i < abv.length - 3; i++, ii++) {\n        expect(abv[i]).to.equal(sabv[ii]);\n      }\n    });\n\n    it('should slice correctly with negative start and end', function() {\n      var abv = new Uint8Array(10);\n      for (var i = 0; i < abv.length; i++) {\n        abv[i] = i;\n      }\n      var ab = abv.buffer;\n      ab.slice = undefined;\n\n      var sliced = sliceBuffer(ab, -6, -3);\n      var sabv = new Uint8Array(sliced);\n      for (var i = abv.length - 6, ii = 0; i < abv.length - 3; i++, ii++) {\n        expect(abv[i]).to.equal(sabv[ii]);\n      }\n    });\n\n    it('should slice correctly with equal start and end', function() {\n      var abv = new Uint8Array(10);\n      for (var i = 0; i < abv.length; i++) {\n        abv[i] = i;\n      }\n      var ab = abv.buffer;\n      ab.slice = undefined;\n\n      var sliced = sliceBuffer(ab, 1, 1);\n      expect(sliced.byteLength).to.equal(0);\n    });\n\n    it('should slice correctly when end larger than buffer', function() {\n      var abv = new Uint8Array(10);\n      for (var i = 0; i < abv.length; i++) {\n        abv[i] = i;\n      }\n      var ab = abv.buffer;\n      ab.slice = undefined;\n\n      var sliced = sliceBuffer(ab, 0, 100);\n      var sabv = new Uint8Array(sliced);\n      for (var i = 0; i < abv.length; i++) {\n        expect(abv[i]).to.equal(sabv[i]);\n      }\n    });\n\n    it('shoud slice correctly when start larger than end', function() {\n      var abv = new Uint8Array(10);\n      for (var i = 0; i < abv.length; i++) {\n        abv[i] = i;\n      }\n      var ab = abv.buffer;\n      ab.slice = undefined;\n\n      var sliced = sliceBuffer(ab, 6, 5);\n      expect(sliced.byteLength).to.equal(0);\n    });\n  });\n});\n"]}