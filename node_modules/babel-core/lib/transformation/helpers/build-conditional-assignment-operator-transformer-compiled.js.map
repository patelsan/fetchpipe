{"version":3,"sources":["build-conditional-assignment-operator-transformer.js"],"names":[],"mappings":"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","file":"build-conditional-assignment-operator-transformer-compiled.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj[\"default\"] = obj; return newObj; } }\n\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _explodeAssignableExpression = require(\"./explode-assignable-expression\");\n\nvar _explodeAssignableExpression2 = _interopRequireDefault(_explodeAssignableExpression);\n\nvar _types = require(\"../../types\");\n\nvar t = _interopRequireWildcard(_types);\n\n/**\n * [Please add a description.]\n */\n\nexports[\"default\"] = function (exports, opts) {\n\n  /**\n   * [Please add a description.]\n   */\n\n  var buildAssignment = function buildAssignment(left, right) {\n    return t.assignmentExpression(\"=\", left, right);\n  };\n\n  /**\n   * [Please add a description.]\n   */\n\n  exports.ExpressionStatement = function (node, parent, scope, file) {\n    // hit the `AssignmentExpression` one below\n    if (this.isCompletionRecord()) return;\n\n    var expr = node.expression;\n    if (!opts.is(expr, file)) return;\n\n    var nodes = [];\n\n    var exploded = _explodeAssignableExpression2[\"default\"](expr.left, nodes, file, scope);\n\n    nodes.push(t.ifStatement(opts.build(exploded.uid, file), t.expressionStatement(buildAssignment(exploded.ref, expr.right))));\n\n    return nodes;\n  };\n\n  /**\n   * [Please add a description.]\n   */\n\n  exports.AssignmentExpression = function (node, parent, scope, file) {\n    if (!opts.is(node, file)) return;\n\n    var nodes = [];\n    var exploded = _explodeAssignableExpression2[\"default\"](node.left, nodes, file, scope);\n\n    nodes.push(t.logicalExpression(\"&&\", opts.build(exploded.uid, file), buildAssignment(exploded.ref, node.right)));\n\n    // todo: duplicate expression node\n    nodes.push(exploded.ref);\n\n    return nodes;\n  };\n};\n\nmodule.exports = exports[\"default\"];"]}