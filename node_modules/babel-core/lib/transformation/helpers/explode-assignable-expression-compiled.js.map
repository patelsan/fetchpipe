{"version":3,"sources":["explode-assignable-expression.js"],"names":[],"mappings":"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","file":"explode-assignable-expression-compiled.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj[\"default\"] = obj; return newObj; } }\n\nvar _types = require(\"../../types\");\n\nvar t = _interopRequireWildcard(_types);\n\n/**\n * [Please add a description.]\n */\n\nvar getObjRef = function getObjRef(node, nodes, file, scope) {\n  var ref;\n  if (t.isIdentifier(node)) {\n    if (scope.hasBinding(node.name)) {\n      // this variable is declared in scope so we can be 100% sure\n      // that evaluating it multiple times wont trigger a getter\n      // or something else\n      return node;\n    } else {\n      // could possibly trigger a getter so we need to only evaluate\n      // it once\n      ref = node;\n    }\n  } else if (t.isMemberExpression(node)) {\n    ref = node.object;\n\n    if (t.isIdentifier(ref) && scope.hasGlobal(ref.name)) {\n      // the object reference that we need to save is locally declared\n      // so as per the previous comment we can be 100% sure evaluating\n      // it multiple times will be safe\n      return ref;\n    }\n  } else {\n    throw new Error(\"We can't explode this node type \" + node.type);\n  }\n\n  var temp = scope.generateUidIdentifierBasedOnNode(ref);\n  nodes.push(t.variableDeclaration(\"var\", [t.variableDeclarator(temp, ref)]));\n  return temp;\n};\n\n/**\n * [Please add a description.]\n */\n\nvar getPropRef = function getPropRef(node, nodes, file, scope) {\n  var prop = node.property;\n  var key = t.toComputedKey(node, prop);\n  if (t.isLiteral(key)) return key;\n\n  var temp = scope.generateUidIdentifierBasedOnNode(prop);\n  nodes.push(t.variableDeclaration(\"var\", [t.variableDeclarator(temp, prop)]));\n  return temp;\n};\n\n/**\n * [Please add a description.]\n */\n\nexports[\"default\"] = function (node, nodes, file, scope, allowedSingleIdent) {\n  var obj;\n  if (t.isIdentifier(node) && allowedSingleIdent) {\n    obj = node;\n  } else {\n    obj = getObjRef(node, nodes, file, scope);\n  }\n\n  var ref, uid;\n\n  if (t.isIdentifier(node)) {\n    ref = node;\n    uid = obj;\n  } else {\n    var prop = getPropRef(node, nodes, file, scope);\n    var computed = node.computed || t.isLiteral(prop);\n    uid = ref = t.memberExpression(obj, prop, computed);\n  }\n\n  return {\n    uid: uid,\n    ref: ref\n  };\n};\n\nmodule.exports = exports[\"default\"];"]}