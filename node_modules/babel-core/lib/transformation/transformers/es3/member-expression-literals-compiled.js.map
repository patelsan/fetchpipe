{"version":3,"sources":["member-expression-literals.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;;;AAG1B,SAAS,uBAAuB,CAAC,GAAG,EAAE;AAAE,MAAI,GAAG,IAAI,GAAG,CAAC,UAAU,EAAE;AAAE,WAAO,GAAG,CAAC;GAAE,MAAM;AAAE,QAAI,MAAM,GAAG,EAAE,CAAC,AAAC,IAAI,GAAG,IAAI,IAAI,EAAE;AAAE,WAAK,IAAI,GAAG,IAAI,GAAG,EAAE;AAAE,YAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;OAAE;KAAE,AAAC,MAAM,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,AAAC,OAAO,MAAM,CAAC;GAAE;CAAE;;AAEhR,IAAI,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;;AAEvC,IAAI,CAAC,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC;;AAExC,IAAI,QAAQ,GAAG;AACb,OAAK,EAAE,kBAAkB;CAC1B,CAAC;;AAEF,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;AAmB5B,IAAI,OAAO,GAAG;;;;;;;AAOZ,kBAAgB,EAAE;AAChB,QAAI,EAAE,SAAS,IAAI,CAAC,IAAI,EAAE;AACxB,UAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;AACzB,UAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;;AAE7E,YAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACrC,YAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;OACtB;KACF;GACF;CACF,CAAC;AACF,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC","file":"member-expression-literals-compiled.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj[\"default\"] = obj; return newObj; } }\n\nvar _types = require(\"../../../types\");\n\nvar t = _interopRequireWildcard(_types);\n\nvar metadata = {\n  group: \"builtin-trailing\"\n};\n\nexports.metadata = metadata;\n/**\n * Turn member expression reserved word properties into literals.\n *\n * @example\n *\n * **In**\n *\n * ```javascript\n * foo.catch;\n * ```\n *\n * **Out**\n *\n * ```javascript\n * foo[\"catch\"];\n * ```\n */\n\nvar visitor = {\n\n  /**\n   * Look for non-computed properties with names that are not valid identifiers.\n   * Turn them into computed properties with literal names.\n   */\n\n  MemberExpression: {\n    exit: function exit(node) {\n      var prop = node.property;\n      if (!node.computed && t.isIdentifier(prop) && !t.isValidIdentifier(prop.name)) {\n        // foo.default -> foo[\"default\"]\n        node.property = t.literal(prop.name);\n        node.computed = true;\n      }\n    }\n  }\n};\nexports.visitor = visitor;"]}