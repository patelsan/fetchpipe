{"version":3,"sources":["spec.template-literals.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;;;AAG1B,SAAS,uBAAuB,CAAC,GAAG,EAAE;AAAE,MAAI,GAAG,IAAI,GAAG,CAAC,UAAU,EAAE;AAAE,WAAO,GAAG,CAAC;GAAE,MAAM;AAAE,QAAI,MAAM,GAAG,EAAE,CAAC,AAAC,IAAI,GAAG,IAAI,IAAI,EAAE;AAAE,WAAK,IAAI,GAAG,IAAI,GAAG,EAAE;AAAE,YAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;OAAE;KAAE,AAAC,MAAM,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,AAAC,OAAO,MAAM,CAAC;GAAE;CAAE;;AAEhR,IAAI,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;;AAEvC,IAAI,CAAC,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC;;AAExC,IAAI,QAAQ,GAAG;AACb,UAAQ,EAAE,IAAI;AACd,OAAK,EAAE,aAAa;CACrB,CAAC;;AAEF,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;;;;;AAK5B,IAAI,OAAO,GAAG;;;;;;AAMZ,iBAAe,EAAE,SAAS,eAAe,CAAC,IAAI,EAAE,MAAM,EAAE;AACtD,QAAI,CAAC,CAAC,0BAA0B,CAAC,MAAM,CAAC,EAAE,OAAO;;AAEjD,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAChD,UAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACvF;GACF;CACF,CAAC;AACF,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC","file":"spec.template-literals-compiled.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj[\"default\"] = obj; return newObj; } }\n\nvar _types = require(\"../../../types\");\n\nvar t = _interopRequireWildcard(_types);\n\nvar metadata = {\n  optional: true,\n  group: \"builtin-pre\"\n};\n\nexports.metadata = metadata;\n/**\n * [Please add a description.]\n */\n\nvar visitor = {\n\n  /**\n   * [Please add a description.]\n   */\n\n  TemplateLiteral: function TemplateLiteral(node, parent) {\n    if (t.isTaggedTemplateExpression(parent)) return;\n\n    for (var i = 0; i < node.expressions.length; i++) {\n      node.expressions[i] = t.callExpression(t.identifier(\"String\"), [node.expressions[i]]);\n    }\n  }\n};\nexports.visitor = visitor;"]}