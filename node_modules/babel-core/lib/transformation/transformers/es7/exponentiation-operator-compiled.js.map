{"version":3,"sources":["exponentiation-operator.js"],"names":[],"mappings":";;AAEA,YAAY,CAAC;;AAEb,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;;;AAG1B,SAAS,uBAAuB,CAAC,GAAG,EAAE;AAAE,MAAI,GAAG,IAAI,GAAG,CAAC,UAAU,EAAE;AAAE,WAAO,GAAG,CAAC;GAAE,MAAM;AAAE,QAAI,MAAM,GAAG,EAAE,CAAC,AAAC,IAAI,GAAG,IAAI,IAAI,EAAE;AAAE,WAAK,IAAI,GAAG,IAAI,GAAG,EAAE;AAAE,YAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;OAAE;KAAE,AAAC,MAAM,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,AAAC,OAAO,MAAM,CAAC;GAAE;CAAE;;;;AAIhR,SAAS,sBAAsB,CAAC,GAAG,EAAE;AAAE,SAAO,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,GAAG,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC;CAAE;;AAEjG,IAAI,gDAAgD,GAAG,OAAO,CAAC,4DAA4D,CAAC,CAAC;;AAE7H,IAAI,iDAAiD,GAAG,sBAAsB,CAAC,gDAAgD,CAAC,CAAC;;AAEjI,IAAI,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;;AAEvC,IAAI,CAAC,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC;;AAExC,IAAI,QAAQ,GAAG;AACb,OAAK,EAAE,CAAC;CACT,CAAC;;AAEF,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC5B,IAAI,QAAQ,GAAG,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;;;;;;AAM7E,IAAI,OAAO,GAAG,iDAAiD,CAAC,SAAS,CAAC,CAAC;AACzE,UAAQ,EAAE,IAAI;;;;;;AAMd,OAAK,EAAE,SAAS,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE;AACjC,WAAO,CAAC,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;GAClD;CACF,CAAC,CAAC;AACH,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC","file":"exponentiation-operator-compiled.js","sourcesContent":["// https://github.com/rwaldron/exponentiation-operator\n\n\"use strict\";\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj[\"default\"] = obj; return newObj; } }\n\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _helpersBuildBinaryAssignmentOperatorTransformer = require(\"../../helpers/build-binary-assignment-operator-transformer\");\n\nvar _helpersBuildBinaryAssignmentOperatorTransformer2 = _interopRequireDefault(_helpersBuildBinaryAssignmentOperatorTransformer);\n\nvar _types = require(\"../../../types\");\n\nvar t = _interopRequireWildcard(_types);\n\nvar metadata = {\n  stage: 2\n};\n\nexports.metadata = metadata;\nvar MATH_POW = t.memberExpression(t.identifier(\"Math\"), t.identifier(\"pow\"));\n\n/**\n * [Please add a description.]\n */\n\nvar visitor = _helpersBuildBinaryAssignmentOperatorTransformer2[\"default\"]({\n  operator: \"**\",\n\n  /**\n   * [Please add a description.]\n   */\n\n  build: function build(left, right) {\n    return t.callExpression(MATH_POW, [left, right]);\n  }\n});\nexports.visitor = visitor;"]}