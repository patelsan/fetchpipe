{"version":3,"sources":["flow.js"],"names":[],"mappings":"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","file":"flow-compiled.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj[\"default\"] = obj; return newObj; } }\n\nvar _types = require(\"../../../types\");\n\nvar t = _interopRequireWildcard(_types);\n\nvar metadata = {\n  group: \"builtin-trailing\"\n};\n\nexports.metadata = metadata;\nvar FLOW_DIRECTIVE = \"@flow\";\n\n/**\n * [Please add a description.]\n */\n\nvar visitor = {\n\n  /**\n   * [Please add a description.]\n   */\n\n  Program: function Program(node, parent, scope, file) {\n    var _arr = file.ast.comments;\n\n    for (var _i = 0; _i < _arr.length; _i++) {\n      var comment = _arr[_i];\n      if (comment.value.indexOf(FLOW_DIRECTIVE) >= 0) {\n        // remove flow directive\n        comment.value = comment.value.replace(FLOW_DIRECTIVE, \"\");\n\n        // remove the comment completely if it only consists of whitespace and/or stars\n        if (!comment.value.replace(/\\*/g, \"\").trim()) comment._displayed = true;\n      }\n    }\n  },\n\n  /**\n   * [Please add a description.]\n   */\n\n  Flow: function Flow() {\n    this.dangerouslyRemove();\n  },\n\n  /**\n   * [Please add a description.]\n   */\n\n  ClassProperty: function ClassProperty(node) {\n    node.typeAnnotation = null;\n    if (!node.value) this.dangerouslyRemove();\n  },\n\n  /**\n   * [Please add a description.]\n   */\n\n  Class: function Class(node) {\n    node[\"implements\"] = null;\n  },\n\n  /**\n   * [Please add a description.]\n   */\n\n  Function: function Function(node) {\n    for (var i = 0; i < node.params.length; i++) {\n      var param = node.params[i];\n      param.optional = false;\n    }\n  },\n\n  /**\n   * [Please add a description.]\n   */\n\n  TypeCastExpression: function TypeCastExpression(node) {\n    do {\n      node = node.expression;\n    } while (t.isTypeCastExpression(node));\n    return node;\n  }\n};\nexports.visitor = visitor;"]}