{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.getTypeAnnotation = getTypeAnnotation;\nexports._getTypeAnnotation = _getTypeAnnotation;\nexports.isBaseType = isBaseType;\nexports.couldBeBaseType = couldBeBaseType;\nexports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;\nexports.isGenericType = isGenericType;\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj[\"default\"] = obj; return newObj; } }\n\nvar _inferers = require(\"./inferers\");\n\nvar inferers = _interopRequireWildcard(_inferers);\n\nvar _types = require(\"../../../types\");\n\nvar t = _interopRequireWildcard(_types);\n\n/**\n * Infer the type of the current `NodePath`.\n */\n\nfunction getTypeAnnotation() {\n  if (this.typeAnnotation) return this.typeAnnotation;\n\n  var type = this._getTypeAnnotation() || t.anyTypeAnnotation();\n  if (t.isTypeAnnotation(type)) type = type.typeAnnotation;\n  return this.typeAnnotation = type;\n}\n\n/**\n * todo: split up this method\n */\n\nfunction _getTypeAnnotation() {\n  var node = this.node;\n\n  if (!node) {\n    // handle initializerless variables, add in checks for loop initializers too\n    if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n      var declar = this.parentPath.parentPath;\n      var declarParent = declar.parentPath;\n\n      // for (var NODE in bar) {}\n      if (declar.key === \"left\" && declarParent.isForInStatement()) {\n        return t.stringTypeAnnotation();\n      }\n\n      // for (var NODE of bar) {}\n      if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n        return t.anyTypeAnnotation();\n      }\n\n      return t.voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n\n  if (node.typeAnnotation) {\n    return node.typeAnnotation;\n  }\n\n  var inferer = inferers[node.type];\n  if (inferer) {\n    return inferer.call(this, node);\n  }\n\n  inferer = inferers[this.parentPath.type];\n  if (inferer && inferer.validParent) {\n    return this.parentPath.getTypeAnnotation();\n  }\n}\n\n/**\n * [Please add a description.]\n */\n\nfunction isBaseType(baseName, soft) {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\n\n/**\n * [Please add a description.]\n */\n\nfunction _isBaseType(baseName, type, soft) {\n  if (baseName === \"string\") {\n    return t.isStringTypeAnnotation(type);\n  } else if (baseName === \"number\") {\n    return t.isNumberTypeAnnotation(type);\n  } else if (baseName === \"boolean\") {\n    return t.isBooleanTypeAnnotation(type);\n  } else if (baseName === \"any\") {\n    return t.isAnyTypeAnnotation(type);\n  } else if (baseName === \"mixed\") {\n    return t.isMixedTypeAnnotation(type);\n  } else if (baseName === \"void\") {\n    return t.isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(\"Unknown base type \" + baseName);\n    }\n  }\n}\n\n/**\n * [Please add a description.]\n */\n\nfunction couldBeBaseType(name) {\n  var type = this.getTypeAnnotation();\n  if (t.isAnyTypeAnnotation(type)) return true;\n\n  if (t.isUnionTypeAnnotation(type)) {\n    var _arr = type.types;\n\n    for (var _i = 0; _i < _arr.length; _i++) {\n      var type2 = _arr[_i];\n      if (t.isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\n\n/**\n * [Please add a description.]\n */\n\nfunction baseTypeStrictlyMatches(right) {\n  var left = this.getTypeAnnotation();\n  right = right.getTypeAnnotation();\n\n  if (!t.isAnyTypeAnnotation() && t.isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n}\n\n/**\n * [Please add a description.]\n */\n\nfunction isGenericType(genericName) {\n  var type = this.getTypeAnnotation();\n  return t.isGenericTypeAnnotation(type) && t.isIdentifier(type.id, { name: genericName });\n}"]}