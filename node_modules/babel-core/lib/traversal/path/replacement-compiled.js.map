{"version":3,"sources":["replacement.js"],"names":[],"mappings":"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","file":"replacement-compiled.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.replaceWithMultiple = replaceWithMultiple;\nexports.replaceWithSourceString = replaceWithSourceString;\nexports.replaceWith = replaceWith;\nexports.replaceExpressionWithStatements = replaceExpressionWithStatements;\nexports.replaceInline = replaceInline;\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj[\"default\"] = obj; return newObj; } }\n\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _helpersCodeFrame = require(\"../../helpers/code-frame\");\n\nvar _helpersCodeFrame2 = _interopRequireDefault(_helpersCodeFrame);\n\nvar _index = require(\"../index\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require(\"./index\");\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _helpersParse = require(\"../../helpers/parse\");\n\nvar _helpersParse2 = _interopRequireDefault(_helpersParse);\n\nvar _types = require(\"../../types\");\n\nvar t = _interopRequireWildcard(_types);\n\n/**\n * [Please add a description.]\n */\n\nvar hoistVariablesVisitor = {\n\n  /**\n   * [Please add a description.]\n   */\n\n  Function: function Function() {\n    this.skip();\n  },\n\n  /**\n   * [Please add a description.]\n   */\n\n  VariableDeclaration: function VariableDeclaration(node, parent, scope) {\n    if (node.kind !== \"var\") return;\n\n    var bindings = this.getBindingIdentifiers();\n    for (var key in bindings) {\n      scope.push({ id: bindings[key] });\n    }\n\n    var exprs = [];\n\n    var _arr = node.declarations;\n    for (var _i = 0; _i < _arr.length; _i++) {\n      var declar = _arr[_i];\n      if (declar.init) {\n        exprs.push(t.expressionStatement(t.assignmentExpression(\"=\", declar.id, declar.init)));\n      }\n    }\n\n    return exprs;\n  }\n};\n\n/**\n * Replace a node with an array of multiple. This method performs the following steps:\n *\n *  - Inherit the comments of first provided node with that of the current node.\n *  - Insert the provided nodes after the current node.\n *  - Remove the current node.\n */\n\nfunction replaceWithMultiple(nodes) {\n  this.resync();\n\n  nodes = this._verifyNodeList(nodes);\n  t.inheritLeadingComments(nodes[0], this.node);\n  t.inheritTrailingComments(nodes[nodes.length - 1], this.node);\n  this.node = this.container[this.key] = null;\n  this.insertAfter(nodes);\n  if (!this.node) this.dangerouslyRemove();\n}\n\n/**\n * Parse a string as an expression and replace the current node with the result.\n *\n * NOTE: This is typically not a good idea to use. Building source strings when\n * transforming ASTs is an antipattern and SHOULD NOT be encouraged. Even if it's\n * easier to use, your transforms will be extremely brittle.\n */\n\nfunction replaceWithSourceString(replacement) {\n  this.resync();\n\n  try {\n    replacement = \"(\" + replacement + \")\";\n    replacement = _helpersParse2[\"default\"](replacement);\n  } catch (err) {\n    var loc = err.loc;\n    if (loc) {\n      err.message += \" - make sure this is an expression.\";\n      err.message += \"\\n\" + _helpersCodeFrame2[\"default\"](replacement, loc.line, loc.column + 1);\n    }\n    throw err;\n  }\n\n  replacement = replacement.program.body[0].expression;\n  _index2[\"default\"].removeProperties(replacement);\n  return this.replaceWith(replacement);\n}\n\n/**\n * Replace the current node with another.\n */\n\nfunction replaceWith(replacement, whateverAllowed) {\n  this.resync();\n\n  if (this.removed) {\n    throw new Error(\"You can't replace this node, we've already removed it\");\n  }\n\n  if (replacement instanceof _index4[\"default\"]) {\n    replacement = replacement.node;\n  }\n\n  if (!replacement) {\n    throw new Error(\"You passed `path.replaceWith()` a falsy node, use `path.dangerouslyRemove()` instead\");\n  }\n\n  if (this.node === replacement) {\n    return;\n  }\n\n  if (this.isProgram() && !t.isProgram(replacement)) {\n    throw new Error(\"You can only replace a Program root node with another Program node\");\n  }\n\n  // normalise inserting an entire AST\n  if (t.isProgram(replacement) && !this.isProgram()) {\n    replacement = replacement.body;\n    whateverAllowed = true;\n  }\n\n  if (Array.isArray(replacement)) {\n    if (whateverAllowed) {\n      return this.replaceWithMultiple(replacement);\n    } else {\n      throw new Error(\"Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`\");\n    }\n  }\n\n  if (typeof replacement === \"string\") {\n    // triggers an error\n    return this.replaceWithSourceString();\n  }\n\n  // replacing a statement with an expression so wrap it in an expression statement\n  if (this.isNodeType(\"Statement\") && t.isExpression(replacement) && !this.canHaveVariableDeclarationOrExpression()) {\n    replacement = t.expressionStatement(replacement);\n  }\n\n  // replacing an expression with a statement so let's explode it\n  if (this.isNodeType(\"Expression\") && t.isStatement(replacement)) {\n    return this.replaceExpressionWithStatements([replacement]);\n  }\n\n  var oldNode = this.node;\n  if (oldNode) t.inheritsComments(replacement, oldNode);\n\n  // replace the node\n  this.node = this.container[this.key] = replacement;\n  this.type = replacement.type;\n\n  // potentially create new scope\n  this.setScope();\n}\n\n/**\n * This method takes an array of statements nodes and then explodes it\n * into expressions. This method retains completion records which is\n * extremely important to retain original semantics.\n */\n\nfunction replaceExpressionWithStatements(nodes) {\n  this.resync();\n\n  var toSequenceExpression = t.toSequenceExpression(nodes, this.scope);\n\n  if (toSequenceExpression) {\n    return this.replaceWith(toSequenceExpression);\n  } else {\n    var container = t.functionExpression(null, [], t.blockStatement(nodes));\n    container.shadow = true;\n\n    this.replaceWith(t.callExpression(container, []));\n    this.traverse(hoistVariablesVisitor);\n\n    // add implicit returns to all ending expression statements\n    var last = this.get(\"callee\").getCompletionRecords();\n    var _arr2 = last;\n    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n      var lastNode = _arr2[_i2];\n      if (!lastNode.isExpressionStatement()) continue;\n\n      var loop = lastNode.findParent(function (path) {\n        return path.isLoop();\n      });\n      if (loop) {\n        var uid = this.get(\"callee\").scope.generateDeclaredUidIdentifier(\"ret\");\n        this.get(\"callee.body\").pushContainer(\"body\", t.returnStatement(uid));\n        lastNode.get(\"expression\").replaceWith(t.assignmentExpression(\"=\", uid, lastNode.node.expression));\n      } else {\n        lastNode.replaceWith(t.returnStatement(lastNode.node.expression));\n      }\n    }\n\n    return this.node;\n  }\n}\n\n/**\n * [Please add a description.]\n */\n\nfunction replaceInline(nodes) {\n  this.resync();\n\n  if (Array.isArray(nodes)) {\n    if (Array.isArray(this.container)) {\n      nodes = this._verifyNodeList(nodes);\n      this._containerInsertAfter(nodes);\n      return this.dangerouslyRemove();\n    } else {\n      return this.replaceWithMultiple(nodes);\n    }\n  } else {\n    return this.replaceWith(nodes);\n  }\n}"]}