{"version":3,"sources":["base64-arraybuffer_test.js"],"names":[],"mappings":";;AAAA,CAAC,YAAU;AACT,cAAY,CAAC;AACb,MAAI,kBAAkB,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;AAuBjE,WAAS,iBAAiB,CAAC,GAAG,EAAE;AAC9B,QAAI,MAAM,GAAG,IAAI,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACzC,QAAI,KAAK,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;;AAEnC,OAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,UAAS,GAAG,EAAE,CAAC,EAAE;AACrC,WAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;KAC9B,CAAC,CAAC;;AAEH,WAAO,MAAM,CAAC;GACf;;AAED,WAAS,gBAAgB,CAAC,OAAO,EAAE,OAAO,EAAE;AAC1C,QAAI,IAAI,GAAG,OAAO,CAAC,UAAU;QAC7B,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC;AAC1B,QAAI,IAAI,KAAK,IAAI,EAAE;AACjB,aAAO,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AAC9B,aAAO,KAAK,CAAC;KACd;;AAED,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;AAC7B,UAAI,OAAO,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,EAAE;AAC7B,eAAO,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACjC,eAAO,KAAK,CAAC;OACd;KACF;AACD,WAAO,IAAI,CAAC;GACb;;AAED,SAAO,CAAC,aAAa,CAAC,GAAG;AACvB,YAAQ,EAAE,gBAAS,IAAI,EAAE;AACvB,UAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;;AAEf,UAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC,EAAE,kBAAkB,EAAE,sBAAsB,CAAC,CAAC;AACpH,UAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC;AACxF,UAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;AACtF,UAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC,EAAE,sBAAsB,EAAE,wBAAwB,CAAC,CAAC;AAC5H,UAAI,CAAC,IAAI,EAAE,CAAC;KACb;AACD,YAAQ,EAAE,gBAAS,IAAI,EAAE;AACvB,UAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACf,UAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,iBAAiB,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;AACvG,UAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE,iBAAiB,CAAC,aAAa,CAAC,CAAC,EAAE,sBAAsB,CAAC,CAAC;AACnI,UAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,MAAM,CAAC,sBAAsB,CAAC,EAAE,iBAAiB,CAAC,eAAe,CAAC,CAAC,EAAE,wBAAwB,CAAC,CAAC;AAC3I,UAAI,CAAC,IAAI,EAAE,CAAC;KACb;GACF,CAAC;CACH,CAAA,EAAG,CAAC","file":"base64-arraybuffer_test-compiled.js","sourcesContent":["(function(){\n  \"use strict\";\n  var base64_arraybuffer = require('../lib/base64-arraybuffer.js');\n\n  /*\n  ======== A Handy Little Nodeunit Reference ========\n  https://github.com/caolan/nodeunit\n\n  Test methods:\n    test.expect(numAssertions)\n    test.done()\n  Test assertions:\n    test.ok(value, [message])\n    test.equal(actual, expected, [message])\n    test.notEqual(actual, expected, [message])\n    test.deepEqual(actual, expected, [message])\n    test.notDeepEqual(actual, expected, [message])\n    test.strictEqual(actual, expected, [message])\n    test.notStrictEqual(actual, expected, [message])\n    test.throws(block, [error], [message])\n    test.doesNotThrow(block, [error], [message])\n    test.ifError(value)\n*/\n\n\n  function stringArrayBuffer(str) {\n    var buffer = new ArrayBuffer(str.length);\n    var bytes = new Uint8Array(buffer);\n\n    str.split('').forEach(function(str, i) {\n      bytes[i] = str.charCodeAt(0);\n    });\n\n    return buffer;\n  }\n\n  function testArrayBuffers(buffer1, buffer2) {\n    var len1 = buffer1.byteLength,\n    len2 = buffer2.byteLength;\n    if (len1 !== len2) {\n      console.log(buffer1, buffer2);\n      return false;\n    }\n\n    for (var i = 0; i < len1; i++) {\n      if (buffer1[i] !== buffer1[i]) {\n        console.log(i, buffer1, buffer2);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  exports['base64tests'] = {\n    'encode': function(test) {\n      test.expect(4);\n\n      test.equal(base64_arraybuffer.encode(stringArrayBuffer(\"Hello world\")), \"SGVsbG8gd29ybGQ=\", 'encode \"Hello world\"');\n      test.equal(base64_arraybuffer.encode(stringArrayBuffer(\"Man\")), 'TWFu', 'encode \"Man\"');\n      test.equal(base64_arraybuffer.encode(stringArrayBuffer(\"Ma\")), \"TWE=\", 'encode \"Ma\"');\n      test.equal(base64_arraybuffer.encode(stringArrayBuffer(\"Hello worlds!\")), \"SGVsbG8gd29ybGRzIQ==\", 'encode \"Hello worlds!\"');\n      test.done();\n    },\n    'decode': function(test) {\n      test.expect(3);\n      test.ok(testArrayBuffers(base64_arraybuffer.decode(\"TWFu\"), stringArrayBuffer(\"Man\")), 'decode \"Man\"');\n      test.ok(testArrayBuffers(base64_arraybuffer.decode(\"SGVsbG8gd29ybGQ=\"), stringArrayBuffer(\"Hello world\")), 'decode \"Hello world\"');\n      test.ok(testArrayBuffers(base64_arraybuffer.decode(\"SGVsbG8gd29ybGRzIQ==\"), stringArrayBuffer(\"Hello worlds!\")), 'decode \"Hello worlds!\"');\n      test.done();\n    }\n  };\n})();\n"]}