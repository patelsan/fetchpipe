{"version":3,"sources":["read.js"],"names":[],"mappings":"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","file":"read-compiled.js","sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar createError = require('http-errors')\nvar getBody = require('raw-body')\nvar iconv = require('iconv-lite')\nvar onFinished = require('on-finished')\nvar zlib = require('zlib')\n\n/**\n * Module exports.\n */\n\nmodule.exports = read\n\n/**\n * Read a request into a buffer and parse.\n *\n * @param {object} req\n * @param {object} res\n * @param {function} next\n * @param {function} parse\n * @param {function} debug\n * @param {object} [options]\n * @api private\n */\n\nfunction read(req, res, next, parse, debug, options) {\n  var length\n  var opts = options || {}\n  var stream\n\n  // flag as parsed\n  req._body = true\n\n  // read options\n  var encoding = opts.encoding !== null\n    ? opts.encoding || 'utf-8'\n    : null\n  var verify = opts.verify\n\n  try {\n    // get the content stream\n    stream = contentstream(req, debug, opts.inflate)\n    length = stream.length\n    stream.length = undefined\n  } catch (err) {\n    return next(err)\n  }\n\n  // set raw-body options\n  opts.length = length\n  opts.encoding = verify\n    ? null\n    : encoding\n\n  // assert charset is supported\n  if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {\n    return next(createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n      charset: encoding.toLowerCase()\n    }))\n  }\n\n  // read body\n  debug('read body')\n  getBody(stream, opts, function (err, body) {\n    if (err) {\n      // default to 400\n      setErrorStatus(err, 400)\n\n      // echo back charset\n      if (err.type === 'encoding.unsupported') {\n        err = createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n          charset: encoding.toLowerCase()\n        })\n      }\n\n      // read off entire request\n      stream.resume()\n      onFinished(req, function onfinished() {\n        next(err)\n      })\n      return\n    }\n\n    // verify\n    if (verify) {\n      try {\n        debug('verify body')\n        verify(req, res, body, encoding)\n      } catch (err) {\n        // default to 403\n        setErrorStatus(err, 403)\n        next(err)\n        return\n      }\n    }\n\n    // parse\n    var str\n    try {\n      debug('parse body')\n      str = typeof body !== 'string' && encoding !== null\n        ? iconv.decode(body, encoding)\n        : body\n      req.body = parse(str)\n    } catch (err) {\n      err.body = str === undefined\n        ? body\n        : str\n\n      // default to 400\n      setErrorStatus(err, 400)\n\n      next(err)\n      return\n    }\n\n    next()\n  })\n}\n\n/**\n * Get the content stream of the request.\n *\n * @param {object} req\n * @param {function} debug\n * @param {boolean} [inflate=true]\n * @return {object}\n * @api private\n */\n\nfunction contentstream(req, debug, inflate) {\n  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase()\n  var length = req.headers['content-length']\n  var stream\n\n  debug('content-encoding \"%s\"', encoding)\n\n  if (inflate === false && encoding !== 'identity') {\n    throw createError(415, 'content encoding unsupported')\n  }\n\n  switch (encoding) {\n    case 'deflate':\n      stream = zlib.createInflate()\n      debug('inflate body')\n      req.pipe(stream)\n      break\n    case 'gzip':\n      stream = zlib.createGunzip()\n      debug('gunzip body')\n      req.pipe(stream)\n      break\n    case 'identity':\n      stream = req\n      stream.length = length\n      break\n    default:\n      throw createError(415, 'unsupported content encoding \"' + encoding + '\"', {\n        encoding: encoding\n      })\n  }\n\n  return stream\n}\n\n/**\n * Set a status on an error object, if ones does not exist\n * @private\n */\n\nfunction setErrorStatus(error, status) {\n  if (!error.status && !error.statusCode) {\n    error.status = status\n    error.statusCode = status\n  }\n}\n"]}