{"version":3,"sources":["utf7.js"],"names":[],"mappings":"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","file":"utf7-compiled.js","sourcesContent":["\"use strict\"\n\n// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152\n// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3\n\nexports.utf7 = Utf7Codec;\nexports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7\nfunction Utf7Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7Codec.prototype.encoder = Utf7Encoder;\nUtf7Codec.prototype.decoder = Utf7Decoder;\nUtf7Codec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nvar nonDirectChars = /[^A-Za-z0-9'\\(\\),-\\.\\/:\\? \\n\\r\\t]+/g;\n\nfunction Utf7Encoder(options, codec) {\n    this.iconv = codec.iconv;\n}\n\nUtf7Encoder.prototype.write = function(str) {\n    // Naive implementation.\n    // Non-direct chars are encoded as \"+<base64>-\"; single \"+\" char is encoded as \"+-\".\n    return new Buffer(str.replace(nonDirectChars, function(chunk) {\n        return \"+\" + (chunk === '+' ? '' : \n            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) \n            + \"-\";\n    }.bind(this)));\n}\n\nUtf7Encoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf7Decoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64Regex = /[A-Za-z0-9\\/+]/;\nvar base64Chars = [];\nfor (var i = 0; i < 256; i++)\n    base64Chars[i] = base64Regex.test(String.fromCharCode(i));\n\nvar plusChar = '+'.charCodeAt(0), \n    minusChar = '-'.charCodeAt(0),\n    andChar = '&'.charCodeAt(0);\n\nUtf7Decoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '+'\n            if (buf[i] == plusChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64Chars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) {// \"+-\" -> \"+\"\n                    res += \"+\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString();\n                    res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus is absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString();\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7Decoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(new Buffer(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n// UTF-7-IMAP codec.\n// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)\n// Differences:\n//  * Base64 part is started by \"&\" instead of \"+\"\n//  * Direct characters are 0x20-0x7E, except \"&\" (0x26)\n//  * In Base64, \",\" is used instead of \"/\"\n//  * Base64 must not be used to represent direct characters.\n//  * No implicit shift back from Base64 (should always end with '-')\n//  * String must end in non-shifted position.\n//  * \"-&\" while in base64 is not allowed.\n\n\nexports.utf7imap = Utf7IMAPCodec;\nfunction Utf7IMAPCodec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;\nUtf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;\nUtf7IMAPCodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf7IMAPEncoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = new Buffer(6);\n    this.base64AccumIdx = 0;\n}\n\nUtf7IMAPEncoder.prototype.write = function(str) {\n    var inBase64 = this.inBase64,\n        base64Accum = this.base64Accum,\n        base64AccumIdx = this.base64AccumIdx,\n        buf = new Buffer(str.length*5 + 10), bufIdx = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        var uChar = str.charCodeAt(i);\n        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.\n            if (inBase64) {\n                if (base64AccumIdx > 0) {\n                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n                    base64AccumIdx = 0;\n                }\n\n                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n                inBase64 = false;\n            }\n\n            if (!inBase64) {\n                buf[bufIdx++] = uChar; // Write direct character\n\n                if (uChar === andChar)  // Ampersand -> '&-'\n                    buf[bufIdx++] = minusChar;\n            }\n\n        } else { // Non-direct character\n            if (!inBase64) {\n                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.\n                inBase64 = true;\n            }\n            if (inBase64) {\n                base64Accum[base64AccumIdx++] = uChar >> 8;\n                base64Accum[base64AccumIdx++] = uChar & 0xFF;\n\n                if (base64AccumIdx == base64Accum.length) {\n                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\\//g, ','), bufIdx);\n                    base64AccumIdx = 0;\n                }\n            }\n        }\n    }\n\n    this.inBase64 = inBase64;\n    this.base64AccumIdx = base64AccumIdx;\n\n    return buf.slice(0, bufIdx);\n}\n\nUtf7IMAPEncoder.prototype.end = function() {\n    var buf = new Buffer(10), bufIdx = 0;\n    if (this.inBase64) {\n        if (this.base64AccumIdx > 0) {\n            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n            this.base64AccumIdx = 0;\n        }\n\n        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n        this.inBase64 = false;\n    }\n\n    return buf.slice(0, bufIdx);\n}\n\n\n// -- Decoding\n\nfunction Utf7IMAPDecoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64IMAPChars = base64Chars.slice();\nbase64IMAPChars[','.charCodeAt(0)] = true;\n\nUtf7IMAPDecoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '&'\n            if (buf[i] == andChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64IMAPChars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) { // \"&-\" -> \"&\"\n                    res += \"&\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');\n                    res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus may be absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7IMAPDecoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(new Buffer(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n"]}