{"version":3,"sources":["extend-node.js"],"names":[],"mappings":"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","file":"extend-node-compiled.js","sourcesContent":["\"use strict\"\n\n// == Extend Node primitives to use iconv-lite =================================\n\nmodule.exports = function (iconv) {\n    var original = undefined; // Place to keep original methods.\n\n    // Node authors rewrote Buffer internals to make it compatible with\n    // Uint8Array and we cannot patch key functions since then.\n    iconv.supportsNodeEncodingsExtension = !(new Buffer(0) instanceof Uint8Array);\n\n    iconv.extendNodeEncodings = function extendNodeEncodings() {\n        if (original) return;\n        original = {};\n\n        if (!iconv.supportsNodeEncodingsExtension) {\n            console.warning(\"ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node\");\n            console.warning(\"See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility\");\n            return;\n        }\n\n        var nodeNativeEncodings = {\n            'hex': true, 'utf8': true, 'utf-8': true, 'ascii': true, 'binary': true, \n            'base64': true, 'ucs2': true, 'ucs-2': true, 'utf16le': true, 'utf-16le': true,\n        };\n\n        Buffer.isNativeEncoding = function(enc) {\n            return enc && nodeNativeEncodings[enc.toLowerCase()];\n        }\n\n        // -- SlowBuffer -----------------------------------------------------------\n        var SlowBuffer = require('buffer').SlowBuffer;\n\n        original.SlowBufferToString = SlowBuffer.prototype.toString;\n        SlowBuffer.prototype.toString = function(encoding, start, end) {\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.SlowBufferToString.call(this, encoding, start, end);\n\n            // Otherwise, use our decoding method.\n            if (typeof start == 'undefined') start = 0;\n            if (typeof end == 'undefined') end = this.length;\n            return iconv.decode(this.slice(start, end), encoding);\n        }\n\n        original.SlowBufferWrite = SlowBuffer.prototype.write;\n        SlowBuffer.prototype.write = function(string, offset, length, encoding) {\n            // Support both (string, offset, length, encoding)\n            // and the legacy (string, encoding, offset, length)\n            if (isFinite(offset)) {\n                if (!isFinite(length)) {\n                    encoding = length;\n                    length = undefined;\n                }\n            } else {  // legacy\n                var swap = encoding;\n                encoding = offset;\n                offset = length;\n                length = swap;\n            }\n\n            offset = +offset || 0;\n            var remaining = this.length - offset;\n            if (!length) {\n                length = remaining;\n            } else {\n                length = +length;\n                if (length > remaining) {\n                    length = remaining;\n                }\n            }\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.SlowBufferWrite.call(this, string, offset, length, encoding);\n\n            if (string.length > 0 && (length < 0 || offset < 0))\n                throw new RangeError('attempt to write beyond buffer bounds');\n\n            // Otherwise, use our encoding method.\n            var buf = iconv.encode(string, encoding);\n            if (buf.length < length) length = buf.length;\n            buf.copy(this, offset, 0, length);\n            return length;\n        }\n\n        // -- Buffer ---------------------------------------------------------------\n\n        original.BufferIsEncoding = Buffer.isEncoding;\n        Buffer.isEncoding = function(encoding) {\n            return Buffer.isNativeEncoding(encoding) || iconv.encodingExists(encoding);\n        }\n\n        original.BufferByteLength = Buffer.byteLength;\n        Buffer.byteLength = SlowBuffer.byteLength = function(str, encoding) {\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.BufferByteLength.call(this, str, encoding);\n\n            // Slow, I know, but we don't have a better way yet.\n            return iconv.encode(str, encoding).length;\n        }\n\n        original.BufferToString = Buffer.prototype.toString;\n        Buffer.prototype.toString = function(encoding, start, end) {\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.BufferToString.call(this, encoding, start, end);\n\n            // Otherwise, use our decoding method.\n            if (typeof start == 'undefined') start = 0;\n            if (typeof end == 'undefined') end = this.length;\n            return iconv.decode(this.slice(start, end), encoding);\n        }\n\n        original.BufferWrite = Buffer.prototype.write;\n        Buffer.prototype.write = function(string, offset, length, encoding) {\n            var _offset = offset, _length = length, _encoding = encoding;\n            // Support both (string, offset, length, encoding)\n            // and the legacy (string, encoding, offset, length)\n            if (isFinite(offset)) {\n                if (!isFinite(length)) {\n                    encoding = length;\n                    length = undefined;\n                }\n            } else {  // legacy\n                var swap = encoding;\n                encoding = offset;\n                offset = length;\n                length = swap;\n            }\n\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.BufferWrite.call(this, string, _offset, _length, _encoding);\n\n            offset = +offset || 0;\n            var remaining = this.length - offset;\n            if (!length) {\n                length = remaining;\n            } else {\n                length = +length;\n                if (length > remaining) {\n                    length = remaining;\n                }\n            }\n\n            if (string.length > 0 && (length < 0 || offset < 0))\n                throw new RangeError('attempt to write beyond buffer bounds');\n\n            // Otherwise, use our encoding method.\n            var buf = iconv.encode(string, encoding);\n            if (buf.length < length) length = buf.length;\n            buf.copy(this, offset, 0, length);\n            return length;\n\n            // TODO: Set _charsWritten.\n        }\n\n\n        // -- Readable -------------------------------------------------------------\n        if (iconv.supportsStreams) {\n            var Readable = require('stream').Readable;\n\n            original.ReadableSetEncoding = Readable.prototype.setEncoding;\n            Readable.prototype.setEncoding = function setEncoding(enc, options) {\n                // Use our own decoder, it has the same interface.\n                // We cannot use original function as it doesn't handle BOM-s.\n                this._readableState.decoder = iconv.getDecoder(enc, options);\n                this._readableState.encoding = enc;\n            }\n\n            Readable.prototype.collect = iconv._collect;\n        }\n    }\n\n    // Remove iconv-lite Node primitive extensions.\n    iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {\n        if (!iconv.supportsNodeEncodingsExtension)\n            return;\n        if (!original)\n            throw new Error(\"require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.\")\n\n        delete Buffer.isNativeEncoding;\n\n        var SlowBuffer = require('buffer').SlowBuffer;\n\n        SlowBuffer.prototype.toString = original.SlowBufferToString;\n        SlowBuffer.prototype.write = original.SlowBufferWrite;\n\n        Buffer.isEncoding = original.BufferIsEncoding;\n        Buffer.byteLength = original.BufferByteLength;\n        Buffer.prototype.toString = original.BufferToString;\n        Buffer.prototype.write = original.BufferWrite;\n\n        if (iconv.supportsStreams) {\n            var Readable = require('stream').Readable;\n\n            Readable.prototype.setEncoding = original.ReadableSetEncoding;\n            delete Readable.prototype.collect;\n        }\n\n        original = undefined;\n    }\n}\n"]}