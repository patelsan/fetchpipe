{"version":3,"sources":["streams.js"],"names":[],"mappings":"AAAA,YAAY,CAAA;;AAEZ,IAAI,SAAS,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC;;;AAI5C,MAAM,CAAC,OAAO,GAAG,UAAS,KAAK,EAAE;;;AAG7B,SAAK,CAAC,YAAY,GAAG,SAAS,YAAY,CAAC,QAAQ,EAAE,OAAO,EAAE;AAC1D,eAAO,IAAI,sBAAsB,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC;KACnF,CAAA;;AAED,SAAK,CAAC,YAAY,GAAG,SAAS,YAAY,CAAC,QAAQ,EAAE,OAAO,EAAE;AAC1D,eAAO,IAAI,sBAAsB,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC;KACnF,CAAA;;AAED,SAAK,CAAC,eAAe,GAAG,IAAI,CAAC;;;AAI7B,SAAK,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;AACtD,SAAK,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;AACtD,SAAK,CAAC,QAAQ,GAAG,sBAAsB,CAAC,SAAS,CAAC,OAAO,CAAC;CAC7D,CAAC;;;AAIF,SAAS,sBAAsB,CAAC,IAAI,EAAE,OAAO,EAAE;AAC3C,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,WAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AACxB,WAAO,CAAC,aAAa,GAAG,KAAK,CAAC;AAC9B,aAAS,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;CACjC;;AAED,sBAAsB,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE;AAClE,eAAW,EAAE,EAAE,KAAK,EAAE,sBAAsB,EAAE;CACjD,CAAC,CAAC;;AAEH,sBAAsB,CAAC,SAAS,CAAC,UAAU,GAAG,UAAS,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE;AAC1E,QAAI,OAAO,KAAK,IAAI,QAAQ,EACxB,OAAO,IAAI,CAAC,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC,CAAC;AAChF,QAAI;AACA,YAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACjC,YAAI,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACtC,YAAI,EAAE,CAAC;KACV,CACD,OAAO,CAAC,EAAE;AACN,YAAI,CAAC,CAAC,CAAC,CAAC;KACX;CACJ,CAAA;;AAED,sBAAsB,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,IAAI,EAAE;AACrD,QAAI;AACA,YAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;AAC1B,YAAI,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACtC,YAAI,EAAE,CAAC;KACV,CACD,OAAO,CAAC,EAAE;AACN,YAAI,CAAC,CAAC,CAAC,CAAC;KACX;CACJ,CAAA;;AAED,sBAAsB,CAAC,SAAS,CAAC,OAAO,GAAG,UAAS,EAAE,EAAE;AACpD,QAAI,MAAM,GAAG,EAAE,CAAC;AAChB,QAAI,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;AACrB,QAAI,CAAC,EAAE,CAAC,MAAM,EAAE,UAAS,KAAK,EAAE;AAAE,cAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAAE,CAAC,CAAC;AACzD,QAAI,CAAC,EAAE,CAAC,KAAK,EAAE,YAAW;AACtB,UAAE,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;KACnC,CAAC,CAAC;AACH,WAAO,IAAI,CAAC;CACf,CAAA;;;AAID,SAAS,sBAAsB,CAAC,IAAI,EAAE,OAAO,EAAE;AAC3C,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,WAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AACxB,WAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;AAC1C,aAAS,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;CACjC;;AAED,sBAAsB,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE;AAClE,eAAW,EAAE,EAAE,KAAK,EAAE,sBAAsB,EAAE;CACjD,CAAC,CAAC;;AAEH,sBAAsB,CAAC,SAAS,CAAC,UAAU,GAAG,UAAS,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE;AAC1E,QAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EACvB,OAAO,IAAI,CAAC,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC,CAAC;AAChF,QAAI;AACA,YAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACjC,YAAI,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrD,YAAI,EAAE,CAAC;KACV,CACD,OAAO,CAAC,EAAE;AACN,YAAI,CAAC,CAAC,CAAC,CAAC;KACX;CACJ,CAAA;;AAED,sBAAsB,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,IAAI,EAAE;AACrD,QAAI;AACA,YAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;AAC1B,YAAI,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrD,YAAI,EAAE,CAAC;KACV,CACD,OAAO,CAAC,EAAE;AACN,YAAI,CAAC,CAAC,CAAC,CAAC;KACX;CACJ,CAAA;;AAED,sBAAsB,CAAC,SAAS,CAAC,OAAO,GAAG,UAAS,EAAE,EAAE;AACpD,QAAI,GAAG,GAAG,EAAE,CAAC;AACb,QAAI,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;AACrB,QAAI,CAAC,EAAE,CAAC,MAAM,EAAE,UAAS,KAAK,EAAE;AAAE,WAAG,IAAI,KAAK,CAAC;KAAE,CAAC,CAAC;AACnD,QAAI,CAAC,EAAE,CAAC,KAAK,EAAE,YAAW;AACtB,UAAE,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KACjB,CAAC,CAAC;AACH,WAAO,IAAI,CAAC;CACf,CAAA","file":"streams-compiled.js","sourcesContent":["\"use strict\"\n\nvar Transform = require(\"stream\").Transform;\n\n\n// == Exports ==================================================================\nmodule.exports = function(iconv) {\n    \n    // Additional Public API.\n    iconv.encodeStream = function encodeStream(encoding, options) {\n        return new IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);\n    }\n\n    iconv.decodeStream = function decodeStream(encoding, options) {\n        return new IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);\n    }\n\n    iconv.supportsStreams = true;\n\n\n    // Not published yet.\n    iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;\n    iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;\n    iconv._collect = IconvLiteDecoderStream.prototype.collect;\n};\n\n\n// == Encoder stream =======================================================\nfunction IconvLiteEncoderStream(conv, options) {\n    this.conv = conv;\n    options = options || {};\n    options.decodeStrings = false; // We accept only strings, so we don't need to decode them.\n    Transform.call(this, options);\n}\n\nIconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {\n    constructor: { value: IconvLiteEncoderStream }\n});\n\nIconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {\n    if (typeof chunk != 'string')\n        return done(new Error(\"Iconv encoding stream needs strings as its input.\"));\n    try {\n        var res = this.conv.write(chunk);\n        if (res && res.length) this.push(res);\n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteEncoderStream.prototype._flush = function(done) {\n    try {\n        var res = this.conv.end();\n        if (res && res.length) this.push(res);\n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteEncoderStream.prototype.collect = function(cb) {\n    var chunks = [];\n    this.on('error', cb);\n    this.on('data', function(chunk) { chunks.push(chunk); });\n    this.on('end', function() {\n        cb(null, Buffer.concat(chunks));\n    });\n    return this;\n}\n\n\n// == Decoder stream =======================================================\nfunction IconvLiteDecoderStream(conv, options) {\n    this.conv = conv;\n    options = options || {};\n    options.encoding = this.encoding = 'utf8'; // We output strings.\n    Transform.call(this, options);\n}\n\nIconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {\n    constructor: { value: IconvLiteDecoderStream }\n});\n\nIconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {\n    if (!Buffer.isBuffer(chunk))\n        return done(new Error(\"Iconv decoding stream needs buffers as its input.\"));\n    try {\n        var res = this.conv.write(chunk);\n        if (res && res.length) this.push(res, this.encoding);\n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteDecoderStream.prototype._flush = function(done) {\n    try {\n        var res = this.conv.end();\n        if (res && res.length) this.push(res, this.encoding);                \n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteDecoderStream.prototype.collect = function(cb) {\n    var res = '';\n    this.on('error', cb);\n    this.on('data', function(chunk) { res += chunk; });\n    this.on('end', function() {\n        cb(null, res);\n    });\n    return this;\n}\n\n"]}