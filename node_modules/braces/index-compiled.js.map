{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAOA,YAAY,CAAC;;;;;;AAMb,IAAI,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC;AAC1C,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;AAC/B,IAAI,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;AACjC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;;;;;;AAM3B,MAAM,CAAC,OAAO,GAAG,UAAU,GAAG,EAAE,OAAO,EAAE;AACvC,MAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AAC3B,UAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;GAC5C;AACD,SAAO,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;CAC7B,CAAC;;;;;;;;;;;;AAYF,SAAS,MAAM;;;4BAAoB;QAAnB,GAAG;QAAE,GAAG;QAAE,OAAO;AAU3B,QAAI,GAOJ,EAAE,GACF,GAAG,GAWH,OAAO,GACP,CAAC,GA+BD,KAAK,GAKL,MAAM,GACN,KAAK,GAGL,IAAI,GAAE,UAAU,GAqBhB,GAAG,GACH,CAAC,GAAM,GAAG,GAGR,IAAI;;;AA9FV,QAAI,GAAG,KAAK,EAAE,EAAE;AACd,aAAO,EAAE,CAAC;KACX;;AAED,QAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;AACvB,aAAO,GAAG,GAAG,CAAC;AACd,SAAG,GAAG,EAAE,CAAC;KACV;;AAED,QAAI,IAAI,GAAG,OAAO,IAAI,EAAE,CAAC;AACzB,OAAG,GAAG,GAAG,IAAI,EAAE,CAAC;;AAEhB,QAAI,OAAO,IAAI,CAAC,OAAO,KAAK,WAAW,EAAE;AACvC,UAAI,CAAC,OAAO,GAAG,IAAI,CAAC;KACrB;;AAED,QAAI,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;AACjB,QAAI,GAAG,CAAC;;AAER,QAAI,OAAO,IAAI,KAAK,UAAU,EAAE;AAC9B,QAAE,GAAG,IAAI,CAAC;AACV,UAAI,GAAG,EAAE,CAAC;KACX;;AAED,QAAI,EAAE,SAAS,YAAY,MAAM,CAAA,AAAC,EAAE;AAClC,eAAS,GAAG,YAAY,EAAE,CAAC;KAC5B;;AAED,QAAI,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;AACzC,QAAI,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;;AAEnB,YAAO,CAAC;AACN,WAAK,KAAK;AACR,eAAO,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,AACtC,WAAK,KAAK;AACR,eAAO,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,AACpC,WAAK,KAAK;AACR,eAAO,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,AACrC,WAAK,GAAG;AACN,eAAO,eAAe,CAAC,GAAG,CAAC,CAAC;AAAA,AAC9B,WAAK,KAAK;AACR,eAAO,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;AAAA,AACxC,WAAK,IAAI;AACP,eAAO,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,AACrC,WAAK,KAAK,CAAC;AACX,WAAK,KAAK;AACR,eAAO,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,AACtC,WAAK,IAAI;AACP,YAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AAC1B,iBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACxB,MAAM;AACL,aAAG,GAAG,IAAI,CAAC;AACX,aAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC;SAC3C;AAAA,KACJ;;AAED,QAAI,EAAE,OAAO,YAAY,MAAM,CAAA,AAAC,EAAE;AAChC,aAAO,GAAG,UAAU,EAAE,CAAC;KACxB;;AAED,QAAI,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC9B,QAAI,KAAK,IAAI,IAAI,EAAE;AACjB,aAAO,CAAC,GAAG,CAAC,CAAC;KACd;;AAED,QAAI,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACtB,QAAI,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACrB,QAAI,KAAK,KAAK,EAAE,EAAE;AAAE,aAAO,CAAC,GAAG,CAAC,CAAC;KAAE;;AAEnC,QAAI,IAAI,EAAE,UAAU,CAAC;;AAErB,QAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AAC9B,UAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACxD,gBAAU,GAAG,IAAI,CAAC,MAAM,CAAC;KAE1B,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;AAChD,aAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;KAE/C,MAAM;AACL,UAAI,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACxB,UAAI,IAAI,CAAC,MAAM,EAAE;aACD,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;cAAE,IAAI;;;;OACzD;;AAED,gBAAU,GAAG,IAAI,CAAC,MAAM,CAAC;AACzB,UAAI,UAAU,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE;AACjC,YAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;OAC/B;KACF;;AAED,QAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;AACtB,QAAI,CAAC,GAAG,CAAC;QAAE,GAAG,CAAC;;AAEf,WAAO,GAAG,EAAE,EAAE;AACZ,UAAI,IAAI,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;;AAErB,UAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;AAC3B,YAAI,UAAU,GAAG,CAAC,EAAE;AAClB,iBAAO,IAAI,CAAC;SACb,MAAM;AACL,iBAAO,CAAC,GAAG,CAAC,CAAC;SACd;OACF;;AAED,SAAG,GAAG,MAAM,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;;AAEhC,UAAI,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AAC3B,WAAG,GAAG,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;OAC9B,MAAM,IAAI,GAAG,KAAK,EAAE,EAAE;AACrB,YAAI,IAAI,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;AAAE,mBAAS;SAAE;AAC1D,WAAG,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;OAC9C;KACF;;AAED,QAAI,IAAI,CAAC,MAAM,EAAE;AAAE,aAAO,MAAM,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;KAAE;AACrD,WAAO,GAAG,CAAC;GACZ;CAAA;;;;;;;;AAQD,SAAS,WAAW,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE,EAAE;AACrC,MAAI,OAAO,OAAO,KAAK,UAAU,EAAE;AACjC,MAAE,GAAG,OAAO,CAAC;AACb,WAAO,GAAG,IAAI,CAAC;GAChB;;AAED,MAAI,IAAI,GAAG,OAAO,IAAI,EAAE,CAAC;AACzB,MAAI,GAAG,GAAG,aAAa,CAAC;AACxB,MAAI,GAAG,GAAG,CAAC,CAAC;AACZ,MAAI,GAAG,CAAC;;AAER,MAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC7B,MAAI,IAAI,CAAC,OAAO,EAAE;AAChB,WAAO,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;GACjC;;AAED,KAAG,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AACvB,KAAG,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;AAChC,MAAI,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;AACrB,MAAI,GAAG,GAAG,EAAE,CAAC;AACb,MAAI,CAAC,GAAG,CAAC,CAAC;;AAEV,SAAO,GAAG,EAAE,EAAE;AACZ,QAAI,GAAG,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACnB,QAAI,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;;AAE3B,QAAI,GAAG,KAAK,CAAC,CAAC,EAAE;AACd,SAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAEf,MAAM;AACL,SAAG,GAAG,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACxC,UAAI,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,KAAK,KAAK,EAAE;AACnC,WAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;OAEf,MAAM;AACL,YAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;AAC3B,WAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;OAC5C;KACF;GACF;AACD,SAAO,GAAG,CAAC;CACZ;;;;;;;;;;;AAWD,SAAS,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE;AACrB,MAAI,EAAE,KAAK,GAAG,EAAE;AACd,WAAO,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;GACjC;AACD,MAAI,EAAE,KAAK,GAAG,EAAE;AACd,WAAO,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;GACjC;AACD,MAAI,EAAE,KAAK,GAAG,EAAE;AACd,WAAO,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;GACjC;AACD,MAAI,EAAE,KAAK,IAAI,EAAE;AACf,WAAO,KAAK,GAAG,GAAG,GAAG,KAAK,CAAC;GAC5B;CACF;;;;;;AAMD,SAAS,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AACnC,SAAO,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;CAC1D;;;;;;AAMD,SAAS,WAAW,CAAC,GAAG,EAAE;AACxB,SAAO,CAAC,CAAC,GAAG,IAAI,GAAG,KAAK,IAAI,CAAC;CAC9B;;;;;;AAMD,SAAS,eAAe,CAAC,GAAG,EAAE;AAC5B,MAAI,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC1B,MAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;AACtB,MAAI,GAAG,GAAG,EAAE,CAAC;AACb,MAAI,CAAC,GAAG,CAAC,CAAC;;AAEV,SAAO,GAAG,EAAE,EAAE;AACZ,OAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;GACxC;AACD,SAAO,GAAG,CAAC;CACZ;;;;;;AAMD,SAAS,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AACpC,MAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AAC1B,WAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;GAC7C,MAAM;AACL,OAAG,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAC5C,OAAG,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAC5C,WAAO,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,UAAU,GAAG,EAAE;AAChD,SAAG,GAAG,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1C,aAAO,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC5C,CAAC,CAAC;GACJ;CACF;;;;;;AAMD,SAAS,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AAClC,MAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AAC9B,WAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;GAC7C,MAAM;AACL,OAAG,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAC3C,WAAO,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,UAAU,GAAG,EAAE;AAChD,aAAO,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC3C,CAAC,CAAC;GACJ;CACF;;;;;;AAMD,SAAS,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AACnC,KAAG,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAC5C,SAAO,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,UAAU,GAAG,EAAE;AAChD,WAAO,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;GAC9C,CAAC,CAAC;CACJ;;;;;;AAMD,SAAS,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AACpC,MAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AACpB,WAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;GAC7C,MAAM;AACL,OAAG,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAC7C,WAAO,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,UAAU,GAAG,EAAE;AAChD,aAAO,GAAG,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC7C,CAAC,CAAC;GACJ;CACF;;;;;;AAMD,SAAS,YAAY,GAAG;AACtB,SAAO,mEAAkE;IAAC;CAC3E;;;;;;AAMD,SAAS,UAAU,GAAG;AACpB,SAAO,qBAAoB;IAAC;CAC7B;;;;;;AAMD,SAAS,QAAQ,GAAG;AAClB,SAAO,gBAAe;IAAC;CACxB;;AAED,IAAI,OAAO,CAAC;AACZ,IAAI,SAAS,CAAC;;;;;;;AAOd,SAAS,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE;AACvC,MAAI,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC3B,SAAO,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,WAAW,GACjC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;CAClC;;;;;;AAMD,SAAS,GAAG,CAAC,GAAG,EAAE,EAAE,EAAE;AACpB,MAAI,GAAG,IAAI,IAAI,EAAE;AACf,WAAO,EAAE,CAAC;GACX;;AAED,MAAI,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;AACrB,MAAI,GAAG,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;AACzB,MAAI,CAAC,GAAG,CAAC,CAAC,CAAC;;AAEX,SAAO,EAAE,CAAC,GAAG,GAAG,EAAE;AAChB,OAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;GAC7B;;AAED,SAAO,GAAG,CAAC;CACZ;;;;;;AAMD,SAAS,MAAM,CAAC,GAAG,EAAE,EAAE,EAAE;AACvB,MAAI,GAAG,IAAI,IAAI,EAAE,OAAO,EAAE,CAAC;AAC3B,MAAI,OAAO,EAAE,KAAK,UAAU,EAAE;AAC5B,UAAM,IAAI,SAAS,CAAC,6CAA6C,CAAC,CAAC;GACpE;;AAED,MAAI,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;AACrB,MAAI,GAAG,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC;AACtB,MAAI,CAAC,GAAG,CAAC,CAAC;;AAEV,SAAO,GAAG,EAAE,EAAE;AACZ,QAAI,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;AACtB,SAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;KACpB;GACF;AACD,SAAO,GAAG,CAAC;CACZ","file":"index-compiled.js","sourcesContent":["/*!\n * braces <https://github.com/jonschlinkert/braces>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\n/**\n * Module dependencies\n */\n\nvar lazy = require('lazy-cache')(require);\nlazy('expand-range', 'expand');\nlazy('repeat-element', 'repeat');\nlazy('preserve', 'tokens');\n\n/**\n * Expose `braces`\n */\n\nmodule.exports = function (str, options) {\n  if (typeof str !== 'string') {\n    throw new Error('braces expects a string');\n  }\n  return braces(str, options);\n};\n\n/**\n * Expand `{foo,bar}` or `{1..5}` braces in the\n * given `string`.\n *\n * @param  {String} `str`\n * @param  {Array} `arr`\n * @param  {Object} `options`\n * @return {Array}\n */\n\nfunction braces(str, arr, options) {\n  if (str === '') {\n    return [];\n  }\n\n  if (!Array.isArray(arr)) {\n    options = arr;\n    arr = [];\n  }\n\n  var opts = options || {};\n  arr = arr || [];\n\n  if (typeof opts.nodupes === 'undefined') {\n    opts.nodupes = true;\n  }\n\n  var fn = opts.fn;\n  var es6;\n\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = {};\n  }\n\n  if (!(patternRe instanceof RegExp)) {\n    patternRe = patternRegex();\n  }\n\n  var matches = str.match(patternRe) || [];\n  var m = matches[0];\n\n  switch(m) {\n    case '\\\\,':\n      return escapeCommas(str, arr, opts);\n    case '\\\\.':\n      return escapeDots(str, arr, opts);\n    case '\\/.':\n      return escapePaths(str, arr, opts);\n    case ' ':\n      return splitWhitespace(str);\n    case '{,}':\n      return exponential(str, opts, braces);\n    case '{}':\n      return emptyBraces(str, arr, opts);\n    case '\\\\{':\n    case '\\\\}':\n      return escapeBraces(str, arr, opts);\n    case '${':\n      if (!/\\{[^{]+\\{/.test(str)) {\n        return arr.concat(str);\n      } else {\n        es6 = true;\n        str = lazy.tokens.before(str, es6Regex());\n      }\n  }\n\n  if (!(braceRe instanceof RegExp)) {\n    braceRe = braceRegex();\n  }\n\n  var match = braceRe.exec(str);\n  if (match == null) {\n    return [str];\n  }\n\n  var outter = match[1];\n  var inner = match[2];\n  if (inner === '') { return [str]; }\n\n  var segs, segsLength;\n\n  if (inner.indexOf('..') !== -1) {\n    segs = lazy.expand(inner, opts, fn) || inner.split(',');\n    segsLength = segs.length;\n\n  } else if (inner[0] === '\"' || inner[0] === '\\'') {\n    return arr.concat(str.split(/['\"]/).join(''));\n\n  } else {\n    segs = inner.split(',');\n    if (opts.makeRe) {\n      return braces(str.replace(outter, wrap(segs, '|')), opts);\n    }\n\n    segsLength = segs.length;\n    if (segsLength === 1 && opts.bash) {\n      segs[0] = wrap(segs[0], '\\\\');\n    }\n  }\n\n  var len = segs.length;\n  var i = 0, val;\n\n  while (len--) {\n    var path = segs[i++];\n\n    if (/(\\.[^.\\/])/.test(path)) {\n      if (segsLength > 1) {\n        return segs;\n      } else {\n        return [str];\n      }\n    }\n\n    val = splice(str, outter, path);\n\n    if (/\\{[^{}]+?\\}/.test(val)) {\n      arr = braces(val, arr, opts);\n    } else if (val !== '') {\n      if (opts.nodupes && arr.indexOf(val) !== -1) { continue; }\n      arr.push(es6 ? lazy.tokens.after(val) : val);\n    }\n  }\n\n  if (opts.strict) { return filter(arr, filterEmpty); }\n  return arr;\n}\n\n/**\n * Expand exponential ranges\n *\n *   `a{,}{,}` => ['a', 'a', 'a', 'a']\n */\n\nfunction exponential(str, options, fn) {\n  if (typeof options === 'function') {\n    fn = options;\n    options = null;\n  }\n\n  var opts = options || {};\n  var esc = '__ESC_EXP__';\n  var exp = 0;\n  var res;\n\n  var parts = str.split('{,}');\n  if (opts.nodupes) {\n    return fn(parts.join(''), opts);\n  }\n\n  exp = parts.length - 1;\n  res = fn(parts.join(esc), opts);\n  var len = res.length;\n  var arr = [];\n  var i = 0;\n\n  while (len--) {\n    var ele = res[i++];\n    var idx = ele.indexOf(esc);\n\n    if (idx === -1) {\n      arr.push(ele);\n\n    } else {\n      ele = ele.split('__ESC_EXP__').join('');\n      if (!!ele && opts.nodupes !== false) {\n        arr.push(ele);\n\n      } else {\n        var num = Math.pow(2, exp);\n        arr.push.apply(arr, lazy.repeat(ele, num));\n      }\n    }\n  }\n  return arr;\n}\n\n/**\n * Wrap a value with parens, brackets or braces,\n * based on the given character/separator.\n *\n * @param  {String|Array} `val`\n * @param  {String} `ch`\n * @return {String}\n */\n\nfunction wrap(val, ch) {\n  if (ch === '|') {\n    return '(' + val.join(ch) + ')';\n  }\n  if (ch === ',') {\n    return '{' + val.join(ch) + '}';\n  }\n  if (ch === '-') {\n    return '[' + val.join(ch) + ']';\n  }\n  if (ch === '\\\\') {\n    return '\\\\{' + val + '\\\\}';\n  }\n}\n\n/**\n * Handle empty braces: `{}`\n */\n\nfunction emptyBraces(str, arr, opts) {\n  return braces(str.split('{}').join('\\\\{\\\\}'), arr, opts);\n}\n\n/**\n * Filter out empty-ish values\n */\n\nfunction filterEmpty(ele) {\n  return !!ele && ele !== '\\\\';\n}\n\n/**\n * Handle patterns with whitespace\n */\n\nfunction splitWhitespace(str) {\n  var segs = str.split(' ');\n  var len = segs.length;\n  var res = [];\n  var i = 0;\n\n  while (len--) {\n    res.push.apply(res, braces(segs[i++]));\n  }\n  return res;\n}\n\n/**\n * Handle escaped braces: `\\\\{foo,bar}`\n */\n\nfunction escapeBraces(str, arr, opts) {\n  if (!/\\{[^{]+\\{/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\{').join('__LT_BRACE__');\n    str = str.split('\\\\}').join('__RT_BRACE__');\n    return map(braces(str, arr, opts), function (ele) {\n      ele = ele.split('__LT_BRACE__').join('{');\n      return ele.split('__RT_BRACE__').join('}');\n    });\n  }\n}\n\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\nfunction escapeDots(str, arr, opts) {\n  if (!/[^\\\\]\\..+\\\\\\./.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\.').join('__ESC_DOT__');\n    return map(braces(str, arr, opts), function (ele) {\n      return ele.split('__ESC_DOT__').join('.');\n    });\n  }\n}\n\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\nfunction escapePaths(str, arr, opts) {\n  str = str.split('\\/.').join('__ESC_PATH__');\n  return map(braces(str, arr, opts), function (ele) {\n    return ele.split('__ESC_PATH__').join('\\/.');\n  });\n}\n\n/**\n * Handle escaped commas: `{a\\\\,b}`\n */\n\nfunction escapeCommas(str, arr, opts) {\n  if (!/\\w,/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\,').join('__ESC_COMMA__');\n    return map(braces(str, arr, opts), function (ele) {\n      return ele.split('__ESC_COMMA__').join(',');\n    });\n  }\n}\n\n/**\n * Regex for common patterns\n */\n\nfunction patternRegex() {\n  return /\\$\\{|[ \\t]|{}|{,}|\\\\,(?=.*[{}])|\\/\\.(?=.*[{}])|\\\\\\.(?={)|\\\\{|\\\\}/;\n}\n\n/**\n * Braces regex.\n */\n\nfunction braceRegex() {\n  return /.*(\\\\?\\{([^}]+)\\})/;\n}\n\n/**\n * es6 delimiter regex.\n */\n\nfunction es6Regex() {\n  return /\\$\\{([^}]+)\\}/;\n}\n\nvar braceRe;\nvar patternRe;\n\n/**\n * Faster alternative to `String.replace()` when the\n * index of the token to be replaces can't be supplied\n */\n\nfunction splice(str, token, replacement) {\n  var i = str.indexOf(token);\n  return str.substr(0, i) + replacement\n    + str.substr(i + token.length);\n}\n\n/**\n * Fast array map\n */\n\nfunction map(arr, fn) {\n  if (arr == null) {\n    return [];\n  }\n\n  var len = arr.length;\n  var res = new Array(len);\n  var i = -1;\n\n  while (++i < len) {\n    res[i] = fn(arr[i], i, arr);\n  }\n\n  return res;\n}\n\n/**\n * Fast array filter\n */\n\nfunction filter(arr, cb) {\n  if (arr == null) return [];\n  if (typeof cb !== 'function') {\n    throw new TypeError('braces: filter expects a callback function.');\n  }\n\n  var len = arr.length;\n  var res = arr.slice();\n  var i = 0;\n\n  while (len--) {\n    if (!cb(arr[len], i++)) {\n      res.splice(len, 1);\n    }\n  }\n  return res;\n}\n"]}