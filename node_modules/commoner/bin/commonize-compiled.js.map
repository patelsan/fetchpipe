{"version":3,"sources":["commonize"],"names":[],"mappings":";;AAEA,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAS,EAAE,EAAE;AACrC,QAAI,OAAO,GAAG,IAAI,CAAC;;AAEnB,WAAO,OAAO,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,UAAS,QAAQ,EAAE;;;AAGlD,YAAI,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC,EAC3B,OAAO,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;KAC9C,CAAC,CAAC;CAEN,EAAE,UAAS,EAAE,EAAE;;AAEZ,WAAO,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;CAE/B,CAAC,CAAC,OAAO,CAAC,UAAS,EAAE,EAAE,MAAM,EAAE;;;AAG5B,WAAO,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;CACxC,CAAC,CAAC","file":"commonize-compiled.js","sourcesContent":["#!/usr/bin/env node\n\nrequire(\"commoner\").resolve(function(id) {\n    var context = this;\n\n    return context.getProvidedP().then(function(idToPath) {\n        // If a module declares its own identifier using @providesModule\n        // then that identifier will be a key in the idToPath object.\n        if (idToPath.hasOwnProperty(id))\n            return context.readFileP(idToPath[id]);\n    });\n\n}, function(id) {\n    // Otherwise assume the identifier maps directly to a filesystem path.\n    return this.readModuleP(id);\n\n}).process(function(id, source) {\n    // As a simple example of a processing step, make sure the file ends\n    // with exactly one newline character.\n    return source.replace(/\\s+$/m, \"\\n\");\n});\n"]}