{"version":3,"sources":["grep.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AACrB,IAAI,EAAE,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAChC,IAAI,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC7B,IAAI,OAAO,GAAG,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;AACtC,IAAI,KAAK,GAAG,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;;AAElC,SAAS,WAAW,CAAC,OAAO,EAAE,GAAG,EAAE;AAC/B,WAAO,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAS,KAAK,EAAE;AACrC,eAAO,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,UAAS,IAAI,EAAE;AAClC,gBAAI,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AAC5B,mBAAO,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAS,IAAI,EAAE;AACnC,uBAAO,IAAI,CAAC,WAAW,EAAE,GACnB,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,GAC1B,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;aACrC,CAAC,CAAC;SACN,CAAC,CAAC,CAAC,IAAI,CAAC,UAAS,OAAO,EAAE;AACvB,mBAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;SAChC,CAAC,CAAC;KACN,CAAC,CAAC;CACN;;AAED,SAAS,YAAY,CAAC,OAAO,EAAE,IAAI,EAAE;AACjC,WAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAS,QAAQ,EAAE;AAChD,YAAI,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrD,eAAO,MAAM,GAAG,CAAC;AACb,gBAAI,EAAE,IAAI;AACV,iBAAK,EAAE,MAAM,CAAC,CAAC,CAAC;SACnB,CAAC,GAAG,EAAE,CAAC;KACX,CAAC,CAAC;CACN;;AAED,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE,SAAS,EAAE;AAC1C,UAAM,CAAC,WAAW,CAAC,OAAO,OAAO,EAAE,QAAQ,CAAC,CAAC;;AAE7C,WAAO,WAAW,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,UAAS,OAAO,EAAE;AAC1D,YAAI,WAAW,GAAG,EAAE,CAAC;;AAErB,eAAO,CAAC,OAAO,CAAC,UAAS,MAAM,EAAE;AAC7B,uBAAW,CAAC,IAAI,CAAC,QAAQ,CACrB,SAAS,EACT,MAAM,CAAC,IAAI,CACd,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC;SAC3C,CAAC,CAAC;;AAEH,eAAO,WAAW,CAAC;KACtB,CAAC,CAAC;CACN,CAAC","file":"grep-compiled.js","sourcesContent":["var assert = require(\"assert\");\nvar path = require(\"path\");\nvar Q = require(\"q\");\nvar fs = require(\"graceful-fs\");\nvar util = require(\"./util\");\nvar readdir = Q.denodeify(fs.readdir);\nvar lstat = Q.denodeify(fs.lstat);\n\nfunction processDirP(pattern, dir) {\n    return readdir(dir).then(function(files) {\n        return Q.all(files.map(function(file) {\n            file = path.join(dir, file);\n            return lstat(file).then(function(stat) {\n                return stat.isDirectory()\n                    ? processDirP(pattern, file)\n                    : processFileP(pattern, file);\n            });\n        })).then(function(results) {\n            return util.flatten(results);\n        });\n    });\n}\n\nfunction processFileP(pattern, file) {\n    return util.readFileP(file).then(function(contents) {\n        var result = new RegExp(pattern, 'g').exec(contents);\n        return result ? [{\n            path: file,\n            match: result[0]\n        }] : [];\n    });\n}\n\nmodule.exports = function(pattern, sourceDir) {\n    assert.strictEqual(typeof pattern, \"string\");\n\n    return processDirP(pattern, sourceDir).then(function(results) {\n        var pathToMatch = {};\n\n        results.forEach(function(result) {\n            pathToMatch[path.relative(\n                sourceDir,\n                result.path\n            ).split(\"\\\\\").join(\"/\")] = result.match;\n        });\n        \n        return pathToMatch;\n    });\n};\n"]}