{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * content-type\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * RegExp to match *( \";\" parameter ) in RFC 7231 sec 3.1.1.1\n *\n * parameter     = token \"=\" ( token / quoted-string )\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\n * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text\n * obs-text      = %x80-FF\n * quoted-pair   = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n */\nvar paramRegExp = /; *([!#$%&'\\*\\+\\-\\.\\^_`\\|~0-9A-Za-z]+) *= *(\"(?:[\\u000b\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u000b\\u0020-\\u00ff])*\"|[!#$%&'\\*\\+\\-\\.\\^_`\\|~0-9A-Za-z]+) */g\nvar textRegExp = /^[\\u000b\\u0020-\\u007e\\u0080-\\u00ff]+$/\nvar tokenRegExp = /^[!#$%&'\\*\\+\\-\\.\\^_`\\|~0-9A-Za-z]+$/\n\n/**\n * RegExp to match quoted-pair in RFC 7230 sec 3.2.6\n *\n * quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n * obs-text    = %x80-FF\n */\nvar qescRegExp = /\\\\([\\u000b\\u0020-\\u00ff])/g\n\n/**\n * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6\n */\nvar quoteRegExp = /([\\\\\"])/g\n\n/**\n * RegExp to match type in RFC 6838\n *\n * media-type = type \"/\" subtype\n * type       = token\n * subtype    = token\n */\nvar typeRegExp = /^[!#$%&'\\*\\+\\-\\.\\^_`\\|~0-9A-Za-z]+\\/[!#$%&'\\*\\+\\-\\.\\^_`\\|~0-9A-Za-z]+$/\n\n/**\n * Module exports.\n * @public\n */\n\nexports.format = format\nexports.parse = parse\n\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */\n\nfunction format(obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required')\n  }\n\n  var parameters = obj.parameters\n  var type = obj.type\n\n  if (!type || !typeRegExp.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  var string = type\n\n  // append parameters\n  if (parameters && typeof parameters === 'object') {\n    var param\n    var params = Object.keys(parameters).sort()\n\n    for (var i = 0; i < params.length; i++) {\n      param = params[i]\n\n      if (!tokenRegExp.test(param)) {\n        throw new TypeError('invalid parameter name')\n      }\n\n      string += '; ' + param + '=' + qstring(parameters[param])\n    }\n  }\n\n  return string\n}\n\n/**\n * Parse media type to object.\n *\n * @param {string|object} string\n * @return {Object}\n * @public\n */\n\nfunction parse(string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  if (typeof string === 'object') {\n    // support req/res-like objects as argument\n    string = getcontenttype(string)\n\n    if (typeof string !== 'string') {\n      throw new TypeError('content-type header is missing from object');\n    }\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  var index = string.indexOf(';')\n  var type = index !== -1\n    ? string.substr(0, index).trim()\n    : string.trim()\n\n  if (!typeRegExp.test(type)) {\n    throw new TypeError('invalid media type')\n  }\n\n  var key\n  var match\n  var obj = new ContentType(type.toLowerCase())\n  var value\n\n  paramRegExp.lastIndex = index\n\n  while (match = paramRegExp.exec(string)) {\n    if (match.index !== index) {\n      throw new TypeError('invalid parameter format')\n    }\n\n    index += match[0].length\n    key = match[1].toLowerCase()\n    value = match[2]\n\n    if (value[0] === '\"') {\n      // remove quotes and escapes\n      value = value\n        .substr(1, value.length - 2)\n        .replace(qescRegExp, '$1')\n    }\n\n    obj.parameters[key] = value\n  }\n\n  if (index !== -1 && index !== string.length) {\n    throw new TypeError('invalid parameter format')\n  }\n\n  return obj\n}\n\n/**\n * Get content-type from req/res objects.\n *\n * @param {object}\n * @return {Object}\n * @private\n */\n\nfunction getcontenttype(obj) {\n  if (typeof obj.getHeader === 'function') {\n    // res-like\n    return obj.getHeader('content-type')\n  }\n\n  if (typeof obj.headers === 'object') {\n    // req-like\n    return obj.headers && obj.headers['content-type']\n  }\n}\n\n/**\n * Quote a string if necessary.\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\nfunction qstring(val) {\n  var str = String(val)\n\n  // no need to quote tokens\n  if (tokenRegExp.test(str)) {\n    return str\n  }\n\n  if (str.length > 0 && !textRegExp.test(str)) {\n    throw new TypeError('invalid parameter value')\n  }\n\n  return '\"' + str.replace(quoteRegExp, '\\\\$1') + '\"'\n}\n\n/**\n * Class to represent a content type.\n * @private\n */\nfunction ContentType(type) {\n  this.parameters = Object.create(null)\n  this.type = type\n}\n"]}