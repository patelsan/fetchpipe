{"version":3,"sources":["$.assign.js"],"names":[],"mappings":";;;AACA,IAAI,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC;IACnC,OAAO,GAAI,OAAO,CAAC,aAAa,CAAC;IACjC,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC;IACnC,GAAG,GAAQ,OAAO,CAAC,SAAS,CAAC,CAAC;;;AAGlC,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,YAAU;AAC9C,MAAI,CAAC,GAAG,MAAM,CAAC,MAAM;MACjB,CAAC,GAAG,EAAE;MACN,CAAC,GAAG,EAAE;MACN,CAAC,GAAG,MAAM,EAAE;MACZ,CAAC,GAAG,sBAAsB,CAAC;AAC/B,GAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACT,GAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,UAAS,CAAC,EAAC;AAAE,KAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;GAAE,CAAC,CAAC;AAC9C,SAAO,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;CAChE,CAAC,GAAG,SAAS,MAAM,CAAC,MAAM,EAAE,MAAM,EAAC;;AAClC,MAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC;MACpB,CAAC,GAAG,SAAS,CAAC,MAAM;MACpB,CAAC,GAAG,CAAC,CAAC;AACV,SAAM,CAAC,GAAG,CAAC,EAAC;AACV,QAAI,CAAC,GAAQ,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;QAChC,IAAI,GAAK,QAAQ,CAAC,CAAC,CAAC;QACpB,MAAM,GAAG,IAAI,CAAC,MAAM;QACpB,CAAC,GAAQ,CAAC;QACV,GAAG,CAAC;AACR,WAAM,MAAM,GAAG,CAAC,EAAC,IAAG,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;GAC7D;AACD,SAAO,CAAC,CAAC;CACV,GAAG,MAAM,CAAC,MAAM,CAAC","file":"$.assign-compiled.js","sourcesContent":["// 19.1.2.1 Object.assign(target, source, ...)\nvar toObject = require('./$.to-object')\n  , IObject  = require('./$.iobject')\n  , enumKeys = require('./$.enum-keys')\n  , has      = require('./$.has');\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = require('./$.fails')(function(){\n  var a = Object.assign\n    , A = {}\n    , B = {}\n    , S = Symbol()\n    , K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function(k){ B[k] = k; });\n  return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;\n}) ? function assign(target, source){   // eslint-disable-line no-unused-vars\n  var T = toObject(target)\n    , l = arguments.length\n    , i = 1;\n  while(l > i){\n    var S      = IObject(arguments[i++])\n      , keys   = enumKeys(S)\n      , length = keys.length\n      , j      = 0\n      , key;\n    while(length > j)if(has(S, key = keys[j++]))T[key] = S[key];\n  }\n  return T;\n} : Object.assign;"]}