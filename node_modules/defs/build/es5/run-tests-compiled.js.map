{"version":3,"sources":["run-tests.js"],"names":[],"mappings":";;AAAA,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAChC,IAAI,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC;AACzC,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AAE3B,SAAS,KAAK,CAAC,QAAQ,EAAE;AACrB,WAAO,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC;CAC3E;;AAED,IAAI,WAAW,GAAI,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG,aAAa,AAAC,CAAC;;AAErE,IAAI,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,UAAS,QAAQ,EAAE;AAC9D,WAAO,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;CACpE,CAAC,CAAC;;AAEH,SAAS,GAAG,CAAC,IAAI,EAAE;AACf,aAAS,UAAU,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE;AACpC,YAAI,GAAG,KAAK,OAAO,EAAE;AACjB,gBAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;AACjD,mBAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC5B,mBAAO,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;SAChC;KACJ;;AAED,QAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACjC,QAAI,CAAC,GAAG,CAAC,0BAA0B,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC,EAAE,UAAS,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE;AACjG,cAAM,GAAG,MAAM,IAAI,EAAE,CAAC;AACtB,cAAM,GAAG,MAAM,IAAI,EAAE,CAAC;AACtB,YAAI,cAAc,GAAG,KAAK,CAAC,GAAG,CAAC,gBAAgB,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;AACzE,YAAI,cAAc,GAAG,KAAK,CAAC,GAAG,CAAC,gBAAgB,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;;AAEzE,YAAI,IAAI,GAAI,MAAM,KAAK,cAAc,IAAI,MAAM,KAAK,cAAc,AAAC,CAAC;;AAEpE,YAAI,CAAC,IAAI,EAAE;AACP,mBAAO,CAAC,GAAG,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,CAAC;SAC7C;AACD,kBAAU,CAAC,cAAc,EAAE,MAAM,EAAE,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;AAC5D,kBAAU,CAAC,cAAc,EAAE,MAAM,EAAE,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;KAC/D,CAAC,CAAC;CACN;;AAED,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC3B,IAAI,IAAI,GAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,KAAK,GAAG,EAAE,GAAG,WAAW,AAAC,CAAC;AAC1D,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC","file":"run-tests-compiled.js","sourcesContent":["var fs = require(\"fs\");\nvar fmt = require(\"simple-fmt\");\nvar exec = require(\"child_process\").exec;\nvar diff = require(\"diff\");\n\nfunction slurp(filename) {\n    return fs.existsSync(filename) ? String(fs.readFileSync(filename)) : \"\";\n}\n\nvar pathToTests = (fs.existsSync(\"tests\") ? \"tests\" : \"../../tests\");\n\nvar tests = fs.readdirSync(pathToTests).filter(function(filename) {\n    return !/-out\\.js$/.test(filename) && !/-stderr$/.test(filename);\n});\n\nfunction run(test) {\n    function diffOutput(correct, got, name) {\n        if (got !== correct) {\n            var patch = diff.createPatch(name, correct, got);\n            process.stdout.write(patch);\n            process.stdout.write(\"\\n\\n\");\n        }\n    }\n\n    var noSuffix = test.slice(0, -3);\n    exec(fmt(\"{0} {1} defs-cmd {2}/{3}\", NODE, FLAG, pathToTests, test), function(error, stdout, stderr) {\n        stderr = stderr || \"\";\n        stdout = stdout || \"\";\n        var expectedStderr = slurp(fmt(\"{0}/{1}-stderr\", pathToTests, noSuffix));\n        var expectedStdout = slurp(fmt(\"{0}/{1}-out.js\", pathToTests, noSuffix));\n\n        var pass = (stderr === expectedStderr && stdout === expectedStdout);\n\n        if (!pass) {\n            console.log(fmt(\"FAILED test {0}\", test));\n        }\n        diffOutput(expectedStdout, stdout, fmt(\"{0}-out.js\", test));\n        diffOutput(expectedStderr, stderr, fmt(\"{0}-stderr\", test));\n    });\n}\n\nvar NODE = process.argv[0];\nvar FLAG = (process.argv[2] === \"es5\" ? \"\" : \"--harmony\");\ntests.forEach(run);\n"]}