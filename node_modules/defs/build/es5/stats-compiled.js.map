{"version":3,"sources":["stats.js"],"names":[],"mappings":";;AAAA,IAAI,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAChC,IAAI,EAAE,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAC9B,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAE/B,SAAS,KAAK,GAAG;AACb,QAAI,CAAC,IAAI,GAAG,CAAC,CAAC;AACd,QAAI,CAAC,MAAM,GAAG,CAAC,CAAC;AAChB,QAAI,CAAC,OAAO,GAAG,EAAE,CAAC;CACrB;;AAED,KAAK,CAAC,SAAS,CAAC,UAAU,GAAG,UAAS,IAAI,EAAE;AACxC,UAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;AAC1C,QAAI,IAAI,KAAK,OAAO,EAAE;AAClB,YAAI,CAAC,MAAM,EAAE,CAAC;KACjB,MAAM;AACH,YAAI,CAAC,IAAI,EAAE,CAAC;KACf;CACJ,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE;AACtD,QAAI,CAAC,OAAO,CAAC,IAAI,CAAC;AACd,eAAO,EAAE,OAAO;AAChB,eAAO,EAAE,OAAO;AAChB,YAAI,EAAE,IAAI;KACb,CAAC,CAAC;CACN,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,QAAQ,GAAG,YAAW;;;AAGlC,QAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAS,CAAC,EAAE;AACvC,eAAO,CAAC,CAAC;KACZ,CAAC,CAAC,IAAI,CAAC,UAAS,CAAC,EAAE,CAAC,EAAE;AACf,eAAO,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;KAC1B,CAAC,CAAC;;AAEP,QAAI,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,UAAS,MAAM,EAAE;AACzC,eAAO,GAAG,CAAC,wBAAwB,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;KACrF,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;;AAEZ,QAAI,GAAG,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;AAClC,QAAI,SAAS,GAAI,GAAG,KAAK,CAAC,GACtB,mDAAmD,GACnD,GAAG,CAAC,4CAA4C,EAC5C,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,AAAC,CAAC;;AAEtE,WAAO,SAAS,GAAG,SAAS,GAAG,IAAI,CAAC;CACvC,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC","file":"stats-compiled.js","sourcesContent":["var fmt = require(\"simple-fmt\");\nvar is = require(\"simple-is\");\nvar assert = require(\"assert\");\n\nfunction Stats() {\n    this.lets = 0;\n    this.consts = 0;\n    this.renames = [];\n}\n\nStats.prototype.declarator = function(kind) {\n    assert(is.someof(kind, [\"const\", \"let\"]));\n    if (kind === \"const\") {\n        this.consts++;\n    } else {\n        this.lets++;\n    }\n};\n\nStats.prototype.rename = function(oldName, newName, line) {\n    this.renames.push({\n        oldName: oldName,\n        newName: newName,\n        line: line,\n    });\n};\n\nStats.prototype.toString = function() {\n//    console.log(\"defs.js stats for file {0}:\", filename)\n\n    var renames = this.renames.map(function(r) {\n        return r;\n    }).sort(function(a, b) {\n            return a.line - b.line;\n        }); // sort a copy of renames\n\n    var renameStr = renames.map(function(rename) {\n        return fmt(\"\\nline {0}: {1} => {2}\", rename.line, rename.oldName, rename.newName);\n    }).join(\"\");\n\n    var sum = this.consts + this.lets;\n    var constlets = (sum === 0 ?\n        \"can't calculate const coverage (0 consts, 0 lets)\" :\n        fmt(\"{0}% const coverage ({1} consts, {2} lets)\",\n            Math.floor(100 * this.consts / sum), this.consts, this.lets));\n\n    return constlets + renameStr + \"\\n\";\n};\n\nmodule.exports = Stats;\n"]}