{"version":3,"sources":["scope.js"],"names":[],"mappings":"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","file":"scope-compiled.js","sourcesContent":["\"use strict\";\n\nconst assert = require(\"assert\");\nconst stringmap = require(\"stringmap\");\nconst stringset = require(\"stringset\");\nconst is = require(\"simple-is\");\nconst fmt = require(\"simple-fmt\");\nconst error = require(\"./error\");\nconst getline = error.getline;\nconst options = require(\"./options\");\n\nfunction Scope(args) {\n    assert(is.someof(args.kind, [\"hoist\", \"block\", \"catch-block\"]));\n    assert(is.object(args.node));\n    assert(args.parent === null || is.object(args.parent));\n\n    // kind === \"hoist\": function scopes, program scope, injected globals\n    // kind === \"block\": ES6 block scopes\n    // kind === \"catch-block\": catch block scopes\n    this.kind = args.kind;\n\n    // the AST node the block corresponds to\n    this.node = args.node;\n\n    // parent scope\n    this.parent = args.parent;\n\n    // children scopes for easier traversal (populated internally)\n    this.children = [];\n\n    // scope declarations. decls[variable_name] = {\n    //     kind: \"fun\" for functions,\n    //           \"param\" for function parameters,\n    //           \"caught\" for catch parameter\n    //           \"var\",\n    //           \"const\",\n    //           \"let\"\n    //     node: the AST node the declaration corresponds to\n    //     from: source code index from which it is visible at earliest\n    //           (only stored for \"const\", \"let\" [and \"var\"] nodes)\n    // }\n    this.decls = stringmap();\n\n    // names of all declarations within this scope that was ever written\n    // TODO move to decls.w?\n    // TODO create corresponding read?\n    this.written = stringset();\n\n    // names of all variables declared outside this hoist scope but\n    // referenced in this scope (immediately or in child).\n    // only stored on hoist scopes for efficiency\n    // (because we currently generate lots of empty block scopes)\n    this.propagates = (this.kind === \"hoist\" ? stringset() : null);\n\n    // scopes register themselves with their parents for easier traversal\n    if (this.parent) {\n        this.parent.children.push(this);\n    }\n}\n\nScope.prototype.print = function(indent) {\n    indent = indent || 0;\n    const scope = this;\n    const names = this.decls.keys().map(function(name) {\n        return fmt(\"{0} [{1}]\", name, scope.decls.get(name).kind);\n    }).join(\", \");\n    const propagates = this.propagates ? this.propagates.items().join(\", \") : \"\";\n    console.log(fmt(\"{0}{1}: {2}. propagates: {3}\", fmt.repeat(\" \", indent), this.node.type, names, propagates));\n    this.children.forEach(function(c) {\n        c.print(indent + 2);\n    });\n};\n\nScope.prototype.add = function(name, kind, node, referableFromPos) {\n    assert(is.someof(kind, [\"fun\", \"param\", \"var\", \"caught\", \"const\", \"let\"]));\n\n    function isConstLet(kind) {\n        return is.someof(kind, [\"const\", \"let\"]);\n    }\n\n    let scope = this;\n\n    // search nearest hoist-scope for fun, param and var's\n    // const, let and caught variables go directly in the scope (which may be hoist, block or catch-block)\n    if (is.someof(kind, [\"fun\", \"param\", \"var\"])) {\n        while (scope.kind !== \"hoist\") {\n            if (scope.decls.has(name) && isConstLet(scope.decls.get(name).kind)) { // could be caught\n                return error(getline(node), \"{0} is already declared\", name);\n            }\n            scope = scope.parent;\n        }\n    }\n    // name exists in scope and either new or existing kind is const|let => error\n    if (scope.decls.has(name) && (options.disallowDuplicated || isConstLet(scope.decls.get(name).kind) || isConstLet(kind))) {\n        return error(getline(node), \"{0} is already declared\", name);\n    }\n\n    const declaration = {\n        kind: kind,\n        node: node,\n    };\n    if (referableFromPos) {\n        assert(is.someof(kind, [\"var\", \"const\", \"let\"]));\n        declaration.from = referableFromPos;\n    }\n    scope.decls.set(name, declaration);\n};\n\nScope.prototype.getKind = function(name) {\n    assert(is.string(name));\n    const decl = this.decls.get(name);\n    return decl ? decl.kind : null;\n};\n\nScope.prototype.getNode = function(name) {\n    assert(is.string(name));\n    const decl = this.decls.get(name);\n    return decl ? decl.node : null;\n};\n\nScope.prototype.getFromPos = function(name) {\n    assert(is.string(name));\n    const decl = this.decls.get(name);\n    return decl ? decl.from : null;\n};\n\nScope.prototype.hasOwn = function(name) {\n    return this.decls.has(name);\n};\n\nScope.prototype.remove = function(name) {\n    return this.decls.remove(name);\n};\n\nScope.prototype.doesPropagate = function(name) {\n    return this.propagates.has(name);\n};\n\nScope.prototype.markPropagates = function(name) {\n    this.propagates.add(name);\n};\n\nScope.prototype.closestHoistScope = function() {\n    let scope = this;\n    while (scope.kind !== \"hoist\") {\n        scope = scope.parent;\n    }\n    return scope;\n};\n\nScope.prototype.hasFunctionScopeBetween = function(outer) {\n    function isFunction(node) {\n        return is.someof(node.type, [\"FunctionDeclaration\", \"FunctionExpression\"]);\n    }\n\n    for (let scope = this; scope; scope = scope.parent) {\n        if (scope === outer) {\n            return false;\n        }\n        if (isFunction(scope.node)) {\n            return true;\n        }\n    }\n\n    throw new Error(\"wasn't inner scope of outer\");\n};\n\nScope.prototype.lookup = function(name) {\n    for (let scope = this; scope; scope = scope.parent) {\n        if (scope.decls.has(name)) {\n            return scope;\n        } else if (scope.kind === \"hoist\") {\n            scope.propagates.add(name);\n        }\n    }\n    return null;\n};\n\nScope.prototype.markWrite = function(name) {\n    assert(is.string(name));\n    this.written.add(name);\n};\n\n// detects let variables that are never modified (ignores top-level)\nScope.prototype.detectUnmodifiedLets = function() {\n    const outmost = this;\n\n    function detect(scope) {\n        if (scope !== outmost) {\n            scope.decls.keys().forEach(function(name) {\n                if (scope.getKind(name) === \"let\" && !scope.written.has(name)) {\n                    return error(getline(scope.getNode(name)), \"{0} is declared as let but never modified so could be const\", name);\n                }\n            });\n        }\n\n        scope.children.forEach(function(childScope) {\n            detect(childScope);\n        });\n    }\n    detect(this);\n};\n\nScope.prototype.traverse = function(options) {\n    options = options || {};\n    const pre = options.pre;\n    const post = options.post;\n\n    function visit(scope) {\n        if (pre) {\n            pre(scope);\n        }\n        scope.children.forEach(function(childScope) {\n            visit(childScope);\n        });\n        if (post) {\n            post(scope);\n        }\n    }\n\n    visit(this);\n};\n\nmodule.exports = Scope;\n"]}