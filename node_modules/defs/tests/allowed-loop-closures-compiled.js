"use strict";
var arr = [];

// can be transformed (common WAT)
for (var x = 0; x < 10; x++) {
    arr.push(function () {
        return x;
    });
}

// can be transformed (common manual work-around)
for (var _x = 0; _x < 3; _x++) {
    arr.push((function (x) {
        return function () {
            return x;
        };
    })(_x));
}

// can be transformed (no extra IIFE will be inserted)
for (var _x2 = 0; _x2 < 3; _x2++) {
    (function () {
        var y = 1;
        arr.push(function () {
            return y;
        });
    }).call(undefined);
}

// can be transformed (added IIFE)

var _loop = function (_x3) {
    var y = 1;
    arr.push(function () {
        return y;
    });
};

for (var _x3 = 0; _x3 < 3; _x3++) {
    _loop(_x3);
}

// can be transformed (added IIFE)

var _loop2 = function (_x4) {
    var y = _x4;
    arr.push(function () {
        return y;
    });
};

for (var _x4 = 0; _x4 < 3; _x4++) {
    _loop2(_x4);
}

// can be transformed (added IIFE)

var _loop3 = function (_x5) {
    var y = _x5,
        z = arr.push(function () {
        return y;
    });
};

for (var _x5 = 0; _x5 < 3; _x5++) {
    _loop3(_x5);
}

// can be transformed (added IIFE)

var _loop4 = function (_x6) {
    var x = 1;
    arr.push(function () {
        return x;
    });
};

for (var _x6 = 0; _x6 < 3; _x6++) {
    _loop4(_x6);
}

// can be transformed (added IIFE)
while (true) {
    var f = function f() {
        var _loop5 = function (_x7) {
            var y = _x7;
            arr.push(function () {
                return y;
            });
        };

        for (var _x7 = 0; _x7 < 10; _x7++) {
            _loop5(_x7);
        }
    };
    f();
}

// it's fine to use break, continue, return and arguments as long as
// it's contained within a function below the loop so that it doesn't
// interfere with the inserted IIFE
(function () {
    var _loop6 = function (_x8) {
        var y = _x8;
        (function () {
            for (;;) break;
            return;
        })();
        (function () {
            for (;;) continue;
            arguments;
        })();
        arr.push(function () {
            return y;
        });
    };

    for (var _x8 = 0; _x8 < 3; _x8++) {
        _loop6(_x8);
    }
})();

// For-In

var _loop7 = function (_x9) {
    arr.push(function () {
        return _x9;
    });
};

for (var _x9 in [0, 1, 2]) {
    _loop7(_x9);
}

// Block-less For-In

var _loop8 = function (_x10) {
    arr.push(function () {
        return _x10;
    });
};

for (var _x10 in [0, 1, 2]) {
    _loop8(_x10);
} /*with semicolon*/

var _loop9 = function (_x11) {
    arr.push(function () {
        return _x11;
    });
};

for (var _x11 in [0, 1, 2]) {
    _loop9(_x11);
} /*no semicolon*/

null; // previous semicolon-less for statement's range ends just before 'n' in 'null'

// For-Of
var _arr = [0, 1, 2];

var _loop10 = function () {
    var x = _arr[_i];
    arr.push(function () {
        return x;
    });
};

for (var _i = 0; _i < _arr.length; _i++) {
    _loop10();
}

// Block-less For-Of
var _arr2 = [0, 1, 2];

var _loop11 = function () {
    var x = _arr2[_i2];arr.push(function () {
        return x;
    });
};

for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
    _loop11();
} /*with semicolon*/
var _arr3 = [0, 1, 2];

var _loop12 = function () {
    var x = _arr3[_i3];arr.push(function () {
        return x;
    });
};

for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
    _loop12();
} /*no semicolon*/

null; // previous semicolon-less for statement's range ends just before 'n' in 'null'

// While

var _loop13 = function () {
    var x = 1;
    arr.push(function () {
        return x;
    });
};

while (true) {
    _loop13();
}

// Do-While

var _loop14 = function () {
    var x = 1;
    arr.push(function () {
        return x;
    });
};

do {
    _loop14();
} while (true);

arr.forEach(function (f) {
    console.log(f());
});

//# sourceMappingURL=allowed-loop-closures-compiled.js.map