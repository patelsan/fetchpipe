"use strict";
var arr = [];

// can be transformed (common WAT)
for (var x = 0; x < 10; x++) {
    arr.push(function () {
        return x;
    });
}

// can be transformed (common manual work-around)
for (var x$0 = 0; x$0 < 3; x$0++) {
    arr.push((function (x) {
        return function () {
            return x;
        };
    })(x$0));
}

// can be transformed (no extra IIFE will be inserted)
for (var x$1 = 0; x$1 < 3; x$1++) {
    (function () {
        var y = 1;
        arr.push(function () {
            return y;
        });
    }).call(undefined);
}

// can be transformed (added IIFE)
for (var x$2 = 0; x$2 < 3; x$2++) {
    (function () {
        var y = 1;
        arr.push(function () {
            return y;
        });
    }).call(undefined);
}

// can be transformed (added IIFE)
for (var x$3 = 0; x$3 < 3; x$3++) {
    (function () {
        var y = x$3;
        arr.push(function () {
            return y;
        });
    }).call(undefined);
}

// can be transformed (added IIFE)
for (var x$4 = 0; x$4 < 3; x$4++) {
    (function () {
        var y = x$4,
            z = arr.push(function () {
            return y;
        });
    }).call(undefined);
}

// can be transformed (added IIFE)
for (var x$5 = 0; x$5 < 3; x$5++) {
    (function () {
        var x = 1;
        arr.push(function () {
            return x;
        });
    }).call(undefined);
}

// can be transformed (added IIFE)
while (true) {
    var f = function f() {
        for (var x = 0; x < 10; x++) {
            (function () {
                var y = x;
                arr.push(function () {
                    return y;
                });
            }).call(this);
        }
    };
    f();
}

// it's fine to use break, continue, return and arguments as long as
// it's contained within a function below the loop so that it doesn't
// interfere with the inserted IIFE
(function () {
    for (var x = 0; x < 3; x++) {
        (function () {
            var y = x;
            (function () {
                for (;;) break;
                return;
            })();
            (function () {
                for (;;) continue;
                arguments;
            })();
            arr.push(function () {
                return y;
            });
        }).call(this);
    }
})();

// For-In
for (var x$6 in [0, 1, 2]) {
    (function (x) {
        arr.push(function () {
            return x;
        });
    }).call(undefined, x$6);
}

// Block-less For-In
for (var x$7 in [0, 1, 2]) (function (x) {
    arr.push(function () {
        return x;
    });
}).call(undefined, x$7); /*with semicolon*/
for (var x$8 in [0, 1, 2]) (function (x) {
    arr.push(function () {
        return x;
    });
}).call(undefined, x$8); /*no semicolon*/

null; // previous semicolon-less for statement's range ends just before 'n' in 'null'

// For-Of
var _arr = [0, 1, 2];
for (var _i = 0; _i < _arr.length; _i++) {
    var x$9 = _arr[_i];(function (x) {
        arr.push(function () {
            return x;
        });
    }).call(undefined, x$9);
}

// Block-less For-Of
var _arr2 = [0, 1, 2];
for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
    var x$10 = _arr2[_i2];(function (x) {
        arr.push(function () {
            return x;
        });
    }).call(undefined, x$10);
} /*with semicolon*/
var _arr3 = [0, 1, 2];
for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
    var x$11 = _arr3[_i3];(function (x) {
        arr.push(function () {
            return x;
        });
    }).call(undefined, x$11);
} /*no semicolon*/

null; // previous semicolon-less for statement's range ends just before 'n' in 'null'

// While
while (true) {
    (function () {
        var x = 1;
        arr.push(function () {
            return x;
        });
    }).call(undefined);
}

// Do-While
do {
    (function () {
        var x = 1;
        arr.push(function () {
            return x;
        });
    }).call(undefined);
} while (true);

arr.forEach(function (f) {
    console.log(f());
});

//# sourceMappingURL=allowed-loop-closures-out-compiled.js.map