{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["'use strict';\nvar repeating = require('repeating');\n\n// detect either spaces or tabs but not both to properly handle tabs\n// for indentation and spaces for alignment\nvar INDENT_RE = /^(?:( )+|\\t+)/;\n\nfunction getMostUsed(indents) {\n\tvar result = 0;\n\tvar maxUsed = 0;\n\tvar maxWeight = 0;\n\n\tfor (var n in indents) {\n\t\tvar indent = indents[n];\n\t\tvar u = indent[0];\n\t\tvar w = indent[1];\n\n\t\tif (u > maxUsed || u === maxUsed && w > maxWeight) {\n\t\t\tmaxUsed = u;\n\t\t\tmaxWeight = w;\n\t\t\tresult = +n;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nmodule.exports = function (str) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// used to see if tabs or spaces are the most used\n\tvar tabs = 0;\n\tvar spaces = 0;\n\n\t// remember the size of previous line's indentation\n\tvar prev = 0;\n\n\t// remember how many indents/unindents as occurred for a given size\n\t// and how much lines follow a given indentation\n\t//\n\t// indents = {\n\t//    3: [1, 0],\n\t//    4: [1, 5],\n\t//    5: [1, 0],\n\t//   12: [1, 0],\n\t// }\n\tvar indents = {};\n\n\t// pointer to the array of last used indent\n\tvar current;\n\n\t// whether the last action was an indent (opposed to an unindent)\n\tvar isIndent;\n\n\tstr.split(/\\n/g).forEach(function (line) {\n\t\tif (!line) {\n\t\t\t// ignore empty lines\n\t\t\treturn;\n\t\t}\n\n\t\tvar indent;\n\t\tvar matches = line.match(INDENT_RE);\n\n\t\tif (!matches) {\n\t\t\tindent = 0;\n\t\t} else {\n\t\t\tindent = matches[0].length;\n\n\t\t\tif (matches[1]) {\n\t\t\t\tspaces++;\n\t\t\t} else {\n\t\t\t\ttabs++;\n\t\t\t}\n\t\t}\n\n\t\tvar diff = indent - prev;\n\t\tprev = indent;\n\n\t\tif (diff) {\n\t\t\t// an indent or unindent has been detected\n\n\t\t\tisIndent = diff > 0;\n\n\t\t\tcurrent = indents[isIndent ? diff : -diff];\n\n\t\t\tif (current) {\n\t\t\t\tcurrent[0]++;\n\t\t\t} else {\n\t\t\t\tcurrent = indents[diff] = [1, 0];\n\t\t\t}\n\t\t} else if (current) {\n\t\t\t// if the last action was an indent, increment the weight\n\t\t\tcurrent[1] += +isIndent;\n\t\t}\n\t});\n\n\tvar amount = getMostUsed(indents);\n\n\tvar type;\n\tvar actual;\n\tif (!amount) {\n\t\ttype = null;\n\t\tactual = '';\n\t} else if (spaces >= tabs) {\n\t\ttype = 'space';\n\t\tactual = repeating(' ', amount);\n\t} else {\n\t\ttype = 'tab';\n\t\tactual = repeating('\\t', amount);\n\t}\n\n\treturn {\n\t\tamount: amount,\n\t\ttype: type,\n\t\tindent: actual\n\t};\n};\n"]}