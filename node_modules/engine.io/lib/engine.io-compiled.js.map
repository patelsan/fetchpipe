{"version":3,"sources":["engine.io.js"],"names":[],"mappings":";;;;;;AAIA,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;;;;;;;;;;;;;;AAe3B,OAAO,GAAG,MAAM,CAAC,OAAO,GAAG,YAAW;;;AAGpC,MAAI,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC,MAAM,EAAE;AAC3D,WAAO,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;GACtC;;;AAGD,SAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;CAC9C,CAAC;;;;;;;;AAQF,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;;;;;;;;AAQrB,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;;;;;;;AAQrC,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;;;;;;;AAQrC,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;;;;;;;;AAQ3C,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;;;;;;;;AAQ7C,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;;;;;;;;;;;;AAY7C,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;;AAExB,SAAS,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE;AACjC,MAAI,UAAU,IAAI,OAAO,OAAO,EAAE;AAChC,MAAE,GAAG,OAAO,CAAC;AACb,WAAO,GAAG,EAAE,CAAC;GACd;;AAED,MAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,GAAG,EAAE,GAAG,EAAE;AACjD,OAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AACnB,OAAG,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;GAC5B,CAAC,CAAC;;AAEH,QAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;;;AAGxB,MAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAC7C,QAAM,CAAC,UAAU,GAAG,MAAM,CAAC;;AAE3B,SAAO,MAAM,CAAC;CACf,CAAC;;;;;;;;;;;AAWF,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;;AAExB,SAAS,MAAM,CAAC,MAAM,EAAE,OAAO,EAAE;AAC/B,MAAI,MAAM,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACzC,QAAM,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAC/B,SAAO,MAAM,CAAC;CACf,CAAC","file":"engine.io-compiled.js","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar http = require('http');\n\n/**\n * Invoking the library as a function delegates to attach if the first argument\n * is an `http.Server`.\n *\n * If there are no arguments or the first argument is an options object, then\n * a new Server instance is returned.\n *\n * @param {http.Server} server (if specified, will be attached to by the new Server instance)\n * @param {Object} options\n * @return {Server} engine server\n * @api public\n */\n\nexports = module.exports = function() {\n  // backwards compatible use as `.attach`\n  // if first argument is an http server\n  if (arguments.length && arguments[0] instanceof http.Server) {\n    return attach.apply(this, arguments);\n  }\n\n  // if first argument is not an http server, then just make a regular eio server\n  return exports.Server.apply(null, arguments);\n};\n\n/**\n * Protocol revision number.\n *\n * @api public\n */\n\nexports.protocol = 1;\n\n/**\n * Expose Server constructor.\n *\n * @api public\n */\n\nexports.Server = require('./server');\n\n/**\n * Expose Server constructor.\n *\n * @api public\n */\n\nexports.Socket = require('./socket');\n\n/**\n * Expose Transport constructor.\n *\n * @api public\n */\n\nexports.Transport = require('./transport');\n\n/**\n * Expose mutable list of available transports.\n *\n * @api public\n */\n\nexports.transports = require('./transports');\n\n/**\n * Exports parser.\n *\n * @api public\n */\n\nexports.parser = require('engine.io-parser');\n\n/**\n * Creates an http.Server exclusively used for WS upgrades.\n *\n * @param {Number} port\n * @param {Function} callback\n * @param {Object} options\n * @return {Server} websocket.io server\n * @api public\n */\n\nexports.listen = listen;\n\nfunction listen(port, options, fn) {\n  if ('function' == typeof options) {\n    fn = options;\n    options = {};\n  }\n\n  var server = http.createServer(function (req, res) {\n    res.writeHead(501);\n    res.end('Not Implemented');\n  });\n\n  server.listen(port, fn);\n\n  // create engine server\n  var engine = exports.attach(server, options);\n  engine.httpServer = server;\n\n  return engine;\n};\n\n/**\n * Captures upgrade requests for a http.Server.\n *\n * @param {http.Server} server\n * @param {Object} options\n * @return {Server} engine server\n * @api public\n */\n\nexports.attach = attach;\n\nfunction attach(server, options) {\n  var engine = new exports.Server(options);\n  engine.attach(server, options);\n  return engine;\n};\n"]}