{"version":3,"sources":["decode.js"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACnC,IAAI,QAAQ,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;;AAE1C,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;;AAExB,SAAS,MAAM,CAAE,GAAG,EAAE;AAClB,QAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AACzB,cAAM,IAAI,SAAS,CAAC,mBAAmB,CAAC,CAAC;KAC5C;;AAED,WAAO,GAAG,CAAC,OAAO,CAAC,iBAAiB,EAAE,UAAU,CAAC,EAAE,KAAK,EAAE;AACtD,YAAI,CAAC,CAAC;AACN,YAAI,CAAC,GAAG,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AAC9B,mBAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAE,CAAC,CAAC;SACvD,MAAM,IAAI,CAAC,GAAG,wBAAwB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AACjD,mBAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAE,CAAC,CAAC;SACvD,MAAM;;AAEH,gBAAI,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC/B,gBAAI,WAAW,GAAG,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;AAC5D,gBAAI,MAAM,GAAG,QAAQ,CAAC,WAAW,CAAC,IAAK,OAAO,IAAI,QAAQ,CAAC,KAAK,CAAC,AAAC,CAAC;;AAEnE,gBAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;AAC5B,uBAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAE,MAAM,CAAE,CAAC,CAAC;aAC3C,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;AACnC,uBAAO,MAAM,CAAC;aACjB,MAAM;AACH,uBAAO,GAAG,GAAG,KAAK,CAAC;aACtB;SACJ;KACJ,CAAC,CAAC;CACN","file":"decode-compiled.js","sourcesContent":["var punycode = require('punycode');\nvar entities = require('./entities.json');\n\nmodule.exports = decode;\n\nfunction decode (str) {\n    if (typeof str !== 'string') {\n        throw new TypeError('Expected a String');\n    }\n\n    return str.replace(/&(#?[^;\\W]+;?)/g, function (_, match) {\n        var m;\n        if (m = /^#(\\d+);?$/.exec(match)) {\n            return punycode.ucs2.encode([ parseInt(m[1], 10) ]);\n        } else if (m = /^#[Xx]([A-Fa-f0-9]+);?/.exec(match)) {\n            return punycode.ucs2.encode([ parseInt(m[1], 16) ]);\n        } else {\n            // named entity\n            var hasSemi = /;$/.test(match);\n            var withoutSemi = hasSemi ? match.replace(/;$/, '') : match;\n            var target = entities[withoutSemi] || (hasSemi && entities[match]);\n\n            if (typeof target === 'number') {\n                return punycode.ucs2.encode([ target ]);\n            } else if (typeof target === 'string') {\n                return target;\n            } else {\n                return '&' + match;\n            }\n        }\n    });\n}\n"]}