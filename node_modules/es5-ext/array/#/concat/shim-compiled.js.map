{"version":3,"sources":["shim.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,YAAY,GAAG,OAAO,CAAC,sBAAsB,CAAC;IAC9C,QAAQ,GAAO,OAAO,CAAC,gCAAgC,CAAC;IACxD,QAAQ,GAAO,OAAO,CAAC,2BAA2B,CAAC;IAEnD,OAAO,GAAG,KAAK,CAAC,OAAO;IAAE,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM;IACxD,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC,OAAO;IAEjC,YAAY,CAAC;;AAEjB,YAAY,GAAG,UAAU,KAAK,EAAE;AAC/B,KAAI,CAAC,KAAK,EAAE,OAAO,KAAK,CAAC;AACzB,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,OAAO,KAAK,CAAC;AACnC,KAAI,KAAK,CAAC,sBAAsB,CAAC,KAAK,SAAS,EAAE;AAChD,SAAO,OAAO,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC;EAC9C;AACD,QAAO,OAAO,CAAC,KAAK,CAAC,CAAC;CACtB,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,UAAU,IAAI,eAAc;AAC5C,KAAI,MAAM,CAAC;AACX,KAAI,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,EAAE;AAClD,SAAO,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;EACrC;AACD,OAAM,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC3C,QAAO,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,GAAG,EAAE,CAAC,EAAE;AAAE,QAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EAAE,CAAC,CAAC;AAC3D,QAAO,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,GAAG,EAAE;AACtC,MAAI,IAAI,CAAC;AACT,MAAI,YAAY,CAAC,GAAG,CAAC,EAAE;AACtB,OAAI,GAAG,MAAM,CAAC,MAAM,CAAC;AACrB,SAAM,CAAC,MAAM,IAAI,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACtC,UAAO,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,GAAG,EAAE,CAAC,EAAE;AAAE,UAAM,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;IAAE,CAAC,CAAC;AACjE,UAAO;GACP;AACD,QAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;EACjB,CAAC,CAAC;AACH,QAAO,MAAM,CAAC;CACd,CAAC","file":"shim-compiled.js","sourcesContent":["'use strict';\n\nvar isPlainArray = require('../../is-plain-array')\n  , toPosInt     = require('../../../number/to-pos-integer')\n  , isObject     = require('../../../object/is-object')\n\n  , isArray = Array.isArray, concat = Array.prototype.concat\n  , forEach = Array.prototype.forEach\n\n  , isSpreadable;\n\nisSpreadable = function (value) {\n\tif (!value) return false;\n\tif (!isObject(value)) return false;\n\tif (value['@@isConcatSpreadable'] !== undefined) {\n\t\treturn Boolean(value['@@isConcatSpreadable']);\n\t}\n\treturn isArray(value);\n};\n\nmodule.exports = function (item/*, â€¦items*/) {\n\tvar result;\n\tif (!this || !isArray(this) || isPlainArray(this)) {\n\t\treturn concat.apply(this, arguments);\n\t}\n\tresult = new this.constructor(this.length);\n\tforEach.call(this, function (val, i) { result[i] = val; });\n\tforEach.call(arguments, function (arg) {\n\t\tvar base;\n\t\tif (isSpreadable(arg)) {\n\t\t\tbase = result.length;\n\t\t\tresult.length += toPosInt(arg.length);\n\t\t\tforEach.call(arg, function (val, i) { result[base + i] = val; });\n\t\t\treturn;\n\t\t}\n\t\tresult.push(arg);\n\t});\n\treturn result;\n};\n"]}