{"version":3,"sources":["_unpack-ieee754.js"],"names":[],"mappings":";;AAEA,YAAY,CAAC;;AAEb,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;;AAEnB,MAAM,CAAC,OAAO,GAAG,UAAU,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;;AAE/C,KAAI,IAAI,GAAG,EAAE;KAAE,CAAC;KAAE,CAAC;KAAE,CAAC;KAAE,GAAG;KAC3B,IAAI;KAAE,CAAC;KAAE,CAAC;KAAE,CAAC,CAAC;;AAEd,MAAK,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;AACjC,GAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACjB,OAAK,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;AACtB,OAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AACzB,IAAC,GAAG,CAAC,IAAI,CAAC,CAAC;GACX;EACD;AACD,KAAI,CAAC,OAAO,EAAE,CAAC;AACf,IAAG,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;;;AAGpB,KAAI,GAAG,CAAC,CAAC,IAAK,KAAK,GAAG,CAAC,CAAC,GAAI,CAAC,CAAC;AAC9B,EAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AAC9C,EAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;AAC7C,EAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;;;AAG1C,KAAI,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,CAAA,GAAI,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,QAAQ,CAAC;AAChE,KAAI,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA,AAAC,CAAC;AACjE,KAAI,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI,GAAG,CAAC,CAAA,AAAC,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA,AAAC,CAAC;AAClE,QAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;CACtB,CAAC","file":"_unpack-ieee754-compiled.js","sourcesContent":["// Credit: https://github.com/paulmillr/es6-shim/\n\n'use strict';\n\nvar pow = Math.pow;\n\nmodule.exports = function (bytes, ebits, fbits) {\n\t// Bytes to bits\n\tvar bits = [], i, j, b, str,\n\tbias, s, e, f;\n\n\tfor (i = bytes.length; i; i -= 1) {\n\t\tb = bytes[i - 1];\n\t\tfor (j = 8; j; j -= 1) {\n\t\t\tbits.push(b % 2 ? 1 : 0);\n\t\t\tb = b >> 1;\n\t\t}\n\t}\n\tbits.reverse();\n\tstr = bits.join('');\n\n\t// Unpack sign, exponent, fraction\n\tbias = (1 << (ebits - 1)) - 1;\n\ts = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n\te = parseInt(str.substring(1, 1 + ebits), 2);\n\tf = parseInt(str.substring(1 + ebits), 2);\n\n\t// Produce number\n\tif (e === (1 << ebits) - 1) return f !== 0 ? NaN : s * Infinity;\n\tif (e > 0) return s * pow(2, e - bias) * (1 + f / pow(2, fbits));\n\tif (f !== 0) return s * pow(2, -(bias - 1)) * (f / pow(2, fbits));\n\treturn s < 0 ? -0 : 0;\n};\n"]}