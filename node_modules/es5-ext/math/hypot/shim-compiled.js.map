{"version":3,"sources":["shim.js"],"names":[],"mappings":";;AAEA,YAAY,CAAC;;AAEb,IAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI;IAAE,GAAG,GAAG,IAAI,CAAC,GAAG;IAAE,IAAI,GAAG,IAAI,CAAC,IAAI;IAE7D,OAAO,GAAG,SAAV,OAAO,CAAa,CAAC,EAAE,CAAC,EAAE;AAAE,QAAO,CAAC,GAAG,CAAC,CAAC;CAAE;IAC3C,MAAM,GAAG,SAAT,MAAM,CAAa,CAAC,EAAE;AAAE,QAAO,CAAC,GAAG,IAAI,CAAC;CAAE;IAC1C,GAAG,GAAG,SAAN,GAAG,CAAa,GAAG,EAAE,MAAM,EAAE;AAAE,QAAO,GAAG,GAAG,MAAM,GAAG,MAAM,CAAC;CAAE,CAAC;;AAEnE,MAAM,CAAC,OAAO,GAAG,UAAU,IAAI,EAAE,IAAI,cAAa;AACjD,KAAI,MAAM,EAAE,OAAO,CAAC;AACpB,KAAI,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAChC,KAAI,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,GAAG,EAAE;AACnC,MAAI,KAAK,CAAC,GAAG,CAAC,EAAE;AACf,SAAM,GAAG,GAAG,CAAC;AACb,UAAO;GACP;AACD,MAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;AACnB,SAAM,GAAG,QAAQ,CAAC;AAClB,UAAO,IAAI,CAAC;GACZ;AACD,MAAI,MAAM,KAAK,SAAS,EAAE,OAAO;AACjC,KAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AAClB,MAAI,GAAG,KAAK,CAAC,EAAE,OAAO;AACtB,MAAI,CAAC,OAAO,EAAE,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,KAC9B,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EAC5B,CAAC,CAAC;AACH,KAAI,MAAM,KAAK,SAAS,EAAE,OAAO,MAAM,CAAC;AACxC,KAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;;AAEvB,QAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACtB,QAAO,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;CACzE,CAAC","file":"shim-compiled.js","sourcesContent":["// Thanks for hints: https://github.com/paulmillr/es6-shim\n\n'use strict';\n\nvar some = Array.prototype.some, abs = Math.abs, sqrt = Math.sqrt\n\n  , compare = function (a, b) { return b - a; }\n  , divide = function (x) { return x / this; }\n  , add = function (sum, number) { return sum + number * number; };\n\nmodule.exports = function (val1, val2/*, â€¦valn*/) {\n\tvar result, numbers;\n\tif (!arguments.length) return 0;\n\tsome.call(arguments, function (val) {\n\t\tif (isNaN(val)) {\n\t\t\tresult = NaN;\n\t\t\treturn;\n\t\t}\n\t\tif (!isFinite(val)) {\n\t\t\tresult = Infinity;\n\t\t\treturn true;\n\t\t}\n\t\tif (result !== undefined) return;\n\t\tval = Number(val);\n\t\tif (val === 0) return;\n\t\tif (!numbers) numbers = [abs(val)];\n\t\telse numbers.push(abs(val));\n\t});\n\tif (result !== undefined) return result;\n\tif (!numbers) return 0;\n\n\tnumbers.sort(compare);\n\treturn numbers[0] * sqrt(numbers.map(divide, numbers[0]).reduce(add, 0));\n};\n"]}