{"version":3,"sources":["compare.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,UAAU,GAAG,OAAO,CAAC,sCAAsC,CAAC;IAC5D,QAAQ,GAAK,OAAO,CAAC,aAAa,CAAC;IAEnC,OAAO;IAAE,OAAO,CAAC;;AAErB,OAAO,GAAG;AACT,UAAS,EAAE,CAAC;AACZ,OAAM,EAAE,CAAC;AACT,QAAO,EAAE,CAAC;AACV,OAAM,EAAE,CAAC;AACT,OAAM,EAAE,CAAC;CACT,CAAC;;AAEF,OAAO,GAAG,UAAU,CAAC,EAAE;AACtB,KAAI,QAAQ,CAAC,CAAC,CAAC,EAAE;AAChB,MAAI,OAAO,CAAC,CAAC,OAAO,KAAK,UAAU,EAAE,OAAO,GAAG,CAAC;AAChD,GAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC;AAChB,MAAI,QAAQ,CAAC,CAAC,CAAC,EAAE;AAChB,OAAI,OAAO,CAAC,CAAC,QAAQ,KAAK,UAAU,EAAE,OAAO,GAAG,CAAC;AACjD,IAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;AACjB,OAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,OAAO,GAAG,CAAC;GACtC;EACD;AACD,QAAO,CAAC,CAAC;CACT,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC,EAAE,CAAC,EAAE;AAChC,KAAI,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;;AAEtB,EAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;AACf,EAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;AACf,KAAI,CAAC,IAAI,CAAC,EAAE,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;AACzD,KAAI,CAAC,IAAI,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;AACzB,KAAI,CAAC,IAAI,IAAI,EAAE,OAAO,CAAC,CAAC;AACxB,KAAI,AAAC,OAAO,CAAC,KAAK,QAAQ,IAAM,OAAO,CAAC,KAAK,QAAQ,AAAC,EAAE;AACvD,SAAO,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC7B;AACD,KAAI,AAAC,CAAC,KAAK,CAAC,IAAM,CAAC,KAAK,CAAC,AAAC,EAAE,OAAO,CAAC,CAAC;AACrC,QAAO,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;CAC7B,CAAC","file":"compare-compiled.js","sourcesContent":["'use strict';\n\nvar strCompare = require('../string/#/case-insensitive-compare')\n  , isObject   = require('./is-object')\n\n  , resolve, typeMap;\n\ntypeMap = {\n\tundefined: 0,\n\tobject: 1,\n\tboolean: 2,\n\tstring: 3,\n\tnumber: 4\n};\n\nresolve = function (a) {\n\tif (isObject(a)) {\n\t\tif (typeof a.valueOf !== 'function') return NaN;\n\t\ta = a.valueOf();\n\t\tif (isObject(a)) {\n\t\t\tif (typeof a.toString !== 'function') return NaN;\n\t\t\ta = a.toString();\n\t\t\tif (typeof a !== 'string') return NaN;\n\t\t}\n\t}\n\treturn a;\n};\n\nmodule.exports = function (a, b) {\n\tif (a === b) return 0; // Same\n\n\ta = resolve(a);\n\tb = resolve(b);\n\tif (a == b) return typeMap[typeof a] - typeMap[typeof b]; //jslint: ignore\n\tif (a == null) return -1;\n\tif (b == null) return 1;\n\tif ((typeof a === 'string') || (typeof b === 'string')) {\n\t\treturn strCompare.call(a, b);\n\t}\n\tif ((a !== a) && (b !== b)) return 0; //jslint: ignore\n\treturn Number(a) - Number(b);\n};\n"]}