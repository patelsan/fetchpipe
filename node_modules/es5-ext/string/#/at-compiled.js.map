{"version":3,"sources":["at.js"],"names":[],"mappings":";;;AAGA,YAAY,CAAC;;AAEb,IAAI,SAAS,GAAI,OAAO,CAAC,yBAAyB,CAAC;IAC/C,UAAU,GAAG,OAAO,CAAC,0BAA0B,CAAC,CAAC;;AAErD,MAAM,CAAC,OAAO,GAAG,UAAU,GAAG,EAAE;AAC/B,KAAI,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;KAAE,IAAI,GAAG,GAAG,CAAC,MAAM;KACjD,OAAO;KAAE,QAAQ;KAAE,OAAO;KAAE,GAAG,CAAC;AACpC,IAAG,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;;;;;AAKrB,KAAI,GAAG,IAAI,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,OAAO,EAAE,CAAC;;;AAGxC,IAAG,GAAG,GAAG,GAAG,CAAC,CAAC;;AAEd,QAAO,GAAG,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;AAC9B,QAAO,GAAG,GAAG,GAAG,CAAC,CAAC;AAClB,IAAG,GAAG,CAAC,CAAC;AACR;AACC,AAAC,QAAO,IAAI,MAAM,IAAM,OAAO,IAAI,MAAM,AAAC;AACxC,KAAI,GAAG,OAAO,AAAC;GAChB;AACD,WAAQ,GAAG,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AACnC,OAAI,QAAQ,IAAI,MAAM,IAAI,QAAQ,IAAI,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;GACtD;AACD,QAAO,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC;CACjC,CAAC","file":"at-compiled.js","sourcesContent":["// Based on: https://github.com/mathiasbynens/String.prototype.at\n// Thanks @mathiasbynens !\n\n'use strict';\n\nvar toInteger  = require('../../number/to-integer')\n  , validValue = require('../../object/valid-value');\n\nmodule.exports = function (pos) {\n\tvar str = String(validValue(this)), size = str.length\n\t  , cuFirst, cuSecond, nextPos, len;\n\tpos = toInteger(pos);\n\n\t// Account for out-of-bounds indices\n\t// The odd lower bound is because the ToInteger operation is\n\t// going to round `n` to `0` for `-1 < n <= 0`.\n\tif (pos <= -1 || pos >= size) return '';\n\n\t// Second half of `ToInteger`\n\tpos = pos | 0;\n\t// Get the first code unit and code unit value\n\tcuFirst = str.charCodeAt(pos);\n\tnextPos = pos + 1;\n\tlen = 1;\n\tif ( // check if itâ€™s the start of a surrogate pair\n\t\t(cuFirst >= 0xD800) && (cuFirst <= 0xDBFF) && // high surrogate\n\t\t\t(size > nextPos) // there is a next code unit\n\t) {\n\t\tcuSecond = str.charCodeAt(nextPos);\n\t\tif (cuSecond >= 0xDC00 && cuSecond <= 0xDFFF) len = 2; // low surrogate\n\t}\n\treturn str.slice(pos, pos + len);\n};\n"]}