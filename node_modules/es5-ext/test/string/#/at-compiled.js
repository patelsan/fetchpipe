// See tests at https://github.com/mathiasbynens/String.prototype.at

'use strict';

module.exports = function (t, a) {
	a(t.length, 1, "Length");

	a.h1("BMP");
	a(t.call("abc𝌆def", -Infinity), '', "-Infinity");
	a(t.call("abc𝌆def", -1), '', "-1");
	a(t.call("abc𝌆def", -0), 'a', "-0");
	a(t.call("abc𝌆def", +0), 'a', "+0");
	a(t.call("abc𝌆def", 1), 'b', "1");
	a(t.call("abc𝌆def", 3), "𝌆", "3");
	a(t.call("abc𝌆def", 4), "�", "4");
	a(t.call("abc𝌆def", 5), 'd', "5");
	a(t.call("abc𝌆def", 42), '', "42");
	a(t.call("abc𝌆def", +Infinity), '', "+Infinity");
	a(t.call("abc𝌆def", null), 'a', "null");
	a(t.call("abc𝌆def", undefined), 'a', "undefined");
	a(t.call("abc𝌆def"), 'a', "No argument");
	a(t.call("abc𝌆def", false), 'a', "false");
	a(t.call("abc𝌆def", NaN), 'a', "NaN");
	a(t.call("abc𝌆def", ''), 'a', "Empty string");
	a(t.call("abc𝌆def", '_'), 'a', "_");
	a(t.call("abc𝌆def", '1'), 'b', "'1'");
	a(t.call("abc𝌆def", []), 'a', "[]");
	a(t.call("abc𝌆def", {}), 'a', "{}");
	a(t.call("abc𝌆def", -0.9), 'a', "-0.9");
	a(t.call("abc𝌆def", 1.9), 'b', "1.9");
	a(t.call("abc𝌆def", 7.9), 'f', "7.9");
	a(t.call("abc𝌆def", Math.pow(2, 32)), '', "Big number");

	a.h1("Astral symbol");
	a(t.call("𝌆def", -Infinity), '', "-Infinity");
	a(t.call("𝌆def", -1), '', "-1");
	a(t.call("𝌆def", -0), "𝌆", "-0");
	a(t.call("𝌆def", +0), "𝌆", "+0");
	a(t.call("𝌆def", 1), "�", "1");
	a(t.call("𝌆def", 2), 'd', "2");
	a(t.call("𝌆def", 3), 'e', "3");
	a(t.call("𝌆def", 4), 'f', "4");
	a(t.call("𝌆def", 42), '', "42");
	a(t.call("𝌆def", +Infinity), '', "+Infinity");
	a(t.call("𝌆def", null), "𝌆", "null");
	a(t.call("𝌆def", undefined), "𝌆", "undefined");
	a(t.call("𝌆def"), "𝌆", "No arguments");
	a(t.call("𝌆def", false), "𝌆", "false");
	a(t.call("𝌆def", NaN), "𝌆", "NaN");
	a(t.call("𝌆def", ''), "𝌆", "Empty string");
	a(t.call("𝌆def", '_'), "𝌆", "_");
	a(t.call("𝌆def", '1'), "�", "'1'");

	a.h1("Lone high surrogates");
	a(t.call("�abc", -Infinity), '', "-Infinity");
	a(t.call("�abc", -1), '', "-1");
	a(t.call("�abc", -0), "�", "-0");
	a(t.call("�abc", +0), "�", "+0");
	a(t.call("�abc", 1), 'a', "1");
	a(t.call("�abc", 42), '', "42");
	a(t.call("�abc", +Infinity), '', "Infinity");
	a(t.call("�abc", null), "�", "null");
	a(t.call("�abc", undefined), "�", "undefined");
	a(t.call("�abc"), "�", "No arguments");
	a(t.call("�abc", false), "�", "false");
	a(t.call("�abc", NaN), "�", "NaN");
	a(t.call("�abc", ''), "�", "Empty string");
	a(t.call("�abc", '_'), "�", "_");
	a(t.call("�abc", '1'), 'a', "'a'");

	a.h1("Lone low surrogates");
	a(t.call("�abc", -Infinity), '', "-Infinity");
	a(t.call("�abc", -1), '', "-1");
	a(t.call("�abc", -0), "�", "-0");
	a(t.call("�abc", +0), "�", "+0");
	a(t.call("�abc", 1), 'a', "1");
	a(t.call("�abc", 42), '', "42");
	a(t.call("�abc", +Infinity), '', "+Infinity");
	a(t.call("�abc", null), "�", "null");
	a(t.call("�abc", undefined), "�", "undefined");
	a(t.call("�abc"), "�", "No arguments");
	a(t.call("�abc", false), "�", "false");
	a(t.call("�abc", NaN), "�", "NaN");
	a(t.call("�abc", ''), "�", "Empty string");
	a(t.call("�abc", '_'), "�", "_");
	a(t.call("�abc", '1'), 'a', "'1'");

	a.h1("Context");
	a.throws(function () {
		t.call(undefined);
	}, TypeError, "Undefined");
	a.throws(function () {
		t.call(undefined, 4);
	}, TypeError, "Undefined + argument");
	a.throws(function () {
		t.call(null);
	}, TypeError, "Null");
	a.throws(function () {
		t.call(null, 4);
	}, TypeError, "Null + argument");
	a(t.call(42, 0), '4', "Number #1");
	a(t.call(42, 1), '2', "Number #2");
	a(t.call({ toString: function toString() {
			return 'abc';
		} }, 2), 'c', "Object");
};

//# sourceMappingURL=at-compiled.js.map