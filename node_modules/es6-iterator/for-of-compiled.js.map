{"version":3,"sources":["for-of.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,WAAW,GAAG,OAAO,CAAC,+BAA+B,CAAC;IACtD,QAAQ,GAAM,OAAO,CAAC,+BAA+B,CAAC;IACtD,QAAQ,GAAM,OAAO,CAAC,0BAA0B,CAAC;IACjD,GAAG,GAAW,OAAO,CAAC,OAAO,CAAC;IAE9B,OAAO,GAAG,KAAK,CAAC,OAAO;IAAE,IAAI,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI;IACvD,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC;;AAEhC,MAAM,CAAC,OAAO,GAAG,UAAU,QAAQ,EAAE,EAAE,gBAAe;AACrD,KAAI,IAAI;KAAE,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC;KAAE,MAAM;KAAE,OAAO;KAAE,MAAM;KAAE,CAAC;KAAE,CAAC;KAAE,IAAI;KAAE,IAAI,CAAC;AAC5E,KAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,WAAW,CAAC,QAAQ,CAAC,EAAE,IAAI,GAAG,OAAO,CAAC,KAC1D,IAAI,QAAQ,CAAC,QAAQ,CAAC,EAAE,IAAI,GAAG,QAAQ,CAAC,KACxC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAC;;AAE9B,SAAQ,CAAC,EAAE,CAAC,CAAC;AACb,QAAO,GAAG,YAAY;AAAE,QAAM,GAAG,IAAI,CAAC;EAAE,CAAC;AACzC,KAAI,IAAI,KAAK,OAAO,EAAE;AACrB,MAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,KAAK,EAAE;AACpC,OAAI,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;AACvC,OAAI,MAAM,EAAE,OAAO,IAAI,CAAC;GACxB,CAAC,CAAC;AACH,SAAO;EACP;AACD,KAAI,IAAI,KAAK,QAAQ,EAAE;AACtB,GAAC,GAAG,QAAQ,CAAC,MAAM,CAAC;AACpB,OAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;AACvB,OAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AACnB,OAAI,AAAC,CAAC,GAAG,CAAC,GAAI,CAAC,EAAE;AAChB,QAAI,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAC1B,QAAI,AAAC,IAAI,IAAI,MAAM,IAAM,IAAI,IAAI,MAAM,AAAC,EAAE,IAAI,IAAI,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAChE;AACD,OAAI,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AACtC,OAAI,MAAM,EAAE,MAAM;GAClB;AACD,SAAO;EACP;AACD,OAAM,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;;AAEzB,QAAO,CAAC,MAAM,CAAC,IAAI,EAAE;AACpB,MAAI,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AAC9C,MAAI,MAAM,EAAE,OAAO;AACnB,QAAM,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;EACzB;CACD,CAAC","file":"for-of-compiled.js","sourcesContent":["'use strict';\n\nvar isArguments = require('es5-ext/function/is-arguments')\n  , callable    = require('es5-ext/object/valid-callable')\n  , isString    = require('es5-ext/string/is-string')\n  , get         = require('./get')\n\n  , isArray = Array.isArray, call = Function.prototype.call\n  , some = Array.prototype.some;\n\nmodule.exports = function (iterable, cb/*, thisArg*/) {\n\tvar mode, thisArg = arguments[2], result, doBreak, broken, i, l, char, code;\n\tif (isArray(iterable) || isArguments(iterable)) mode = 'array';\n\telse if (isString(iterable)) mode = 'string';\n\telse iterable = get(iterable);\n\n\tcallable(cb);\n\tdoBreak = function () { broken = true; };\n\tif (mode === 'array') {\n\t\tsome.call(iterable, function (value) {\n\t\t\tcall.call(cb, thisArg, value, doBreak);\n\t\t\tif (broken) return true;\n\t\t});\n\t\treturn;\n\t}\n\tif (mode === 'string') {\n\t\tl = iterable.length;\n\t\tfor (i = 0; i < l; ++i) {\n\t\t\tchar = iterable[i];\n\t\t\tif ((i + 1) < l) {\n\t\t\t\tcode = char.charCodeAt(0);\n\t\t\t\tif ((code >= 0xD800) && (code <= 0xDBFF)) char += iterable[++i];\n\t\t\t}\n\t\t\tcall.call(cb, thisArg, char, doBreak);\n\t\t\tif (broken) break;\n\t\t}\n\t\treturn;\n\t}\n\tresult = iterable.next();\n\n\twhile (!result.done) {\n\t\tcall.call(cb, thisArg, result.value, doBreak);\n\t\tif (broken) return;\n\t\tresult = iterable.next();\n\t}\n};\n"]}