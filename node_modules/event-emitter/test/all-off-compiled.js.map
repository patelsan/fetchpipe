{"version":3,"sources":["all-off.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;;AAExB,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC,EAAE,CAAC,EAAE;AAChC,KAAI,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC;;AAErB,EAAC,GAAG,EAAE,EAAE,CAAC;AACT,MAAK,GAAG,CAAC,CAAC;AACV,OAAM,GAAG,CAAC,CAAC;AACX,EAAC,CAAC,EAAE,CAAC,KAAK,EAAE,YAAY;AACvB,IAAE,KAAK,CAAC;EACR,CAAC,CAAC;AACH,EAAC,CAAC,EAAE,CAAC,KAAK,EAAE,YAAY;AACvB,IAAE,KAAK,CAAC;EACR,CAAC,CAAC;AACH,EAAC,CAAC,EAAE,CAAC,KAAK,EAAE,YAAY;AACvB,IAAE,MAAM,CAAC;EACT,CAAC,CAAC;AACH,EAAC,CAAC,EAAE,CAAC,KAAK,EAAE,YAAY;AACvB,IAAE,MAAM,CAAC;EACT,CAAC,CAAC;AACH,EAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;AACZ,EAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACd,EAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACd,EAAC,CAAC,KAAK,EAAE,CAAC,EAAE,eAAe,CAAC,CAAC;AAC7B,EAAC,CAAC,MAAM,EAAE,CAAC,EAAE,qBAAqB,CAAC,CAAC;;AAEpC,MAAK,GAAG,CAAC,CAAC;AACV,OAAM,GAAG,CAAC,CAAC;AACX,EAAC,CAAC,EAAE,CAAC,KAAK,EAAE,YAAY;AACvB,IAAE,KAAK,CAAC;EACR,CAAC,CAAC;AACH,EAAC,CAAC,EAAE,CAAC,KAAK,EAAE,YAAY;AACvB,IAAE,KAAK,CAAC;EACR,CAAC,CAAC;AACH,EAAC,CAAC,EAAE,CAAC,KAAK,EAAE,YAAY;AACvB,IAAE,MAAM,CAAC;EACT,CAAC,CAAC;AACH,EAAC,CAAC,EAAE,CAAC,KAAK,EAAE,YAAY;AACvB,IAAE,MAAM,CAAC;EACT,CAAC,CAAC;AACH,EAAC,CAAC,CAAC,CAAC,CAAC;AACL,EAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACd,EAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACd,EAAC,CAAC,KAAK,EAAE,CAAC,EAAE,eAAe,CAAC,CAAC;AAC7B,EAAC,CAAC,MAAM,EAAE,CAAC,EAAE,qBAAqB,CAAC,CAAC;CACpC,CAAC","file":"all-off-compiled.js","sourcesContent":["'use strict';\n\nvar ee = require('../');\n\nmodule.exports = function (t, a) {\n\tvar x, count, count2;\n\n\tx = ee();\n\tcount = 0;\n\tcount2 = 0;\n\tx.on('foo', function () {\n\t\t++count;\n\t});\n\tx.on('foo', function () {\n\t\t++count;\n\t});\n\tx.on('bar', function () {\n\t\t++count2;\n\t});\n\tx.on('bar', function () {\n\t\t++count2;\n\t});\n\tt(x, 'foo');\n\tx.emit('foo');\n\tx.emit('bar');\n\ta(count, 0, \"All off: type\");\n\ta(count2, 2, \"All off: ohter type\");\n\n\tcount = 0;\n\tcount2 = 0;\n\tx.on('foo', function () {\n\t\t++count;\n\t});\n\tx.on('foo', function () {\n\t\t++count;\n\t});\n\tx.on('bar', function () {\n\t\t++count2;\n\t});\n\tx.on('bar', function () {\n\t\t++count2;\n\t});\n\tt(x);\n\tx.emit('foo');\n\tx.emit('bar');\n\ta(count, 0, \"All off: type\");\n\ta(count2, 0, \"All off: other type\");\n};\n"]}