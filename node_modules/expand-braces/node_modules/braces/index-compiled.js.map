{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAOA,YAAY,CAAC;;;;;;AAMb,IAAI,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;;;;;;AAMrC,MAAM,CAAC,OAAO,GAAG,UAAU,GAAG,EAAE,EAAE,EAAE;AAClC,SAAO,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;CACxB,CAAC;;;;;;;;;;;AAWF,SAAS,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE;AAC5B,MAAI,KAAK,GAAG,KAAK,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC9B,MAAI,KAAK,IAAI,IAAI,EAAE;AACjB,WAAO,CAAC,GAAG,CAAC,CAAC;GACd;;AAED,MAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AAC3B,UAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;GAC5C;;AAED,MAAI,OAAO,GAAG,KAAK,UAAU,EAAE;AAC7B,MAAE,GAAG,GAAG,CAAC;AACT,OAAG,GAAG,EAAE,CAAC;GACV;;AAED,KAAG,GAAG,GAAG,IAAI,EAAE,CAAC;AAChB,MAAI,KAAK,CAAC;;AAEV,MAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;AAC1B,SAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;GAC9B,MAAM;AACL,SAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;GAC7B;;AAED,MAAI,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC;AACvB,MAAI,CAAC,GAAG,CAAC;MAAE,GAAG;MAAE,GAAG,CAAC;;AAEpB,SAAO,GAAG,EAAE,EAAE;AACZ,OAAG,GAAG,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACxC,OAAG,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;;AAEvB,QAAI,GAAG,KAAK,CAAC,CAAC,EAAE;AACd,UAAI,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;AACpC,YAAI,GAAG,GAAG,yCAAyC,CAAC;AACpD,cAAM,IAAI,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;OAC5B;AACD,SAAG,GAAG,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;KACxB,MAAM,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;AAClC,SAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACf;GACF;;AAED,SAAO,GAAG,CAAC;CACZ;;;;;;AAMD,SAAS,KAAK,GAAG;AACf,SAAO,qBAAoB;IAAC;CAC7B;;;;;;AAMD,SAAS,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE;AACvC,MAAI,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC3B,MAAI,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AAC3B,SAAO,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GACnB,WAAW,GACX,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;CACjC","file":"index-compiled.js","sourcesContent":["/*!\n * braces <https://github.com/jonschlinkert/braces>\n *\n * Copyright (c) 2014 Jon Schlinkert, contributors.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\n/**\n * Module dependencies\n */\n\nvar expand = require('expand-range');\n\n/**\n * Expose `braces`\n */\n\nmodule.exports = function (str, fn) {\n  return braces(str, fn);\n};\n\n/**\n * Expand `{foo,bar}` or `{1..5}` braces in the\n * give `string`.\n *\n * @param  {String} `str`\n * @param  {Array} `arr`\n * @return {Array}\n */\n\nfunction braces(str, arr, fn) {\n  var match = regex().exec(str);\n  if (match == null) {\n    return [str];\n  }\n\n  if (typeof str !== 'string') {\n    throw new Error('braces expects a string');\n  }\n\n  if (typeof arr === 'function') {\n    fn = arr;\n    arr = [];\n  }\n\n  arr = arr || [];\n  var paths;\n\n  if (/\\.{2}/.test(match[2])) {\n    paths = expand(match[2], fn);\n  } else {\n    paths = match[2].split(',');\n  }\n\n  var len = paths.length;\n  var i = 0, val, idx;\n\n  while (len--) {\n    val = splice(str, match[1], paths[i++]);\n    idx = val.indexOf('{');\n\n    if (idx !== -1) {\n      if (val.indexOf('}', idx + 2) === -1) {\n        var msg = '[brace expansion] imbalanced brace in: ';\n        throw new Error(msg + str);\n      }\n      arr = braces(val, arr);\n    } else if (arr.indexOf(val) === -1) {\n      arr.push(val);\n    }\n  }\n\n  return arr;\n}\n\n/**\n * Braces regex.\n */\n\nfunction regex() {\n  return /.*(\\{([^\\\\}]*)\\})/g;\n}\n\n/**\n * Faster alternative to `String.replace()`\n */\n\nfunction splice(str, token, replacement) {\n  var i = str.indexOf(token);\n  var end = i + token.length;\n  return str.substr(0, i)\n    + replacement\n    + str.substr(end, str.length);\n}\n"]}