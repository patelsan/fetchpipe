{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAOA,YAAY,CAAC;;AAEb,IAAI,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACpC,IAAI,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;;AAEtC,MAAM,CAAC,OAAO,GAAG,SAAS,WAAW,CAAC,GAAG,EAAE,EAAE,EAAE;AAC7C,MAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC5B,MAAI,KAAK,IAAI,IAAI,EAAE;AACjB,WAAO,GAAG,CAAC;GACZ;;AAED,MAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAClB,MAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;AAElB,MAAI,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEpC,MAAI,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;AACnB,MAAI,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;;AAEnB,MAAI,OAAO,EAAE,KAAK,UAAU,EAAE;AAC5B,WAAO,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;GACxB,MAAM,IAAI,MAAM,KAAK,KAAK,EAAE;AAC3B,WAAO,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;GAC7B,MAAM,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;AAChC,WAAO,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC;GAC/B;;AAED,SAAO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;CACpB,CAAC;;AAEF,SAAS,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;AACnC,MAAI,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;AAC9B,MAAI,GAAG,GAAG,EAAE;MAAE,CAAC,GAAG,KAAK,GAAG,CAAC;MAAE,GAAG,GAAG,CAAC,CAAC;;AAErC,SAAO,CAAC,EAAE,GAAG,IAAI,EAAE;AACjB,QAAI,OAAO,OAAO,KAAK,UAAU,EAAE;AACjC,SAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;KACrD,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;AACtC,SAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;KAC3B,MAAM,IAAI,OAAO,KAAK,OAAO,EAAE;AAC9B,SAAG,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;KAClC,MAAM;AACL,SAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;KACrB;GACF;;AAED,SAAO,GAAG,CAAC;CACZ;;AAED,SAAS,MAAM,CAAC,GAAG,EAAE;AACnB,MAAI,EAAE,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AAC3B,SAAO,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;CAC3C;;AAED,SAAS,GAAG,CAAC,GAAG,EAAE,OAAO,EAAE;AACzB,MAAI,IAAI,GAAG,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;AACxC,SAAO,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC;CAChC","file":"index-compiled.js","sourcesContent":["/*!\n * expand-range <https://github.com/jonschlinkert/expand-range>\n *\n * Copyright (c) 2014 Jon Schlinkert, contributors.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar isNumber = require('is-number');\nvar repeat = require('repeat-string');\n\nmodule.exports = function expandRange(str, fn) {\n  var match = str.split('..');\n  if (match == null) {\n    return str;\n  }\n\n  var m1 = match[0];\n  var m2 = match[1];\n\n  var number = isNumber(parseInt(m1));\n\n  var a = coerce(m1);\n  var b = coerce(m2);\n\n  if (typeof fn === 'function') {\n    return range(a, b, fn);\n  } else if (number === false) {\n    return range(a, b, 'alpha');\n  } else if (a.length === b.length) {\n    return range(a, b, m2.length);\n  }\n\n  return range(a, b);\n};\n\nfunction range(start, stop, special) {\n  var len = String(stop).length;\n  var arr = [], i = start - 1, idx = 0;\n\n  while (i++ < stop) {\n    if (typeof special === 'function') {\n      arr.push(special(String.fromCharCode(i), i, idx++));\n    } else if (typeof special === 'number') {\n      arr.push(pad(i, special));\n    } else if (special === 'alpha') {\n      arr.push(String.fromCharCode(i));\n    } else {\n      arr.push(String(i));\n    }\n  }\n\n  return arr;\n}\n\nfunction coerce(val) {\n  var ch = parseInt(val, 10); /* 01 || Aa */\n  return val == ch ? ch : val.charCodeAt(0);\n}\n\nfunction pad(val, longest) {\n  var diff = longest - String(val).length;\n  return repeat('0', diff) + val;\n}\n"]}