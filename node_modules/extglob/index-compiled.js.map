{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAOA,YAAY,CAAC;;;;;;AAMb,IAAI,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACtC,IAAI,EAAE;IAAE,KAAK,GAAG,EAAE,CAAC;;;;;;AAMnB,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;AAqBzB,SAAS,OAAO,CAAC,GAAG,EAAE,IAAI,EAAE;AAC1B,MAAI,GAAG,IAAI,IAAI,EAAE,CAAC;AAClB,MAAI,CAAC,GAAG,EAAE;MAAE,CAAC,GAAG,CAAC,CAAC;;;;AAIlB,KAAG,GAAG,GAAG,CAAC,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;;;AAG5C,KAAG,GAAG,GAAG,CAAC,OAAO,CAAC,oBAAoB,EAAE,UAAU,CAAC,EAAE,EAAE,EAAE;AACvD,QAAI,EAAE,KAAK,GAAG,EAAE;AACd,aAAO,MAAM,CAAC,UAAU,CAAC,CAAC;KAC3B;AACD,WAAO,MAAM,CAAC,OAAO,CAAC,CAAC;GACxB,CAAC,CAAC;;;;AAIH,MAAI,GAAG,GAAG,GAAG,GACT,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GACpB,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GACvB,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;AAE1B,MAAI,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;AAC7B,WAAO,KAAK,CAAC,GAAG,CAAC,CAAC;GACnB;;AAED,MAAI,EAAE,EAAE,YAAY,MAAM,CAAA,AAAC,EAAE;AAC3B,MAAE,GAAG,KAAK,EAAE,CAAC;GACd;;AAED,MAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AACpB,MAAI,CAAC,CAAC;;AAEN,SAAO,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AACvB,QAAI,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,QAAI,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,QAAI,MAAM,KAAK,GAAG,EAAE;AAClB,UAAI,CAAC,MAAM,GAAG,IAAI,CAAC;KACpB;;AAED,QAAI,EAAE,GAAG,YAAY,GAAI,CAAC,EAAE,AAAC,GAAG,IAAI,CAAC;;AAErC,KAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AACzC,OAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;GAChC;;AAED,MAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1B,MAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;;;;;AAKtB,SAAO,GAAG,EAAE,EAAE;AACZ,QAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;AACrB,OAAG,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;GACrC;;AAED,MAAI,MAAM,GAAG,IAAI,CAAC,KAAK,GACnB,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,GACxC,GAAG,CAAC;;AAER,QAAM,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;;AAGvC,SAAQ,KAAK,CAAC,GAAG,CAAC,GAAG,MAAM,CAAE;CAC9B;;;;;;;;;;;AAWD,SAAS,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE;AAChC,MAAI,GAAG,EAAE,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;;AAE/B,UAAQ,MAAM;AACZ,SAAK,GAAG;AACN,aAAO,KAAK,GAAG,KAAK,GAAG,OAAO,IAAI,GAAG,GAAG,MAAM,GAAG,IAAI,CAAA,AAAC,CAAC;AAAA,AACzD,SAAK,GAAG;AACN,aAAO,KAAK,GAAG,KAAK,GAAG,GAAG,CAAC;AAAA,AAC7B,SAAK,GAAG;AACN,aAAO,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC;AAAA,AAC9B,SAAK,GAAG;AACN,aAAO,KAAK,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,CAAA,AAAC,CAAA;AAAA,AACjD,SAAK,GAAG;AACN,aAAO,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC;AAAA,AAC9B;AACE,aAAO,KAAK,CAAC;AAAA,GAChB;CACF;;AAED,SAAS,MAAM,CAAC,GAAG,EAAE;AACnB,KAAG,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACtC,KAAG,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACjC,SAAO,GAAG,CAAC;CACZ;;;;;;AAMD,SAAS,KAAK,GAAG;AACf,SAAO,kCAAiC;IAAC;CAC1C;;;;;;AAMD,SAAS,MAAM,CAAC,GAAG,EAAE;AACnB,SAAO,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC;CAC9B;;;;;;;;;;;;AAYD,SAAS,OAAO,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE;AAC7C,MAAI,MAAM,GAAG,QAAQ,GAAG,GAAG,GAAG,EAAE,CAAC;AACjC,MAAI,KAAK,GAAG,QAAQ,GAAG,GAAG,GAAG,EAAE,CAAC;AAChC,SAAO,GAAI,KAAK,GAAG,OAAO,GAAG,GAAG,GAAG,KAAK,AAAC,CAAC;AAC1C,MAAI,SAAS,EAAE;AACb,WAAO,GAAG,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;GACpC;AACD,SAAO,IAAI,MAAM,CAAC,MAAM,GAAG,OAAO,CAAC,CAAC;CACrC","file":"index-compiled.js","sourcesContent":["/*!\n * extglob <https://github.com/jonschlinkert/extglob>\n *\n * Copyright (c) 2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\n/**\n * Module dependencies\n */\n\nvar isExtglob = require('is-extglob');\nvar re, cache = {};\n\n/**\n * Expose `extglob`\n */\n\nmodule.exports = extglob;\n\n/**\n * Convert the given extglob `string` to a regex-compatible\n * string.\n *\n * ```js\n * var extglob = require('extglob');\n * extglob('!(a?(b))');\n * //=> '(?!a(?:b)?)[^/]*?'\n * ```\n *\n * @param {String} `str` The string to convert.\n * @param {Object} `options`\n *   @option {Boolean} [options] `esc` If `false` special characters will not be escaped. Defaults to `true`.\n *   @option {Boolean} [options] `regex` If `true` a regular expression is returned instead of a string.\n * @return {String}\n * @api public\n */\n\n\nfunction extglob(str, opts) {\n  opts = opts || {};\n  var o = {}, i = 0;\n\n  // fix common character reversals\n  // '*!(.js)' => '*.!(js)'\n  str = str.replace(/!\\(([^\\w*()])/g, '$1!(');\n\n  // support file extension negation\n  str = str.replace(/([*\\/])\\.!\\([*]\\)/g, function (m, ch) {\n    if (ch === '/') {\n      return escape('\\\\/[^.]+');\n    }\n    return escape('[^.]+');\n  });\n\n  // create a unique key for caching by\n  // combining the string and options\n  var key = str\n    + String(!!opts.regex)\n    + String(!!opts.contains)\n    + String(!!opts.escape);\n\n  if (cache.hasOwnProperty(key)) {\n    return cache[key];\n  }\n\n  if (!(re instanceof RegExp)) {\n    re = regex();\n  }\n\n  opts.negate = false;\n  var m;\n\n  while (m = re.exec(str)) {\n    var prefix = m[1];\n    var inner = m[3];\n    if (prefix === '!') {\n      opts.negate = true;\n    }\n\n    var id = '__EXTGLOB_' + (i++) + '__';\n    // use the prefix of the _last_ (outtermost) pattern\n    o[id] = wrap(inner, prefix, opts.escape);\n    str = str.split(m[0]).join(id);\n  }\n\n  var keys = Object.keys(o);\n  var len = keys.length;\n\n  // we have to loop again to allow us to convert\n  // patterns in reverse order (starting with the\n  // innermost/last pattern first)\n  while (len--) {\n    var prop = keys[len];\n    str = str.split(prop).join(o[prop]);\n  }\n\n  var result = opts.regex\n    ? toRegex(str, opts.contains, opts.negate)\n    : str;\n\n  result = result.split('.').join('\\\\.');\n\n  // cache the result and return it\n  return (cache[key] = result);\n}\n\n/**\n * Convert `string` to a regex string.\n *\n * @param  {String} `str`\n * @param  {String} `prefix` Character that determines how to wrap the string.\n * @param  {Boolean} `esc` If `false` special characters will not be escaped. Defaults to `true`.\n * @return {String}\n */\n\nfunction wrap(inner, prefix, esc) {\n  if (esc) inner = escape(inner);\n\n  switch (prefix) {\n    case '!':\n      return '(?!' + inner + ')[^/]' + (esc ? '%%%~' : '*?');\n    case '@':\n      return '(?:' + inner + ')';\n    case '+':\n      return '(?:' + inner + ')+';\n    case '*':\n      return '(?:' + inner + ')' + (esc ? '%%' : '*')\n    case '?':\n      return '(?:' + inner + '|)';\n    default:\n      return inner;\n  }\n}\n\nfunction escape(str) {\n  str = str.split('*').join('[^/]%%%~');\n  str = str.split('.').join('\\\\.');\n  return str;\n}\n\n/**\n * extglob regex.\n */\n\nfunction regex() {\n  return /(\\\\?[@?!+*$]\\\\?)(\\(([^()]*?)\\))/;\n}\n\n/**\n * Negation regex\n */\n\nfunction negate(str) {\n  return '(?!^' + str + ').*$';\n}\n\n/**\n * Create the regex to do the matching. If\n * the leading character in the `pattern` is `!`\n * a negation regex is returned.\n *\n * @param {String} `pattern`\n * @param {Boolean} `contains` Allow loose matching.\n * @param {Boolean} `isNegated` True if the pattern is a negation pattern.\n */\n\nfunction toRegex(pattern, contains, isNegated) {\n  var prefix = contains ? '^' : '';\n  var after = contains ? '$' : '';\n  pattern = ('(?:' + pattern + ')' + after);\n  if (isNegated) {\n    pattern = prefix + negate(pattern);\n  }\n  return new RegExp(prefix + pattern);\n}\n"]}