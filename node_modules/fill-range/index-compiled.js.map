{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * fill-range <https://github.com/jonschlinkert/fill-range>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar isObject = require('isobject');\nvar isNumber = require('is-number');\nvar randomize = require('randomatic');\nvar repeatStr = require('repeat-string');\nvar repeat = require('repeat-element');\n\n/**\n * Expose `fillRange`\n */\n\nmodule.exports = fillRange;\n\n/**\n * Return a range of numbers or letters.\n *\n * @param  {String} `a` Start of the range\n * @param  {String} `b` End of the range\n * @param  {String} `step` Increment or decrement to use.\n * @param  {Function} `fn` Custom function to modify each element in the range.\n * @return {Array}\n */\n\nfunction fillRange(a, b, step, options, fn) {\n  if (a == null || b == null) {\n    throw new Error('fill-range expects the first and second args to be strings.');\n  }\n\n  if (typeof step === 'function') {\n    fn = step; options = {}; step = null;\n  }\n\n  if (typeof options === 'function') {\n    fn = options; options = {};\n  }\n\n  if (isObject(step)) {\n    options = step; step = '';\n  }\n\n  var expand, regex = false, sep = '';\n  var opts = options || {};\n\n  if (typeof opts.silent === 'undefined') {\n    opts.silent = true;\n  }\n\n  step = step || opts.step;\n\n  // store a ref to unmodified arg\n  var origA = a, origB = b;\n\n  b = (b.toString() === '-0') ? 0 : b;\n\n  if (opts.optimize || opts.makeRe) {\n    step = step ? (step += '~') : step;\n    expand = true;\n    regex = true;\n    sep = '~';\n  }\n\n  // handle special step characters\n  if (typeof step === 'string') {\n    var match = stepRe().exec(step);\n\n    if (match) {\n      var i = match.index;\n      var m = match[0];\n\n      // repeat string\n      if (m === '+') {\n        return repeat(a, b);\n\n      // randomize a, `b` times\n      } else if (m === '?') {\n        return [randomize(a, b)];\n\n      // expand right, no regex reduction\n      } else if (m === '>') {\n        step = step.substr(0, i) + step.substr(i + 1);\n        expand = true;\n\n      // expand to an array, or if valid create a reduced\n      // string for a regex logic `or`\n      } else if (m === '|') {\n        step = step.substr(0, i) + step.substr(i + 1);\n        expand = true;\n        regex = true;\n        sep = m;\n\n      // expand to an array, or if valid create a reduced\n      // string for a regex range\n      } else if (m === '~') {\n        step = step.substr(0, i) + step.substr(i + 1);\n        expand = true;\n        regex = true;\n        sep = m;\n      }\n    } else if (!isNumber(step)) {\n      if (!opts.silent) {\n        throw new TypeError('fill-range: invalid step.');\n      }\n      return null;\n    }\n  }\n\n  if (/[.&*()[\\]^%$#@!]/.test(a) || /[.&*()[\\]^%$#@!]/.test(b)) {\n    if (!opts.silent) {\n      throw new RangeError('fill-range: invalid range arguments.');\n    }\n    return null;\n  }\n\n  // has neither a letter nor number, or has both letters and numbers\n  // this needs to be after the step logic\n  if (!noAlphaNum(a) || !noAlphaNum(b) || hasBoth(a) || hasBoth(b)) {\n    if (!opts.silent) {\n      throw new RangeError('fill-range: invalid range arguments.');\n    }\n    return null;\n  }\n\n  // validate arguments\n  var isNumA = isNumber(zeros(a));\n  var isNumB = isNumber(zeros(b));\n\n  if ((!isNumA && isNumB) || (isNumA && !isNumB)) {\n    if (!opts.silent) {\n      throw new TypeError('fill-range: first range argument is incompatible with second.');\n    }\n    return null;\n  }\n\n  // by this point both are the same, so we\n  // can use A to check going forward.\n  var isNum = isNumA;\n  var num = formatStep(step);\n\n  // is the range alphabetical? or numeric?\n  if (isNum) {\n    // if numeric, coerce to an integer\n    a = +a; b = +b;\n  } else {\n    // otherwise, get the charCode to expand alpha ranges\n    a = a.charCodeAt(0);\n    b = b.charCodeAt(0);\n  }\n\n  // is the pattern descending?\n  var isDescending = a > b;\n\n  // don't create a character class if the args are < 0\n  if (a < 0 || b < 0) {\n    expand = false;\n    regex = false;\n  }\n\n  // detect padding\n  var padding = isPadded(origA, origB);\n  var res, pad, arr = [];\n  var ii = 0;\n\n  // character classes, ranges and logical `or`\n  if (regex) {\n    if (shouldExpand(a, b, num, isNum, padding, opts)) {\n      // make sure the correct separator is used\n      if (sep === '|' || sep === '~') {\n        sep = detectSeparator(a, b, num, isNum, isDescending);\n      }\n      return wrap([origA, origB], sep, opts);\n    }\n  }\n\n  while (isDescending ? (a >= b) : (a <= b)) {\n    if (padding && isNum) {\n      pad = padding(a);\n    }\n\n    // custom function\n    if (typeof fn === 'function') {\n      res = fn(a, isNum, pad, ii++);\n\n    // letters\n    } else if (!isNum) {\n      if (regex && isInvalidChar(a)) {\n        res = null;\n      } else {\n        res = String.fromCharCode(a);\n      }\n\n    // numbers\n    } else {\n      res = formatPadding(a, pad);\n    }\n\n    // add result to the array, filtering any nulled values\n    if (res !== null) arr.push(res);\n\n    // increment or decrement\n    if (isDescending) {\n      a -= num;\n    } else {\n      a += num;\n    }\n  }\n\n  // now that the array is expanded, we need to handle regex\n  // character classes, ranges or logical `or` that wasn't\n  // already handled before the loop\n  if ((regex || expand) && !opts.noexpand) {\n    // make sure the correct separator is used\n    if (sep === '|' || sep === '~') {\n      sep = detectSeparator(a, b, num, isNum, isDescending);\n    }\n    if (arr.length === 1 || a < 0 || b < 0) { return arr; }\n    return wrap(arr, sep, opts);\n  }\n\n  return arr;\n}\n\n/**\n * Wrap the string with the correct regex\n * syntax.\n */\n\nfunction wrap(arr, sep, opts) {\n  if (sep === '~') { sep = '-'; }\n  var str = arr.join(sep);\n  var pre = opts && opts.regexPrefix;\n\n  // regex logical `or`\n  if (sep === '|') {\n    str = pre ? pre + str : str;\n    str = '(' + str + ')';\n  }\n\n  // regex character class\n  if (sep === '-') {\n    str = (pre && pre === '^')\n      ? pre + str\n      : str;\n    str = '[' + str + ']';\n  }\n  return [str];\n}\n\n/**\n * Check for invalid characters\n */\n\nfunction isCharClass(a, b, step, isNum, isDescending) {\n  if (isDescending) { return false; }\n  if (isNum) { return a <= 9 && b <= 9; }\n  if (a < b) { return step === 1; }\n  return false;\n}\n\n/**\n * Detect the correct separator to use\n */\n\nfunction shouldExpand(a, b, num, isNum, padding, opts) {\n  if (isNum && (a > 9 || b > 9)) { return false; }\n  return !padding && num === 1 && a < b;\n}\n\n/**\n * Detect the correct separator to use\n */\n\nfunction detectSeparator(a, b, step, isNum, isDescending) {\n  var isChar = isCharClass(a, b, step, isNum, isDescending);\n  if (!isChar) {\n    return '|';\n  }\n  return '~';\n}\n\n/**\n * Correctly format the step based on type\n */\n\nfunction formatStep(step) {\n  return Math.abs(step >> 0) || 1;\n}\n\n/**\n * Format padding, taking leading `-` into account\n */\n\nfunction formatPadding(ch, pad) {\n  var res = pad ? pad + ch : ch;\n  if (pad && ch.toString().charAt(0) === '-') {\n    res = '-' + pad + ch.toString().substr(1);\n  }\n  return res.toString();\n}\n\n/**\n * Check for invalid characters\n */\n\nfunction isInvalidChar(str) {\n  var ch = toStr(str);\n  return ch === '\\\\'\n    || ch === '['\n    || ch === ']'\n    || ch === '^'\n    || ch === '('\n    || ch === ')'\n    || ch === '`';\n}\n\n/**\n * Convert to a string from a charCode\n */\n\nfunction toStr(ch) {\n  return String.fromCharCode(ch);\n}\n\n\n/**\n * Step regex\n */\n\nfunction stepRe() {\n  return /\\?|>|\\||\\+|\\~/g;\n}\n\n/**\n * Return true if `val` has either a letter\n * or a number\n */\n\nfunction noAlphaNum(val) {\n  return /[a-z0-9]/i.test(val);\n}\n\n/**\n * Return true if `val` has both a letter and\n * a number (invalid)\n */\n\nfunction hasBoth(val) {\n  return /[a-z][0-9]|[0-9][a-z]/i.test(val);\n}\n\n/**\n * Normalize zeros for checks\n */\n\nfunction zeros(val) {\n  if (/^-*0+$/.test(val.toString())) {\n    return '0';\n  }\n  return val;\n}\n\n/**\n * Return true if `val` has leading zeros,\n * or a similar valid pattern.\n */\n\nfunction hasZeros(val) {\n  return /[^.]\\.|^-*0+[0-9]/.test(val);\n}\n\n/**\n * If the string is padded, returns a curried function with\n * the a cached padding string, or `false` if no padding.\n *\n * @param  {*} `origA` String or number.\n * @return {String|Boolean}\n */\n\nfunction isPadded(origA, origB) {\n  if (hasZeros(origA) || hasZeros(origB)) {\n    var alen = length(origA);\n    var blen = length(origB);\n\n    var len = alen >= blen\n      ? alen\n      : blen;\n\n    return function (a) {\n      return repeatStr('0', len - length(a));\n    };\n  }\n  return false;\n}\n\n/**\n * Get the string length of `val`\n */\n\nfunction length(val) {\n  return val.toString().length;\n}\n"]}