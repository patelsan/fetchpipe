{"version":3,"sources":["info.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,MAAM,CAAC,OAAO,GAAG,OAAO,GAAG,SAAS,CAAC;;AAErC,OAAO,CAAC,KAAK,GAAG,iDAAiD,CAAC;;AAElE,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC5B,IAAI,UAAU,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;AACjD,IAAI,QAAQ,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAC7C,IAAI,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,cAAc,EAAC,EAAC,GAAG,EAAC,aAAa,EAAC,CAAC,CAAC;;AAE/D,SAAS,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE;AACpC,QAAI,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAC7B,QAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC,CAAC;AACjE,QAAI,IAAI,GAAG,UAAU,CAAC,QAAQ,CAAC,YAAY,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;AACvD,YAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAC,MAAM,CAAC,CAAC;AACzC,OAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAC1B,QAAI,EAAE,GAAI,IAAI,GAAG,CAAC,EAAE,EAAE,CAAC;AACvB,QAAI,OAAO,GAAG,EAAG,MAAM,EAAE,MAAM,CAAC,MAAM;AACrB,cAAM,EAAE,MAAM,CAAC,MAAM;KACvB,CAAC;AAChB,MAAE,CAAC,WAAW,CAAC,OAAO,EAAE,UAAS,GAAG,EAAE,IAAI,EAAC;AACvC,YAAI,GAAG,IAAI,GAAG,CAAC,IAAI,IAAI,UAAU,EAAE;AAC/B,mBAAO,QAAQ,CAAC,IAAI,KAAK,CAAC,GAAG,GAAC,YAAY,CAAC,IAAI,GAAC,uBAAuB,GAAG,OAAO,CAAC,MAAM,GAAG,oBAAoB,GAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;SACnI,MAAM,IAAG,GAAG,EAAE;AACX,mBAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;SACxB,MAAM;AACH,eAAG,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAC,IAAI,EAAC,CAAC,CAAC,CAAC,CAAC;AACzC,gBAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;AACvB,oBAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAS,GAAG,EAAE;AAChC,2BAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;iBACxB,CAAC,CAAC;aACN,MAAM;AACH,uBAAO,CAAC,KAAK,CAAC,GAAG,GAAC,YAAY,CAAC,IAAI,GAAC,gCAAgC,GAAG,OAAO,CAAC,MAAM,GAAG,oBAAoB,GAAC,MAAM,CAAC,MAAM,CAAE,CAAC;aAChI;AACD,mBAAO,QAAQ,EAAE,CAAC;SACrB;KACJ,CAAC,CAAC;CACN","file":"info-compiled.js","sourcesContent":["\"use strict\";\n\nmodule.exports = exports = unpublish;\n\nexports.usage = 'Lists all published binaries (requires aws-sdk)';\n\nvar fs = require('fs');\nvar log = require('npmlog');\nvar versioning = require('./util/versioning.js');\nvar s3_setup = require('./util/s3_setup.js');\nvar config = require('rc')(\"node_pre_gyp\",{acl:\"public-read\"});\n\nfunction unpublish(gyp, argv, callback) {\n    var AWS = require(\"aws-sdk\");\n    var package_json = JSON.parse(fs.readFileSync('./package.json'));\n    var opts = versioning.evaluate(package_json, gyp.opts);\n    s3_setup.detect(opts.hosted_path,config);\n    AWS.config.update(config);\n    var s3 =  new AWS.S3();\n    var s3_opts = {  Bucket: config.bucket,\n                     Prefix: config.prefix\n                  };\n    s3.listObjects(s3_opts, function(err, meta){\n        if (err && err.code == 'NotFound') {\n            return callback(new Error('['+package_json.name+'] Not found: https://' + s3_opts.Bucket + '.s3.amazonaws.com/'+config.prefix));\n        } else if(err) {\n            return callback(err);\n        } else {\n            log.verbose(JSON.stringify(meta,null,1));\n            if (meta && meta.Contents) {\n                meta.Contents.forEach(function(obj) {\n                    console.log(obj.Key);\n                });\n            } else {\n                console.error('['+package_json.name+'] No objects found at https://' + s3_opts.Bucket + '.s3.amazonaws.com/'+config.prefix );\n            }\n            return callback();\n        }\n    });\n}\n"]}