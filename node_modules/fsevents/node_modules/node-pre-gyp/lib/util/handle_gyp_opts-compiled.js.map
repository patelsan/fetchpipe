{"version":3,"sources":["handle_gyp_opts.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,MAAM,CAAC,OAAO,GAAG,OAAO,GAAG,eAAe,CAAC;;AAE3C,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,UAAU,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqC5C,IAAI,mBAAmB,GAAG,CACxB,QAAQ,EACR,aAAa,EACb,aAAa,CACd,CAAC;;AAEF,SAAS,eAAe,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE;;;AAG1C,QAAI,oBAAoB,GAAG,EAAE,CAAC;;AAE9B,QAAI,IAAI,GAAG,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;AACxF,uBAAmB,CAAC,OAAO,CAAC,UAAS,GAAG,EAAE;AACtC,YAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;AACpB,YAAI,GAAG,EAAE;AACL,gCAAoB,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;SACrD,MAAM;AACH,mBAAO,QAAQ,CAAC,IAAI,KAAK,CAAC,SAAS,GAAG,GAAG,GAAG,yCAAyC,CAAC,CAAC,CAAC;SAC3F;KACJ,CAAC,CAAC;;;AAGH,QAAI,gBAAgB,GAAG,EAAE,CAAC;AAC1B,QAAI,mBAAmB,GAAG,KAAK,CAAC;AAChC,OAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAS,GAAG,EAAE;AACzC,YAAI,mBAAmB,EAAE;AACrB,4BAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAC9B;AACD,YAAI,GAAG,IAAI,IAAI,EAAE;AACb,+BAAmB,GAAG,IAAI,CAAC;SAC9B;KACJ,CAAC,CAAC;;;;AAIH,QAAI,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;AAClC,QAAI,gBAAgB,GAAG,EAAE,CAAC;AAC1B,UAAM,CAAC,OAAO,CAAC,UAAS,KAAK,EAAE;AAC3B,YAAI,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC,IAAI,IAAI,EAAE;AAC9C,gBAAI,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACzB,gBAAI,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAC,CAAC,CAAC,CAAC;AAC1C,gBAAI,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;;AACjC,gCAAgB,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;aACjD,MAAM;;AACH,gCAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAChC;SACJ;KACJ,CAAC,CAAC;;AAEH,QAAI,MAAM,GAAG,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,gBAAgB,EAAC,KAAK,EAAC,oBAAoB,EAAC,UAAU,EAAC,gBAAgB,EAAC,CAAC;AACzG,WAAO,QAAQ,CAAC,IAAI,EAAC,MAAM,CAAC,CAAC;CAChC","file":"handle_gyp_opts-compiled.js","sourcesContent":["\"use strict\";\n\nmodule.exports = exports = handle_gyp_opts;\n\nvar fs = require('fs');\nvar versioning = require('./versioning.js');\n\n/*\n\nHere we gather node-pre-gyp generated options (from versioning) and pass them along to node-gyp.\n\nWe massage the args and options slightly to account for differences in what commands mean between\nnode-pre-gyp and node-gyp (e.g. see the difference between \"build\" and \"rebuild\" below)\n\nKeep in mind: the values inside `argv` and `gyp.opts` below are different depending on whether\nnode-pre-gyp is called directory, or if it is called in a `run-script` phase of npm.\n\nWe also try to preserve any command line options that might have been passed to npm or node-pre-gyp.\nBut this is fairly difficult without passing way to much through. For example `gyp.opts` contains all\nthe process.env and npm pushes a lot of variables into process.env which node-pre-gyp inherits. So we have\nto be very selective about what we pass through.\n\nFor example:\n\n`npm install --build-from-source` will give:\n\nargv == [ 'rebuild' ]\ngyp.opts.argv == { remain: [ 'install' ],\n  cooked: [ 'install', '--fallback-to-build' ],\n  original: [ 'install', '--fallback-to-build' ] }\n\n`./bin/node-pre-gyp build` will give:\n\nargv == []\ngyp.opts.argv == { remain: [ 'build' ],\n  cooked: [ 'build' ],\n  original: [ '-C', 'test/app1', 'build' ] }\n\n*/\n\n// select set of node-pre-gyp versioning info\n// to share with node-gyp\nvar share_with_node_gyp = [\n  'module',\n  'module_name',\n  'module_path',\n];\n\nfunction handle_gyp_opts(gyp, argv, callback) {\n\n    // Collect node-pre-gyp specific variables to pass to node-gyp\n    var node_pre_gyp_options = [];\n    // generate custom node-pre-gyp versioning info\n    var opts = versioning.evaluate(JSON.parse(fs.readFileSync('./package.json')), gyp.opts);\n    share_with_node_gyp.forEach(function(key) {\n        var val = opts[key];\n        if (val) {\n            node_pre_gyp_options.push('--' + key + '=' + val);\n        } else {\n            return callback(new Error(\"Option \" + key + \" required but not found by node-pre-gyp\"));\n        }\n    });\n\n    // Collect options that follow the special -- which disables nopt parsing\n    var unparsed_options = [];\n    var double_hyphen_found = false;\n    gyp.opts.argv.original.forEach(function(opt) {\n        if (double_hyphen_found) {\n            unparsed_options.push(opt);\n        }\n        if (opt == '--') {\n            double_hyphen_found = true;\n        }\n    });\n\n    // We try respect and pass through remaining command\n    // line options (like --foo=bar) to node-gyp\n    var cooked = gyp.opts.argv.cooked;\n    var node_gyp_options = [];\n    cooked.forEach(function(value) {\n        if (value.length > 2 && value.slice(0,2) == '--') {\n            var key = value.slice(2);\n            var val = cooked[cooked.indexOf(value)+1];\n            if (val && val.indexOf('--') === -1) { // handle '--foo=bar' or ['--foo','bar']\n                node_gyp_options.push('--' + key + '=' + val);\n            } else { // pass through --foo\n                node_gyp_options.push(value);\n            }\n        }\n    });\n\n    var result = {'opts':opts,'gyp':node_gyp_options,'pre':node_pre_gyp_options,'unparsed':unparsed_options};\n    return callback(null,result);\n}\n"]}