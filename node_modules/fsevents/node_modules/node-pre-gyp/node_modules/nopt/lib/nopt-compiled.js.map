{"version":3,"sources":["nopt.js"],"names":[],"mappings":"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","file":"nopt-compiled.js","sourcesContent":["// info about each config option.\n\nvar debug = process.env.DEBUG_NOPT || process.env.NOPT_DEBUG\n  ? function () { console.error.apply(console, arguments) }\n  : function () {}\n\nvar url = require(\"url\")\n  , path = require(\"path\")\n  , Stream = require(\"stream\").Stream\n  , abbrev = require(\"abbrev\")\n\nmodule.exports = exports = nopt\nexports.clean = clean\n\nexports.typeDefs =\n  { String  : { type: String,  validate: validateString  }\n  , Boolean : { type: Boolean, validate: validateBoolean }\n  , url     : { type: url,     validate: validateUrl     }\n  , Number  : { type: Number,  validate: validateNumber  }\n  , path    : { type: path,    validate: validatePath    }\n  , Stream  : { type: Stream,  validate: validateStream  }\n  , Date    : { type: Date,    validate: validateDate    }\n  }\n\nfunction nopt (types, shorthands, args, slice) {\n  args = args || process.argv\n  types = types || {}\n  shorthands = shorthands || {}\n  if (typeof slice !== \"number\") slice = 2\n\n  debug(types, shorthands, args, slice)\n\n  args = args.slice(slice)\n  var data = {}\n    , key\n    , remain = []\n    , cooked = args\n    , original = args.slice(0)\n\n  parse(args, data, remain, types, shorthands)\n  // now data is full\n  clean(data, types, exports.typeDefs)\n  data.argv = {remain:remain,cooked:cooked,original:original}\n  Object.defineProperty(data.argv, 'toString', { value: function () {\n    return this.original.map(JSON.stringify).join(\" \")\n  }, enumerable: false })\n  return data\n}\n\nfunction clean (data, types, typeDefs) {\n  typeDefs = typeDefs || exports.typeDefs\n  var remove = {}\n    , typeDefault = [false, true, null, String, Array]\n\n  Object.keys(data).forEach(function (k) {\n    if (k === \"argv\") return\n    var val = data[k]\n      , isArray = Array.isArray(val)\n      , type = types[k]\n    if (!isArray) val = [val]\n    if (!type) type = typeDefault\n    if (type === Array) type = typeDefault.concat(Array)\n    if (!Array.isArray(type)) type = [type]\n\n    debug(\"val=%j\", val)\n    debug(\"types=\", type)\n    val = val.map(function (val) {\n      // if it's an unknown value, then parse false/true/null/numbers/dates\n      if (typeof val === \"string\") {\n        debug(\"string %j\", val)\n        val = val.trim()\n        if ((val === \"null\" && ~type.indexOf(null))\n            || (val === \"true\" &&\n               (~type.indexOf(true) || ~type.indexOf(Boolean)))\n            || (val === \"false\" &&\n               (~type.indexOf(false) || ~type.indexOf(Boolean)))) {\n          val = JSON.parse(val)\n          debug(\"jsonable %j\", val)\n        } else if (~type.indexOf(Number) && !isNaN(val)) {\n          debug(\"convert to number\", val)\n          val = +val\n        } else if (~type.indexOf(Date) && !isNaN(Date.parse(val))) {\n          debug(\"convert to date\", val)\n          val = new Date(val)\n        }\n      }\n\n      if (!types.hasOwnProperty(k)) {\n        return val\n      }\n\n      // allow `--no-blah` to set 'blah' to null if null is allowed\n      if (val === false && ~type.indexOf(null) &&\n          !(~type.indexOf(false) || ~type.indexOf(Boolean))) {\n        val = null\n      }\n\n      var d = {}\n      d[k] = val\n      debug(\"prevalidated val\", d, val, types[k])\n      if (!validate(d, k, val, types[k], typeDefs)) {\n        if (exports.invalidHandler) {\n          exports.invalidHandler(k, val, types[k], data)\n        } else if (exports.invalidHandler !== false) {\n          debug(\"invalid: \"+k+\"=\"+val, types[k])\n        }\n        return remove\n      }\n      debug(\"validated val\", d, val, types[k])\n      return d[k]\n    }).filter(function (val) { return val !== remove })\n\n    if (!val.length) delete data[k]\n    else if (isArray) {\n      debug(isArray, data[k], val)\n      data[k] = val\n    } else data[k] = val[0]\n\n    debug(\"k=%s val=%j\", k, val, data[k])\n  })\n}\n\nfunction validateString (data, k, val) {\n  data[k] = String(val)\n}\n\nfunction validatePath (data, k, val) {\n  if (val === true) return false\n  if (val === null) return true\n\n  val = String(val)\n  var homePattern = process.platform === 'win32' ? /^~(\\/|\\\\)/ : /^~\\//\n  if (val.match(homePattern) && process.env.HOME) {\n    val = path.resolve(process.env.HOME, val.substr(2))\n  }\n  data[k] = path.resolve(String(val))\n  return true\n}\n\nfunction validateNumber (data, k, val) {\n  debug(\"validate Number %j %j %j\", k, val, isNaN(val))\n  if (isNaN(val)) return false\n  data[k] = +val\n}\n\nfunction validateDate (data, k, val) {\n  debug(\"validate Date %j %j %j\", k, val, Date.parse(val))\n  var s = Date.parse(val)\n  if (isNaN(s)) return false\n  data[k] = new Date(val)\n}\n\nfunction validateBoolean (data, k, val) {\n  if (val instanceof Boolean) val = val.valueOf()\n  else if (typeof val === \"string\") {\n    if (!isNaN(val)) val = !!(+val)\n    else if (val === \"null\" || val === \"false\") val = false\n    else val = true\n  } else val = !!val\n  data[k] = val\n}\n\nfunction validateUrl (data, k, val) {\n  val = url.parse(String(val))\n  if (!val.host) return false\n  data[k] = val.href\n}\n\nfunction validateStream (data, k, val) {\n  if (!(val instanceof Stream)) return false\n  data[k] = val\n}\n\nfunction validate (data, k, val, type, typeDefs) {\n  // arrays are lists of types.\n  if (Array.isArray(type)) {\n    for (var i = 0, l = type.length; i < l; i ++) {\n      if (type[i] === Array) continue\n      if (validate(data, k, val, type[i], typeDefs)) return true\n    }\n    delete data[k]\n    return false\n  }\n\n  // an array of anything?\n  if (type === Array) return true\n\n  // NaN is poisonous.  Means that something is not allowed.\n  if (type !== type) {\n    debug(\"Poison NaN\", k, val, type)\n    delete data[k]\n    return false\n  }\n\n  // explicit list of values\n  if (val === type) {\n    debug(\"Explicitly allowed %j\", val)\n    // if (isArray) (data[k] = data[k] || []).push(val)\n    // else data[k] = val\n    data[k] = val\n    return true\n  }\n\n  // now go through the list of typeDefs, validate against each one.\n  var ok = false\n    , types = Object.keys(typeDefs)\n  for (var i = 0, l = types.length; i < l; i ++) {\n    debug(\"test type %j %j %j\", k, val, types[i])\n    var t = typeDefs[types[i]]\n    if (t && type === t.type) {\n      var d = {}\n      ok = false !== t.validate(d, k, val)\n      val = d[k]\n      if (ok) {\n        // if (isArray) (data[k] = data[k] || []).push(val)\n        // else data[k] = val\n        data[k] = val\n        break\n      }\n    }\n  }\n  debug(\"OK? %j (%j %j %j)\", ok, k, val, types[i])\n\n  if (!ok) delete data[k]\n  return ok\n}\n\nfunction parse (args, data, remain, types, shorthands) {\n  debug(\"parse\", args, data, remain)\n\n  var key = null\n    , abbrevs = abbrev(Object.keys(types))\n    , shortAbbr = abbrev(Object.keys(shorthands))\n\n  for (var i = 0; i < args.length; i ++) {\n    var arg = args[i]\n    debug(\"arg\", arg)\n\n    if (arg.match(/^-{2,}$/)) {\n      // done with keys.\n      // the rest are args.\n      remain.push.apply(remain, args.slice(i + 1))\n      args[i] = \"--\"\n      break\n    }\n    var hadEq = false\n    if (arg.charAt(0) === \"-\" && arg.length > 1) {\n      if (arg.indexOf(\"=\") !== -1) {\n        hadEq = true\n        var v = arg.split(\"=\")\n        arg = v.shift()\n        v = v.join(\"=\")\n        args.splice.apply(args, [i, 1].concat([arg, v]))\n      }\n\n      // see if it's a shorthand\n      // if so, splice and back up to re-parse it.\n      var shRes = resolveShort(arg, shorthands, shortAbbr, abbrevs)\n      debug(\"arg=%j shRes=%j\", arg, shRes)\n      if (shRes) {\n        debug(arg, shRes)\n        args.splice.apply(args, [i, 1].concat(shRes))\n        if (arg !== shRes[0]) {\n          i --\n          continue\n        }\n      }\n      arg = arg.replace(/^-+/, \"\")\n      var no = null\n      while (arg.toLowerCase().indexOf(\"no-\") === 0) {\n        no = !no\n        arg = arg.substr(3)\n      }\n\n      if (abbrevs[arg]) arg = abbrevs[arg]\n\n      var isArray = types[arg] === Array ||\n        Array.isArray(types[arg]) && types[arg].indexOf(Array) !== -1\n\n      // allow unknown things to be arrays if specified multiple times.\n      if (!types.hasOwnProperty(arg) && data.hasOwnProperty(arg)) {\n        if (!Array.isArray(data[arg]))\n          data[arg] = [data[arg]]\n        isArray = true\n      }\n\n      var val\n        , la = args[i + 1]\n\n      var isBool = typeof no === 'boolean' ||\n        types[arg] === Boolean ||\n        Array.isArray(types[arg]) && types[arg].indexOf(Boolean) !== -1 ||\n        (typeof types[arg] === 'undefined' && !hadEq) ||\n        (la === \"false\" &&\n         (types[arg] === null ||\n          Array.isArray(types[arg]) && ~types[arg].indexOf(null)))\n\n      if (isBool) {\n        // just set and move along\n        val = !no\n        // however, also support --bool true or --bool false\n        if (la === \"true\" || la === \"false\") {\n          val = JSON.parse(la)\n          la = null\n          if (no) val = !val\n          i ++\n        }\n\n        // also support \"foo\":[Boolean, \"bar\"] and \"--foo bar\"\n        if (Array.isArray(types[arg]) && la) {\n          if (~types[arg].indexOf(la)) {\n            // an explicit type\n            val = la\n            i ++\n          } else if ( la === \"null\" && ~types[arg].indexOf(null) ) {\n            // null allowed\n            val = null\n            i ++\n          } else if ( !la.match(/^-{2,}[^-]/) &&\n                      !isNaN(la) &&\n                      ~types[arg].indexOf(Number) ) {\n            // number\n            val = +la\n            i ++\n          } else if ( !la.match(/^-[^-]/) && ~types[arg].indexOf(String) ) {\n            // string\n            val = la\n            i ++\n          }\n        }\n\n        if (isArray) (data[arg] = data[arg] || []).push(val)\n        else data[arg] = val\n\n        continue\n      }\n\n      if (types[arg] === String && la === undefined)\n        la = \"\"\n\n      if (la && la.match(/^-{2,}$/)) {\n        la = undefined\n        i --\n      }\n\n      val = la === undefined ? true : la\n      if (isArray) (data[arg] = data[arg] || []).push(val)\n      else data[arg] = val\n\n      i ++\n      continue\n    }\n    remain.push(arg)\n  }\n}\n\nfunction resolveShort (arg, shorthands, shortAbbr, abbrevs) {\n  // handle single-char shorthands glommed together, like\n  // npm ls -glp, but only if there is one dash, and only if\n  // all of the chars are single-char shorthands, and it's\n  // not a match to some other abbrev.\n  arg = arg.replace(/^-+/, '')\n\n  // if it's an exact known option, then don't go any further\n  if (abbrevs[arg] === arg)\n    return null\n\n  // if it's an exact known shortopt, same deal\n  if (shorthands[arg]) {\n    // make it an array, if it's a list of words\n    if (shorthands[arg] && !Array.isArray(shorthands[arg]))\n      shorthands[arg] = shorthands[arg].split(/\\s+/)\n\n    return shorthands[arg]\n  }\n\n  // first check to see if this arg is a set of single-char shorthands\n  var singles = shorthands.___singles\n  if (!singles) {\n    singles = Object.keys(shorthands).filter(function (s) {\n      return s.length === 1\n    }).reduce(function (l,r) {\n      l[r] = true\n      return l\n    }, {})\n    shorthands.___singles = singles\n    debug('shorthand singles', singles)\n  }\n\n  var chrs = arg.split(\"\").filter(function (c) {\n    return singles[c]\n  })\n\n  if (chrs.join(\"\") === arg) return chrs.map(function (c) {\n    return shorthands[c]\n  }).reduce(function (l, r) {\n    return l.concat(r)\n  }, [])\n\n\n  // if it's an arg abbrev, and not a literal shorthand, then prefer the arg\n  if (abbrevs[arg] && !shorthands[arg])\n    return null\n\n  // if it's an abbr for a shorthand, then use that\n  if (shortAbbr[arg])\n    arg = shortAbbr[arg]\n\n  // make it an array, if it's a list of words\n  if (shorthands[arg] && !Array.isArray(shorthands[arg]))\n    shorthands[arg] = shorthands[arg].split(/\\s+/)\n\n  return shorthands[arg]\n}\n"]}