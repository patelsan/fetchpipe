{"version":3,"sources":["newlines.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;AAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;;AAEhC,SAAS,iBAAiB,CAAE,MAAM,EAAE;AAClC,MAAI,MAAM,CAAC,iBAAiB,EAAE;;AAE5B,WAAM;GACP;;AAED,MAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAA;;AAExB,QAAM,CAAC,KAAK,GAAG,UAAU,IAAI,EAAE;;AAE7B,QAAI,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAA;;AAExC,QAAI,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;AAC1C,UAAI,GAAG,GAAG,IAAI,CAAC,MAAM;UACjB,CAAC,GAAG,CAAC,CAAA;;AAET,UAAI,OAAO,IAAI,IAAI,QAAQ,EAAE;AAC3B,eAAO,CAAC,GAAC,GAAG,EAAE,CAAC,EAAE,EAAE;AACjB,qBAAW,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;SACxC;OACF,MAAM;;AAEL,eAAO,CAAC,GAAC,GAAG,EAAE,CAAC,EAAE,EAAE;AACjB,qBAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;SAC7B;OACF;KACF;;AAED,WAAO,GAAG,CAAA;GACX,CAAA;;AAED,QAAM,CAAC,iBAAiB,GAAG,IAAI,CAAA;CAChC;AACD,MAAM,CAAC,OAAO,GAAG,iBAAiB,CAAA;;;;;;AAOlC,SAAS,WAAW,CAAE,MAAM,EAAE,CAAC,EAAE;AAC/B,QAAM,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,QAAQ,CAAC,CAAA;AAChC,MAAI,CAAC,KAAK,OAAO,EAAE;AACjB,UAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;GACvB;CACF","file":"newlines-compiled.js","sourcesContent":["\n/**\n * Accepts any node Stream instance and hijacks its \"write()\" function,\n * so that it can count any newlines that get written to the output.\n *\n * When a '\\n' byte is encountered, then a \"newline\" event will be emitted\n * on the stream, with no arguments. It is up to the listeners to determine\n * any necessary deltas required for their use-case.\n *\n * Ex:\n *\n *   var cursor = ansi(process.stdout)\n *     , ln = 0\n *   process.stdout.on('newline', function () {\n *    ln++\n *   })\n */\n\n/**\n * Module dependencies.\n */\n\nvar assert = require('assert')\nvar NEWLINE = '\\n'.charCodeAt(0)\n\nfunction emitNewlineEvents (stream) {\n  if (stream._emittingNewlines) {\n    // already emitting newline events\n    return\n  }\n\n  var write = stream.write\n\n  stream.write = function (data) {\n    // first write the data\n    var rtn = write.apply(stream, arguments)\n\n    if (stream.listeners('newline').length > 0) {\n      var len = data.length\n        , i = 0\n      // now try to calculate any deltas\n      if (typeof data == 'string') {\n        for (; i<len; i++) {\n          processByte(stream, data.charCodeAt(i))\n        }\n      } else {\n        // buffer\n        for (; i<len; i++) {\n          processByte(stream, data[i])\n        }\n      }\n    }\n\n    return rtn\n  }\n\n  stream._emittingNewlines = true\n}\nmodule.exports = emitNewlineEvents\n\n\n/**\n * Processes an individual byte being written to a stream\n */\n\nfunction processByte (stream, b) {\n  assert.equal(typeof b, 'number')\n  if (b === NEWLINE) {\n    stream.emit('newline')\n  }\n}\n"]}