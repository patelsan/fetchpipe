{"version":3,"sources":["utils.js"],"names":[],"mappings":"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","file":"utils-compiled.js","sourcesContent":["'use strict';\nvar fs   = require('fs')\nvar ini  = require('ini')\nvar path = require('path')\nvar stripJsonComments = require('strip-json-comments')\n\nvar parse = exports.parse = function (content) {\n\n  //if it ends in .json or starts with { then it must be json.\n  //must be done this way, because ini accepts everything.\n  //can't just try and parse it and let it throw if it's not ini.\n  //everything is ini. even json with a systax error.\n\n  if(/^\\s*{/.test(content))\n    return JSON.parse(stripJsonComments(content))\n  return ini.parse(content)\n\n}\n\nvar file = exports.file = function () {\n  var args = [].slice.call(arguments).filter(function (arg) { return arg != null })\n\n  //path.join breaks if it's a not a string, so just skip this.\n  for(var i in args)\n    if('string' !== typeof args[i])\n      return\n\n  var file = path.join.apply(null, args)\n  var content\n  try {\n    return fs.readFileSync(file,'utf-8')\n  } catch (err) {\n    return\n  }\n}\n\nvar json = exports.json = function () {\n  var content = file.apply(null, arguments)\n  return content ? parse(content) : null\n}\n\nvar env = exports.env = function (prefix, env) {\n  env = env || process.env\n  var obj = {}\n  var l = prefix.length\n  for(var k in env) {\n    if((k.indexOf(prefix)) === 0) {\n\n      var keypath = k.substring(l).split('__')\n\n      // Trim empty strings from keypath array\n      var _emptyStringIndex\n      while ((_emptyStringIndex=keypath.indexOf('')) > -1) {\n        keypath.splice(_emptyStringIndex, 1)\n      }\n\n      var cursor = obj\n      keypath.forEach(function _buildSubObj(_subkey,i){\n\n        // (check for _subkey first so we ignore empty strings)\n        // (check for cursor to avoid assignment to primitive objects)\n        if (!_subkey || typeof cursor !== 'object')\n          return\n\n        // If this is the last key, just stuff the value in there\n        // Assigns actual value from env variable to final key\n        // (unless it's just an empty string- in that case use the last valid key)\n        if (i === keypath.length-1)\n          cursor[_subkey] = env[k]\n\n\n        // Build sub-object if nothing already exists at the keypath\n        if (cursor[_subkey] === undefined)\n          cursor[_subkey] = {}\n\n        // Increment cursor used to track the object at the current depth\n        cursor = cursor[_subkey]\n\n      })\n\n    }\n\n  }\n\n  return obj\n}\n\nvar find = exports.find = function () {\n  var rel = path.join.apply(null, [].slice.call(arguments))\n\n  function find(start, rel) {\n    var file = path.join(start, rel)\n    try {\n      fs.statSync(file)\n      return file\n    } catch (err) {\n      if(path.dirname(start) !== start) // root\n        return find(path.dirname(start), rel)\n    }\n  }\n  return find(process.cwd(), rel)\n}\n\n"]}