{"version":3,"sources":["test.js"],"names":[],"mappings":";;AACA,IAAI,CAAC,GAAG,IAAI,GAAC,IAAI,CAAC,MAAM,EAAE,CAAA;AAC1B,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;;AAE9B,OAAO,CAAC,GAAG,CAAC,CAAC,GAAC,YAAY,CAAC,GAAG,EAAE,CAAA;;AAEhC,IAAI,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;AAC7B,QAAM,EAAE,IAAI;CACb,CAAC,CAAA;;AAEF,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;;AAEnB,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;AACjC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAA;;AAElC,IAAI,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;AACjC,QAAM,EAAE,IAAI;CACb,EAAE;AACD,QAAM,EAAE,KAAK;AACb,WAAS,EAAE,EAAE;AACb,MAAI,EAAE;AACJ,UAAM,EAAE,EAAE;AACV,UAAM,EAAE,CAAC,aAAa,EAAE,aAAa,EAAE,IAAI,CAAC;AAC5C,YAAQ,EAAE,CAAC,aAAa,EAAE,gBAAgB,CAAC;GAC5C;CACF,CAAC,CAAA;;AAEF,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA;;AAEvB,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;AACtC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAA;;AAEtC,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AACtB,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAC1B,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;;AAE1C,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,CACvB,GAAG,EACD,2BAA2B,EAC3B,kBAAkB,EAClB,0BAA0B,EAC1B,iBAAiB,EACnB,GAAG,CACJ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;AAEd,IAAI,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;AACpC,QAAM,EAAE,IAAI;CACb,CAAC,CAAA;;AAEF,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;;AAEtB,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAA;;AAE1B,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;AACzC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,EAAE,EAAE,CAAC,CAAA;;AAEzC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;AAC1C,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;AAC7C,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAA","file":"test-compiled.js","sourcesContent":["\nvar n = 'rc'+Math.random()\nvar assert = require('assert')\n\nprocess.env[n+'_envOption'] = 42\n\nvar config = require('../')(n, {\n  option: true\n})\n\nconsole.log(config)\n\nassert.equal(config.option, true)\nassert.equal(config.envOption, 42)\n\nvar customArgv = require('../')(n, {\n  option: true\n}, { // nopt-like argv\n  option: false,\n  envOption: 24,\n  argv: {\n    remain: [],\n    cooked: ['--no-option', '--envOption', '24'],\n    original: ['--no-option', '--envOption=24']\n  }\n})\n\nconsole.log(customArgv)\n\nassert.equal(customArgv.option, false)\nassert.equal(customArgv.envOption, 24)\n\nvar fs = require('fs')\nvar path = require('path')\nvar jsonrc = path.resolve('.' + n + 'rc');\n\nfs.writeFileSync(jsonrc, [\n  '{',\n    '// json overrides default',\n    '\"option\": false,',\n    '/* env overrides json */',\n    '\"envOption\": 24',\n  '}'\n].join('\\n'));\n\nvar commentedJSON = require('../')(n, {\n  option: true\n})\n\nfs.unlinkSync(jsonrc);\n\nconsole.log(commentedJSON)\n\nassert.equal(commentedJSON.option, false)\nassert.equal(commentedJSON.envOption, 42)\n\nassert.equal(commentedJSON.config, jsonrc)\nassert.equal(commentedJSON.configs.length, 1)\nassert.equal(commentedJSON.configs[0], jsonrc)\n"]}