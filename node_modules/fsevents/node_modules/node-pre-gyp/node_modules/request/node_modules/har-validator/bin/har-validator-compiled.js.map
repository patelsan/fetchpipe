{"version":3,"sources":["har-validator"],"names":[],"mappings":";;AAEA,YAAY,CAAA;;AAEZ,IAAI,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;;AAEjC,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAA;AAC5B,IAAI,GAAG,GAAG,OAAO,CAAC,WAAW,CAAC,CAAA;AAC9B,IAAI,EAAE,GAAG,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAA;AAC5C,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAC1B,IAAI,GAAG,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAA;AACpC,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAA;;AAElD,GAAG,CACA,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CACpB,KAAK,CAAC,uBAAuB,CAAC,CAC9B,MAAM,CAAC,qBAAqB,EAAE,wDAAwD,CAAC,CACvF,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;;AAEtB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE;AACpB,KAAG,CAAC,IAAI,EAAE,CAAA;CACX;;AAED,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;AACf,KAAG,CAAC,MAAM,GAAG,KAAK,CAAA;CACnB;;AAED,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,QAAQ,EAAE;AAC/B,MAAI,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAA;;AAEvD,IAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CACvB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAChB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,GAAG,OAAO,CAAC,CAAC,CACpC,IAAI,CAAC,YAAY;AAChB,WAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAA;GACxD,CAAC,SACI,CAAC,WAAW,EAAE,UAAU,CAAC,EAAE;AAC/B,WAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAA;GAC7F,CAAC,SACI,CAAC,UAAU,CAAC,EAAE;AAClB,KAAC,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,GAAG,EAAE;AAC1B,aAAO,CAAC,KAAK,CAAC,wCAAwC,EAAE,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAA;KACrK,CAAC,CAAA;GACH,CAAC,CAAA;CACL,CAAC,CAAA","file":"har-validator-compiled.js","sourcesContent":["#!/usr/bin/env node\n\n'use strict'\n\nvar Promise = require('bluebird')\n\nvar chalk = require('chalk')\nvar cmd = require('commander')\nvar fs = Promise.promisifyAll(require('fs'))\nvar path = require('path')\nvar pkg = require('../package.json')\nvar validate = Promise.promisifyAll(require('..'))\n\ncmd\n  .version(pkg.version)\n  .usage('[options] <files ...>')\n  .option('-s, --schema [name]', 'validate schema name (log, request, response, etc ...)')\n  .parse(process.argv)\n\nif (!cmd.args.length) {\n  cmd.help()\n}\n\nif (!cmd.schema) {\n  cmd.schema = 'har'\n}\n\ncmd.args.map(function (fileName) {\n  var file = chalk.yellow.italic(path.basename(fileName))\n\n  fs.readFileAsync(fileName)\n    .then(JSON.parse)\n    .then(validate[cmd.schema + 'Async'])\n    .then(function () {\n      console.log('%s [%s] is valid', chalk.green('✓'), file)\n    })\n    .catch(SyntaxError, function (e) {\n      console.error('%s [%s] failed to read JSON: %s', chalk.red('✖'), file, chalk.red(e.message))\n    })\n    .catch(function (e) {\n      e.errors.map(function (err) {\n        console.error('%s [%s] failed validation: (%s: %s) %s', chalk.red('✖'), file, chalk.cyan.italic(err.field), chalk.magenta.italic(err.value), chalk.red(err.message))\n      })\n    })\n})\n"]}