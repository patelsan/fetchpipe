{"version":3,"sources":["assert.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,MAAM,CAAC,OAAO,GAAG,CAAC,YAAU;AAC5B,QAAI,cAAc,GAAG,CAAC,YAAW;AAC7B,iBAAS,cAAc,CAAC,CAAC,EAAE;AACvB,gBAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;AACrB,gBAAI,CAAC,OAAO,GAAG,CAAC,CAAC;AACjB,gBAAI,CAAC,IAAI,GAAG,gBAAgB,CAAC;SAChC;AACD,sBAAc,CAAC,SAAS,GAAG,IAAI,KAAK,EAAE,CAAC;AACvC,sBAAc,CAAC,SAAS,CAAC,WAAW,GAAG,cAAc,CAAC;AACtD,sBAAc,CAAC,SAAS,CAAC,YAAY,GAAG,KAAK,CAAC;AAC9C,eAAO,cAAc,CAAC;KACzB,CAAA,EAAG,CAAC;;AAEL,aAAS,SAAS,CAAC,IAAI,EAAE;AACrB,YAAI,MAAM,GAAG,EAAE,CAAC;AAChB,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;AAC7D,eAAO,MAAM,CAAC;KACjB;;AAED,aAAS,YAAY,CAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE;AAC1C,YAAI;AACA,gBAAI,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;AAC7B,gBAAI,eAAe,GAAG,MAAM,CAAC;AAC7B,2BAAe,CAAC,IAAI,CAAC,SAAS,GACtB,QAAQ,GAAG,GAAG,GAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;AACjD,gBAAI,EAAE,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;AAC/C,mBAAO,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAC/B,CAAC,OAAO,CAAC,EAAE;AACR,gBAAI,EAAE,CAAC,YAAY,WAAW,CAAA,AAAC,EAAE;AAC7B,sBAAM,CAAC,CAAC;aACX,MAAM;AACH,uBAAO,MAAM,CAAC;aACjB;SACJ;KACJ;;AAED,WAAO,SAAS,MAAM,CAAC,QAAQ,EAAE,OAAO,EAAE;AACtC,YAAI,QAAQ,KAAK,IAAI,EAAE,OAAO;;AAE9B,YAAI,OAAO,QAAQ,KAAK,QAAQ,IAC5B,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;AAC5B,gBAAI,cAAc,GAAG,QAAQ,CAAC;AAC9B,gBAAI,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,IAAI,GAAG,IAAI,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,AAAC,KAAI,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,EAAE,EAAE,GAAG,EAAE;AAAC,oBAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;aAAC;AACpI,gBAAI,YAAY,CAAC,cAAc,EAAE,IAAI,EAAE,OAAO,CAAC,KAAK,OAAO,EAAE,OAAO;AACpE,mBAAO,GAAI,cAAc,GAAG,OAAO,GAAG,OAAO,AAAC,CAAC;SAClD;;AAED,YAAI,GAAG,GAAG,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC;AACtC,YAAI,KAAK,CAAC,iBAAiB,EAAE;AACzB,iBAAK,CAAC,iBAAiB,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;SACxC;AACD,cAAM,GAAG,CAAC;KACb,CAAC;CACD,CAAA,EAAG,CAAC","file":"assert-compiled.js","sourcesContent":["\"use strict\";\nmodule.exports = (function(){\nvar AssertionError = (function() {\n    function AssertionError(a) {\n        this.constructor$(a);\n        this.message = a;\n        this.name = \"AssertionError\";\n    }\n    AssertionError.prototype = new Error();\n    AssertionError.prototype.constructor = AssertionError;\n    AssertionError.prototype.constructor$ = Error;\n    return AssertionError;\n})();\n\nfunction getParams(args) {\n    var params = [];\n    for (var i = 0; i < args.length; ++i) params.push(\"arg\" + i);\n    return params;\n}\n\nfunction nativeAssert(callName, args, expect) {\n    try {\n        var params = getParams(args);\n        var constructorArgs = params;\n        constructorArgs.push(\"return \" +\n                callName + \"(\"+ params.join(\",\") + \");\");\n        var fn = Function.apply(null, constructorArgs);\n        return fn.apply(null, args);\n    } catch (e) {\n        if (!(e instanceof SyntaxError)) {\n            throw e;\n        } else {\n            return expect;\n        }\n    }\n}\n\nreturn function assert(boolExpr, message) {\n    if (boolExpr === true) return;\n\n    if (typeof boolExpr === \"string\" &&\n        boolExpr.charAt(0) === \"%\") {\n        var nativeCallName = boolExpr;\n        var $_len = arguments.length;var args = new Array($_len - 2); for(var $_i = 2; $_i < $_len; ++$_i) {args[$_i - 2] = arguments[$_i];}\n        if (nativeAssert(nativeCallName, args, message) === message) return;\n        message = (nativeCallName + \" !== \" + message);\n    }\n\n    var ret = new AssertionError(message);\n    if (Error.captureStackTrace) {\n        Error.captureStackTrace(ret, assert);\n    }\n    throw ret;\n};\n})();\n"]}