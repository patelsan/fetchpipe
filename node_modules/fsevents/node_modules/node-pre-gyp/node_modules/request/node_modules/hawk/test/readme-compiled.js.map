{"version":3,"sources":["readme.js"],"names":[],"mappings":"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","file":"readme-compiled.js","sourcesContent":["// Load modules\n\nvar Code = require('code');\nvar Hawk = require('../lib');\nvar Hoek = require('hoek');\nvar Lab = require('lab');\n\n\n// Declare internals\n\nvar internals = {};\n\n\n// Test shortcuts\n\nvar lab = exports.lab = Lab.script();\nvar describe = lab.experiment;\nvar it = lab.test;\nvar expect = Code.expect;\n\n\ndescribe('README', function () {\n\n    describe('core', function () {\n\n        var credentials = {\n            id: 'dh37fgj492je',\n            key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n            algorithm: 'sha256'\n        };\n\n        var options = {\n            credentials: credentials,\n            timestamp: 1353832234,\n            nonce: 'j4h3g2',\n            ext: 'some-app-ext-data'\n        };\n\n        it('should generate a header protocol example', function (done) {\n\n            var header = Hawk.client.header('http://example.com:8000/resource/1?b=1&a=2', 'GET', options).field;\n\n            expect(header).to.equal('Hawk id=\"dh37fgj492je\", ts=\"1353832234\", nonce=\"j4h3g2\", ext=\"some-app-ext-data\", mac=\"6R4rV5iE+NPoym+WwjeHzjAGXUtLNIxmo1vpMofpLAE=\"');\n            done();\n        });\n\n        it('should generate a normalized string protocol example', function (done) {\n\n            var normalized = Hawk.crypto.generateNormalizedString('header', {\n                credentials: credentials,\n                ts: options.timestamp,\n                nonce: options.nonce,\n                method: 'GET',\n                resource: '/resource?a=1&b=2',\n                host: 'example.com',\n                port: 8000,\n                ext: options.ext\n            });\n\n            expect(normalized).to.equal('hawk.1.header\\n1353832234\\nj4h3g2\\nGET\\n/resource?a=1&b=2\\nexample.com\\n8000\\n\\nsome-app-ext-data\\n');\n            done();\n        });\n\n        var payloadOptions = Hoek.clone(options);\n        payloadOptions.payload = 'Thank you for flying Hawk';\n        payloadOptions.contentType = 'text/plain';\n\n        it('should generate a header protocol example (with payload)', function (done) {\n\n            var header = Hawk.client.header('http://example.com:8000/resource/1?b=1&a=2', 'POST', payloadOptions).field;\n\n            expect(header).to.equal('Hawk id=\"dh37fgj492je\", ts=\"1353832234\", nonce=\"j4h3g2\", hash=\"Yi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY=\", ext=\"some-app-ext-data\", mac=\"aSe1DERmZuRl3pI36/9BdZmnErTw3sNzOOAUlfeKjVw=\"');\n            done();\n        });\n\n        it('should generate a normalized string protocol example (with payload)', function (done) {\n\n            var normalized = Hawk.crypto.generateNormalizedString('header', {\n                credentials: credentials,\n                ts: options.timestamp,\n                nonce: options.nonce,\n                method: 'POST',\n                resource: '/resource?a=1&b=2',\n                host: 'example.com',\n                port: 8000,\n                hash: Hawk.crypto.calculatePayloadHash(payloadOptions.payload, credentials.algorithm, payloadOptions.contentType),\n                ext: options.ext\n            });\n\n            expect(normalized).to.equal('hawk.1.header\\n1353832234\\nj4h3g2\\nPOST\\n/resource?a=1&b=2\\nexample.com\\n8000\\nYi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY=\\nsome-app-ext-data\\n');\n            done();\n        });\n    });\n});\n\n"]}