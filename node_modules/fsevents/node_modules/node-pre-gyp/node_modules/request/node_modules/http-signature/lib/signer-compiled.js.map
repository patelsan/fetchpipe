{"version":3,"sources":["signer.js"],"names":[],"mappings":"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","file":"signer-compiled.js","sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar http = require('http');\n\nvar sprintf = require('util').format;\n\n\n\n///--- Globals\n\nvar Algorithms = {\n  'rsa-sha1': true,\n  'rsa-sha256': true,\n  'rsa-sha512': true,\n  'dsa-sha1': true,\n  'hmac-sha1': true,\n  'hmac-sha256': true,\n  'hmac-sha512': true\n};\n\nvar Authorization =\n  'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\n\n\n\n///--- Specific Errors\n\nfunction MissingHeaderError(message) {\n    this.name = 'MissingHeaderError';\n    this.message = message;\n    this.stack = (new Error()).stack;\n}\nMissingHeaderError.prototype = new Error();\n\n\nfunction InvalidAlgorithmError(message) {\n    this.name = 'InvalidAlgorithmError';\n    this.message = message;\n    this.stack = (new Error()).stack;\n}\nInvalidAlgorithmError.prototype = new Error();\n\n\n\n///--- Internal Functions\n\nfunction _pad(val) {\n  if (parseInt(val, 10) < 10) {\n    val = '0' + val;\n  }\n  return val;\n}\n\n\nfunction _rfc1123() {\n  var date = new Date();\n\n  var months = ['Jan',\n                'Feb',\n                'Mar',\n                'Apr',\n                'May',\n                'Jun',\n                'Jul',\n                'Aug',\n                'Sep',\n                'Oct',\n                'Nov',\n                'Dec'];\n  var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  return days[date.getUTCDay()] + ', ' +\n    _pad(date.getUTCDate()) + ' ' +\n    months[date.getUTCMonth()] + ' ' +\n    date.getUTCFullYear() + ' ' +\n    _pad(date.getUTCHours()) + ':' +\n    _pad(date.getUTCMinutes()) + ':' +\n    _pad(date.getUTCSeconds()) +\n    ' GMT';\n}\n\n\n\n///--- Exported API\n\nmodule.exports = {\n\n  /**\n   * Adds an 'Authorization' header to an http.ClientRequest object.\n   *\n   * Note that this API will add a Date header if it's not already set. Any\n   * other headers in the options.headers array MUST be present, or this\n   * will throw.\n   *\n   * You shouldn't need to check the return type; it's just there if you want\n   * to be pedantic.\n   *\n   * @param {Object} request an instance of http.ClientRequest.\n   * @param {Object} options signing parameters object:\n   *                   - {String} keyId required.\n   *                   - {String} key required (either a PEM or HMAC key).\n   *                   - {Array} headers optional; defaults to ['date'].\n   *                   - {String} algorithm optional; defaults to 'rsa-sha256'.\n   *                   - {String} httpVersion optional; defaults to '1.1'.\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\n   * @throws {TypeError} on bad parameter types (input).\n   * @throws {InvalidAlgorithmError} if algorithm was bad.\n   * @throws {MissingHeaderError} if a header to be signed was specified but\n   *                              was not present.\n   */\n  signRequest: function signRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(options, 'options');\n    assert.optionalString(options.algorithm, 'options.algorithm');\n    assert.string(options.keyId, 'options.keyId');\n    assert.optionalArrayOfString(options.headers, 'options.headers');\n    assert.optionalString(options.httpVersion, 'options.httpVersion');\n\n    if (!request.getHeader('Date'))\n      request.setHeader('Date', _rfc1123());\n    if (!options.headers)\n      options.headers = ['date'];\n    if (!options.algorithm)\n      options.algorithm = 'rsa-sha256';\n    if (!options.httpVersion)\n      options.httpVersion = '1.1';\n\n    options.algorithm = options.algorithm.toLowerCase();\n\n    if (!Algorithms[options.algorithm])\n      throw new InvalidAlgorithmError(options.algorithm + ' is not supported');\n\n    var i;\n    var stringToSign = '';\n    for (i = 0; i < options.headers.length; i++) {\n      if (typeof (options.headers[i]) !== 'string')\n        throw new TypeError('options.headers must be an array of Strings');\n\n      var h = options.headers[i].toLowerCase();\n\n      if (h !== 'request-line') {\n        var value = request.getHeader(h);\n        if (!value) {\n          throw new MissingHeaderError(h + ' was not in the request');\n        }\n        stringToSign += h + ': ' + value;\n      } else {\n        stringToSign +=\n          request.method + ' ' + request.path + ' HTTP/' + options.httpVersion;\n      }\n\n      if ((i + 1) < options.headers.length)\n        stringToSign += '\\n';\n    }\n\n    var alg = options.algorithm.match(/(hmac|rsa)-(\\w+)/);\n    var signature;\n    if (alg[1] === 'hmac') {\n      var hmac = crypto.createHmac(alg[2].toUpperCase(), options.key);\n      hmac.update(stringToSign);\n      signature = hmac.digest('base64');\n    } else {\n      var signer = crypto.createSign(options.algorithm.toUpperCase());\n      signer.update(stringToSign);\n      signature = signer.sign(options.key, 'base64');\n    }\n\n    request.setHeader('Authorization', sprintf(Authorization,\n                                               options.keyId,\n                                               options.algorithm,\n                                               options.headers.join(' '),\n                                               signature));\n\n    return true;\n  }\n\n};\n"]}