{"version":3,"sources":["util.js"],"names":[],"mappings":"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","file":"util-compiled.js","sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\n\nvar asn1 = require('asn1');\nvar ctype = require('ctype');\n\n\n\n///--- Helpers\n\nfunction readNext(buffer, offset) {\n  var len = ctype.ruint32(buffer, 'big', offset);\n  offset += 4;\n\n  var newOffset = offset + len;\n\n  return {\n    data: buffer.slice(offset, newOffset),\n    offset: newOffset\n  };\n}\n\n\nfunction writeInt(writer, buffer) {\n  writer.writeByte(0x02); // ASN1.Integer\n  writer.writeLength(buffer.length);\n\n  for (var i = 0; i < buffer.length; i++)\n    writer.writeByte(buffer[i]);\n\n  return writer;\n}\n\n\nfunction rsaToPEM(key) {\n  var buffer;\n  var der;\n  var exponent;\n  var i;\n  var modulus;\n  var newKey = '';\n  var offset = 0;\n  var type;\n  var tmp;\n\n  try {\n    buffer = new Buffer(key.split(' ')[1], 'base64');\n\n    tmp = readNext(buffer, offset);\n    type = tmp.data.toString();\n    offset = tmp.offset;\n\n    if (type !== 'ssh-rsa')\n      throw new Error('Invalid ssh key type: ' + type);\n\n    tmp = readNext(buffer, offset);\n    exponent = tmp.data;\n    offset = tmp.offset;\n\n    tmp = readNext(buffer, offset);\n    modulus = tmp.data;\n  } catch (e) {\n    throw new Error('Invalid ssh key: ' + key);\n  }\n\n  // DER is a subset of BER\n  der = new asn1.BerWriter();\n\n  der.startSequence();\n\n  der.startSequence();\n  der.writeOID('1.2.840.113549.1.1.1');\n  der.writeNull();\n  der.endSequence();\n\n  der.startSequence(0x03); // bit string\n  der.writeByte(0x00);\n\n  // Actual key\n  der.startSequence();\n  writeInt(der, modulus);\n  writeInt(der, exponent);\n  der.endSequence();\n\n  // bit string\n  der.endSequence();\n\n  der.endSequence();\n\n  tmp = der.buffer.toString('base64');\n  for (i = 0; i < tmp.length; i++) {\n    if ((i % 64) === 0)\n      newKey += '\\n';\n    newKey += tmp.charAt(i);\n  }\n\n  if (!/\\\\n$/.test(newKey))\n    newKey += '\\n';\n\n  return '-----BEGIN PUBLIC KEY-----' + newKey + '-----END PUBLIC KEY-----\\n';\n}\n\n\nfunction dsaToPEM(key) {\n  var buffer;\n  var offset = 0;\n  var tmp;\n  var der;\n  var newKey = '';\n\n  var type;\n  var p;\n  var q;\n  var g;\n  var y;\n\n  try {\n    buffer = new Buffer(key.split(' ')[1], 'base64');\n\n    tmp = readNext(buffer, offset);\n    type = tmp.data.toString();\n    offset = tmp.offset;\n\n    /* JSSTYLED */\n    if (!/^ssh-ds[as].*/.test(type))\n      throw new Error('Invalid ssh key type: ' + type);\n\n    tmp = readNext(buffer, offset);\n    p = tmp.data;\n    offset = tmp.offset;\n\n    tmp = readNext(buffer, offset);\n    q = tmp.data;\n    offset = tmp.offset;\n\n    tmp = readNext(buffer, offset);\n    g = tmp.data;\n    offset = tmp.offset;\n\n    tmp = readNext(buffer, offset);\n    y = tmp.data;\n  } catch (e) {\n    console.log(e.stack);\n    throw new Error('Invalid ssh key: ' + key);\n  }\n\n  // DER is a subset of BER\n  der = new asn1.BerWriter();\n\n  der.startSequence();\n\n  der.startSequence();\n  der.writeOID('1.2.840.10040.4.1');\n\n  der.startSequence();\n  writeInt(der, p);\n  writeInt(der, q);\n  writeInt(der, g);\n  der.endSequence();\n\n  der.endSequence();\n\n  der.startSequence(0x03); // bit string\n  der.writeByte(0x00);\n  writeInt(der, y);\n  der.endSequence();\n\n  der.endSequence();\n\n  tmp = der.buffer.toString('base64');\n  for (var i = 0; i < tmp.length; i++) {\n    if ((i % 64) === 0)\n      newKey += '\\n';\n    newKey += tmp.charAt(i);\n  }\n\n  if (!/\\\\n$/.test(newKey))\n    newKey += '\\n';\n\n  return '-----BEGIN PUBLIC KEY-----' + newKey + '-----END PUBLIC KEY-----\\n';\n}\n\n\n///--- API\n\nmodule.exports = {\n\n  /**\n   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.\n   *\n   * The intent of this module is to interoperate with OpenSSL only,\n   * specifically the node crypto module's `verify` method.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} PEM encoded form of the RSA public key.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} on invalid ssh key formatted data.\n   */\n  sshKeyToPEM: function sshKeyToPEM(key) {\n    assert.string(key, 'ssh_key');\n\n    /* JSSTYLED */\n    if (/^ssh-rsa.*/.test(key))\n      return rsaToPEM(key);\n\n    /* JSSTYLED */\n    if (/^ssh-ds[as].*/.test(key))\n      return dsaToPEM(key);\n\n    throw new Error('Only RSA and DSA public keys are allowed');\n  },\n\n\n  /**\n   * Generates an OpenSSH fingerprint from an ssh public key.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} key fingerprint.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} if what you passed doesn't look like an ssh public key.\n   */\n  fingerprint: function fingerprint(key) {\n    assert.string(key, 'ssh_key');\n\n    var pieces = key.split(' ');\n    if (!pieces || !pieces.length || pieces.length < 2)\n      throw new Error('invalid ssh key');\n\n    var data = new Buffer(pieces[1], 'base64');\n\n    var hash = crypto.createHash('md5');\n    hash.update(data);\n    var digest = hash.digest('hex');\n\n    var fp = '';\n    for (var i = 0; i < digest.length; i++) {\n      if (i && i % 2 === 0)\n        fp += ':';\n\n      fp += digest[i];\n    }\n\n    return fp;\n  },\n\n  /**\n   * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)\n   *\n   * The reverse of the above function.\n   */\n  pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {\n    assert.equal('string', typeof (pem), 'typeof pem');\n\n    // chop off the BEGIN PUBLIC KEY and END PUBLIC KEY portion\n    var cleaned = pem.split('\\n').slice(1, -2).join('');\n\n    var buf = new Buffer(cleaned, 'base64');\n\n    var der = new asn1.BerReader(buf);\n\n    der.readSequence();\n    der.readSequence();\n\n    var oid = der.readOID();\n    assert.equal(oid, '1.2.840.113549.1.1.1', 'pem not in RSA format');\n\n    // Null -- XXX this probably isn't good practice\n    der.readByte();\n    der.readByte();\n\n    // bit string sequence\n    der.readSequence(0x03);\n    der.readByte();\n    der.readSequence();\n\n    // modulus\n    assert.equal(der.peek(), asn1.Ber.Integer, 'modulus not an integer');\n    der._offset = der.readLength(der.offset + 1);\n    var modulus = der._buf.slice(der.offset, der.offset + der.length);\n    der._offset += der.length;\n\n    // exponent\n    assert.equal(der.peek(), asn1.Ber.Integer, 'exponent not an integer');\n    der._offset = der.readLength(der.offset + 1);\n    var exponent = der._buf.slice(der.offset, der.offset + der.length);\n    der._offset += der.length;\n\n    // now, make the key\n    var type = new Buffer('ssh-rsa');\n    var buffer = new Buffer(4 + type.length + 4 + modulus.length +\n      4 + exponent.length);\n    var i = 0;\n    buffer.writeUInt32BE(type.length, i);     i += 4;\n    type.copy(buffer, i);                     i += type.length;\n    buffer.writeUInt32BE(exponent.length, i); i += 4;\n    exponent.copy(buffer, i);                 i += exponent.length;\n    buffer.writeUInt32BE(modulus.length, i);  i += 4;\n    modulus.copy(buffer, i);                  i += modulus.length;\n\n    var s = (type.toString() + ' ' + buffer.toString('base64') + ' ' +\n      (comment || ''));\n    return s;\n  }\n};\n"]}