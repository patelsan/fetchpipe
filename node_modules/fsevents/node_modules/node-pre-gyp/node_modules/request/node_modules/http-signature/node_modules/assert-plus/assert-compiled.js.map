{"version":3,"sources":["assert.js"],"names":[],"mappings":"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","file":"assert-compiled.js","sourcesContent":["// Copyright (c) 2012, Mark Cavage. All rights reserved.\n\nvar assert = require('assert');\nvar Stream = require('stream').Stream;\nvar util = require('util');\n\n\n\n///--- Globals\n\nvar NDEBUG = process.env.NODE_NDEBUG || false;\nvar UUID_REGEXP = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;\n\n\n\n///--- Messages\n\nvar ARRAY_TYPE_REQUIRED = '%s ([%s]) required';\nvar TYPE_REQUIRED = '%s (%s) is required';\n\n\n\n///--- Internal\n\nfunction capitalize(str) {\n        return (str.charAt(0).toUpperCase() + str.slice(1));\n}\n\nfunction uncapitalize(str) {\n        return (str.charAt(0).toLowerCase() + str.slice(1));\n}\n\nfunction _() {\n        return (util.format.apply(util, arguments));\n}\n\n\nfunction _assert(arg, type, name, stackFunc) {\n        if (!NDEBUG) {\n                name = name || type;\n                stackFunc = stackFunc || _assert.caller;\n                var t = typeof (arg);\n\n                if (t !== type) {\n                        throw new assert.AssertionError({\n                                message: _(TYPE_REQUIRED, name, type),\n                                actual: t,\n                                expected: type,\n                                operator: '===',\n                                stackStartFunction: stackFunc\n                        });\n                }\n        }\n}\n\n\nfunction _instanceof(arg, type, name, stackFunc) {\n        if (!NDEBUG) {\n                name = name || type;\n                stackFunc = stackFunc || _instanceof.caller;\n\n                if (!(arg instanceof type)) {\n                        throw new assert.AssertionError({\n                                message: _(TYPE_REQUIRED, name, type.name),\n                                actual: _getClass(arg),\n                                expected: type.name,\n                                operator: 'instanceof',\n                                stackStartFunction: stackFunc\n                        });\n                }\n        }\n}\n\nfunction _getClass(object) {\n        return (Object.prototype.toString.call(object).slice(8, -1));\n};\n\n\n\n///--- API\n\nfunction array(arr, type, name) {\n        if (!NDEBUG) {\n                name = name || type;\n\n                if (!Array.isArray(arr)) {\n                        throw new assert.AssertionError({\n                                message: _(ARRAY_TYPE_REQUIRED, name, type),\n                                actual: typeof (arr),\n                                expected: 'array',\n                                operator: 'Array.isArray',\n                                stackStartFunction: array.caller\n                        });\n                }\n\n                for (var i = 0; i < arr.length; i++) {\n                        _assert(arr[i], type, name, array);\n                }\n        }\n}\n\n\nfunction bool(arg, name) {\n        _assert(arg, 'boolean', name, bool);\n}\n\n\nfunction buffer(arg, name) {\n        if (!Buffer.isBuffer(arg)) {\n                throw new assert.AssertionError({\n                        message: _(TYPE_REQUIRED, name || '', 'Buffer'),\n                        actual: typeof (arg),\n                        expected: 'buffer',\n                        operator: 'Buffer.isBuffer',\n                        stackStartFunction: buffer\n                });\n        }\n}\n\n\nfunction func(arg, name) {\n        _assert(arg, 'function', name);\n}\n\n\nfunction number(arg, name) {\n        _assert(arg, 'number', name);\n        if (!NDEBUG && (isNaN(arg) || !isFinite(arg))) {\n                throw new assert.AssertionError({\n                        message: _(TYPE_REQUIRED, name, 'number'),\n                        actual: arg,\n                        expected: 'number',\n                        operator: 'isNaN',\n                        stackStartFunction: number\n                });\n        }\n}\n\n\nfunction object(arg, name) {\n        _assert(arg, 'object', name);\n}\n\n\nfunction stream(arg, name) {\n        _instanceof(arg, Stream, name);\n}\n\n\nfunction date(arg, name) {\n        _instanceof(arg, Date, name);\n}\n\nfunction regexp(arg, name) {\n        _instanceof(arg, RegExp, name);\n}\n\n\nfunction string(arg, name) {\n        _assert(arg, 'string', name);\n}\n\n\nfunction uuid(arg, name) {\n        string(arg, name);\n        if (!NDEBUG && !UUID_REGEXP.test(arg)) {\n                throw new assert.AssertionError({\n                        message: _(TYPE_REQUIRED, name, 'uuid'),\n                        actual: 'string',\n                        expected: 'uuid',\n                        operator: 'test',\n                        stackStartFunction: uuid\n                });\n        }\n}\n\n\n///--- Exports\n\nmodule.exports = {\n        bool: bool,\n        buffer: buffer,\n        date: date,\n        func: func,\n        number: number,\n        object: object,\n        regexp: regexp,\n        stream: stream,\n        string: string,\n        uuid: uuid\n};\n\n\nObject.keys(module.exports).forEach(function (k) {\n        if (k === 'buffer')\n                return;\n\n        var name = 'arrayOf' + capitalize(k);\n\n        if (k === 'bool')\n                k = 'boolean';\n        if (k === 'func')\n                k = 'function';\n        module.exports[name] = function (arg, name) {\n                array(arg, k, name);\n        };\n});\n\nObject.keys(module.exports).forEach(function (k) {\n        var _name = 'optional' + capitalize(k);\n        var s = uncapitalize(k.replace('arrayOf', ''));\n        if (s === 'bool')\n                s = 'boolean';\n        if (s === 'func')\n                s = 'function';\n\n        if (k.indexOf('arrayOf') !== -1) {\n          module.exports[_name] = function (arg, name) {\n                  if (!NDEBUG && arg !== undefined) {\n                          array(arg, s, name);\n                  }\n          };\n        } else {\n          module.exports[_name] = function (arg, name) {\n                  if (!NDEBUG && arg !== undefined) {\n                          _assert(arg, s, name);\n                  }\n          };\n        }\n});\n\n\n// Reexport built-in assertions\nObject.keys(assert).forEach(function (k) {\n        if (k === 'AssertionError') {\n                module.exports[k] = assert[k];\n                return;\n        }\n\n        module.exports[k] = function () {\n                if (!NDEBUG) {\n                        assert[k].apply(assert[k], arguments);\n                }\n        };\n});\n"]}