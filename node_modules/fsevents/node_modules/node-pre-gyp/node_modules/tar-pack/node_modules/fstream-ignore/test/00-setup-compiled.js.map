{"version":3,"sources":["00-setup.js"],"names":[],"mappings":"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","file":"00-setup-compiled.js","sourcesContent":["// The test fixtures work like this:\n// These dirs are all created: {a,b,c}/{a,b,c}/{a,b,c}/\n// in each one, these files are created:\n// {.,}{a,b,c}{a,b,c}{a,b,c}\n//\n// So, there'll be a/b/c/abc, a/b/c/aba, etc., and dot-versions of each.\n//\n// Each test then writes their own ignore file rules for their purposes,\n// and is responsible for removing them afterwards.\n\nvar mkdirp = require(\"mkdirp\")\nvar path = require(\"path\")\nvar i = 0\nvar tap = require(\"tap\")\nvar fs = require(\"fs\")\nvar rimraf = require(\"rimraf\")\nvar fixtures = path.resolve(__dirname, \"fixtures\")\n\nvar chars = ['a', 'b', 'c']\nvar dirs = []\n\nfor (var i = 0; i < 3; i ++) {\n  for (var j = 0; j < 3; j ++) {\n    for (var k = 0; k < 3; k ++) {\n      dirs.push(chars[i] + '/' + chars[j] + '/' + chars[k])\n    }\n  }\n}\n\nvar files = []\n\nfor (var i = 0; i < 3; i ++) {\n  for (var j = 0; j < 3; j ++) {\n    for (var k = 0; k < 3; k ++) {\n      files.push(chars[i] + chars[j] + chars[k])\n      files.push('.' + chars[i] + chars[j] + chars[k])\n    }\n  }\n}\n\ntap.test(\"remove fixtures\", function (t) {\n  rimraf(path.resolve(__dirname, \"fixtures\"), function (er) {\n    t.ifError(er, \"remove fixtures\")\n    t.end()\n  })\n})\n\ntap.test(\"create fixtures\", function (t) {\n  dirs.forEach(function (dir) {\n    dir = path.resolve(fixtures, dir)\n    t.test(\"mkdir \"+dir, function (t) {\n      mkdirp(dir, function (er) {\n        t.ifError(er, \"mkdir \"+dir)\n        if (er) return t.end()\n\n        files.forEach(function (file) {\n          file = path.resolve(dir, file)\n          t.test(\"writeFile \"+file, function (t) {\n            fs.writeFile(file, path.basename(file), function (er) {\n              t.ifError(er, \"writing \"+file)\n              t.end()\n            })\n          })\n        })\n        t.end()\n      })\n    })\n  })\n  t.end()\n})\n\n"]}