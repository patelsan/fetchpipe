{"version":3,"sources":["ignore-most.js"],"names":[],"mappings":";;;AACA,IAAI,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;;;AAG/B,IAAI,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;AAC9B,CAAC,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,CAAC,EAAE,CAAC,CAAA;;;AAG7D,IAAI,QAAQ,GACV,CAAE,aAAa,EACb,IAAI,EACJ,MAAM,EACN,QAAQ,EACR,YAAY,EACZ,IAAI,EACJ,MAAM,EACN,QAAQ,CAAE,CAAA;;AAEd,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,oBAAoB,EAAE,UAAU,CAAC,EAAE;AACrD,GAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;;AAEf,YAAU,CAAC,EAAE,IAAI,EAAE,SAAS,GAAG,WAAW;AAC7B,eAAW,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,CACrC,EAAE,CAAC,YAAY,EAAE,UAAU,CAAC,EAAE;AAC7B,WAAO,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC,CAAA;GACjC,CAAC,CACD,EAAE,CAAC,OAAO,EAAE,UAAU,CAAC,EAAE;AACxB,QAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AACzC,QAAI,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;AAC3B,QAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AACZ,OAAC,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAC,IAAI,EAAE,CAAC,EAAC,CAAC,CAAA;KAC3C,MAAM;AACL,OAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACT,cAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;KACtB;GACF,CAAC,CACD,EAAE,CAAC,OAAO,EAAE,YAAY;AACvB,KAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,mCAAmC,CAAC,CAAA;AAC7D,KAAC,CAAC,GAAG,EAAE,CAAA;GACR,CAAC,CAAA;CACL,CAAC,CAAA","file":"ignore-most-compiled.js","sourcesContent":["// ignore most things\nvar IgnoreFile = require(\"../\")\n\n// set the ignores just for this test\nvar c = require(\"./common.js\")\nc.ignores({ \".ignore\": [\"*\", \"!a/b/c/.abc\", \"!/c/b/a/cba\"] })\n\n// the only files we expect to see\nvar expected =\n  [ \"/a/b/c/.abc\"\n  , \"/a\"\n  , \"/a/b\"\n  , \"/a/b/c\"\n  , \"/c/b/a/cba\"\n  , \"/c\"\n  , \"/c/b\"\n  , \"/c/b/a\" ]\n\nrequire(\"tap\").test(\"basic ignore rules\", function (t) {\n  t.pass(\"start\")\n\n  IgnoreFile({ path: __dirname + \"/fixtures\"\n             , ignoreFiles: [\".ignore\"] })\n    .on(\"ignoreFile\", function (e) {\n      console.error(\"ignore file!\", e)\n    })\n    .on(\"child\", function (e) {\n      var p = e.path.substr(e.root.path.length)\n      var i = expected.indexOf(p)\n      if (i === -1) {\n        t.fail(\"unexpected file found\", {file: p})\n      } else {\n        t.pass(p)\n        expected.splice(i, 1)\n      }\n    })\n    .on(\"close\", function () {\n      t.notOk(expected.length, \"all expected files should be seen\")\n      t.end()\n    })\n})\n"]}