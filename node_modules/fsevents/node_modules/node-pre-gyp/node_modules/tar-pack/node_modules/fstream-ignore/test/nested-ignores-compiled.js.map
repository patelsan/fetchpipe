{"version":3,"sources":["nested-ignores.js"],"names":[],"mappings":";;;AACA,IAAI,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;;;AAG/B,IAAI,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;AAC9B,CAAC,CAAC,OAAO,CACP,EAAE,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,aAAa,EAAE,aAAa,CAAC;AACxD,aAAW,EAAE,CAAE,IAAI,EAAE,SAAS,CAAE;AAChC,eAAa,EAAE,CAAE,GAAG,CAAE;AACtB,eAAa,EAAE,CAAE,GAAG,EAAE,UAAU,CAAE;AAClC,eAAa,EAAE,CAAE,GAAG,CAAE;AACtB,iBAAe,EAAE,CAAE,MAAM,EAAE,OAAO,EAAE,YAAY,CAAE;CACnD,CAAC,CAAA;;;AAGJ,IAAI,QAAQ,GACV,CAAE,IAAI,EACJ,MAAM,EACN,MAAM,EACN,QAAQ,EACR,aAAa,EACb,MAAM,EACN,IAAI,EACJ,MAAM,EACN,QAAQ,EACR,YAAY,EACZ,aAAa,EACb,YAAY,EACZ,YAAY,CAAE,CAAA;;AAElB,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,oBAAoB,EAAE,UAAU,CAAC,EAAE;AACrD,GAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;;AAEf,YAAU,CAAC,EAAE,IAAI,EAAE,SAAS,GAAG,WAAW;AAC7B,eAAW,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,CACrC,EAAE,CAAC,OAAO,EAAE,UAAU,CAAC,EAAE;AACxB,QAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AACzC,QAAI,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;AAC3B,QAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AACZ,aAAO,CAAC,GAAG,CAAC,SAAS,GAAC,CAAC,CAAC,CAAA;AACxB,OAAC,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAC,KAAK,EAAE,CAAC,EAAC,CAAC,CAAA;KAC5C,MAAM;AACL,OAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACT,cAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;KACtB;GACF,CAAC,CACD,EAAE,CAAC,OAAO,EAAE,YAAY;AACvB,KAAC,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,EAAE,mCAAmC,CAAC,CAAA;AAC9D,KAAC,CAAC,GAAG,EAAE,CAAA;GACR,CAAC,CAAA;CACL,CAAC,CAAA","file":"nested-ignores-compiled.js","sourcesContent":["// ignore most things\nvar IgnoreFile = require(\"../\")\n\n// set the ignores just for this test\nvar c = require(\"./common.js\")\nc.ignores(\n  { \".ignore\": [\"*\", \"a\", \"c\", \"!a/b/c/.abc\", \"!/c/b/a/cba\"]\n  , \"a/.ignore\": [ \"!*\", \".ignore\" ] // unignore everything\n  , \"a/a/.ignore\": [ \"*\" ] // re-ignore everything\n  , \"a/b/.ignore\": [ \"*\", \"!/c/.abc\" ] // original unignore\n  , \"a/c/.ignore\": [ \"*\" ] // ignore everything again\n  , \"c/b/a/.ignore\": [ \"!cba\", \"!.cba\", \"!/a{bc,cb}\" ]\n  })\n\n// the only files we expect to see\nvar expected =\n  [ \"/a\"\n  , \"/a/a\"\n  , \"/a/b\"\n  , \"/a/b/c\"\n  , \"/a/b/c/.abc\"\n  , \"/a/c\"\n  , \"/c\"\n  , \"/c/b\"\n  , \"/c/b/a\"\n  , \"/c/b/a/cba\"\n  , \"/c/b/a/.cba\"\n  , \"/c/b/a/abc\"\n  , \"/c/b/a/acb\" ]\n\nrequire(\"tap\").test(\"basic ignore rules\", function (t) {\n  t.pass(\"start\")\n\n  IgnoreFile({ path: __dirname + \"/fixtures\"\n             , ignoreFiles: [\".ignore\"] })\n    .on(\"child\", function (e) {\n      var p = e.path.substr(e.root.path.length)\n      var i = expected.indexOf(p)\n      if (i === -1) {\n        console.log(\"not ok \"+p)\n        t.fail(\"unexpected file found\", {found: p})\n      } else {\n        t.pass(p)\n        expected.splice(i, 1)\n      }\n    })\n    .on(\"close\", function () {\n      t.deepEqual(expected, [], \"all expected files should be seen\")\n      t.end()\n    })\n})\n"]}