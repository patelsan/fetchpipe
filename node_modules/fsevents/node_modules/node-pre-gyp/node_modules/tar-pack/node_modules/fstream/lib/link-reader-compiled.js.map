{"version":3,"sources":["link-reader.js"],"names":[],"mappings":";;;;;;;;AAMA,MAAM,CAAC,OAAO,GAAG,UAAU,CAAA;;AAE3B,IAAI,EAAE,GAAG,OAAO,CAAC,aAAa,CAAC;IAC3B,OAAO,GAAG,OAAO,CAAC,eAAe,CAAC;IAClC,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC;IAC9B,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC;IACzB,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;;AAEnC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,CAAA;;AAE5B,SAAS,UAAU,CAAE,KAAK,EAAE;AAC1B,MAAI,EAAE,GAAG,IAAI,CAAA;AACb,MAAI,EAAE,EAAE,YAAY,UAAU,CAAA,AAAC,EAAE,MAAM,IAAI,KAAK,CAC9C,2CAA2C,CAAC,CAAA;;AAE9C,MAAI,EAAE,AAAC,KAAK,CAAC,IAAI,KAAK,MAAM,IAAI,KAAK,CAAC,IAAI,IACnC,KAAK,CAAC,IAAI,KAAK,cAAc,IAAI,KAAK,CAAC,YAAY,CAAC,AAAC,EAAE;AAC5D,UAAM,IAAI,KAAK,CAAC,gBAAgB,GAAE,KAAK,CAAC,IAAI,CAAC,CAAA;GAC9C;;AAED,QAAM,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,CAAA;CACvB;;;;;;AAMD,UAAU,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,WAAW,EAAE;AAClD,MAAI,EAAE,GAAG,IAAI,CAAA;AACb,IAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,UAAU,EAAE,EAAE,QAAQ,EAAE;AAC5C,QAAI,EAAE,EAAE,OAAO,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;AAC3B,MAAE,CAAC,QAAQ,GAAG,EAAE,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAA;AAC1C,MAAE,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAA;AAC7B,UAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,WAAW,CAAC,CAAA;GAC7C,CAAC,CAAA;CACH,CAAA;;AAED,UAAU,CAAC,SAAS,CAAC,KAAK,GAAG,YAAY;AACvC,MAAI,EAAE,GAAG,IAAI,CAAA;AACb,MAAI,EAAE,CAAC,OAAO,EAAE,OAAM;;;AAGtB,MAAI,CAAC,EAAE,CAAC,MAAM,EAAE;AACd,MAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AACd,MAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;AAChB,MAAE,CAAC,MAAM,GAAG,IAAI,CAAA;GACjB;CACF,CAAA","file":"link-reader-compiled.js","sourcesContent":["// Basically just a wrapper around an fs.readlink\n//\n// XXX: Enhance this to support the Link type, by keeping\n// a lookup table of {<dev+inode>:<path>}, so that hardlinks\n// can be preserved in tarballs.\n\nmodule.exports = LinkReader\n\nvar fs = require(\"graceful-fs\")\n  , fstream = require(\"../fstream.js\")\n  , inherits = require(\"inherits\")\n  , mkdir = require(\"mkdirp\")\n  , Reader = require(\"./reader.js\")\n\ninherits(LinkReader, Reader)\n\nfunction LinkReader (props) {\n  var me = this\n  if (!(me instanceof LinkReader)) throw new Error(\n    \"LinkReader must be called as constructor.\")\n\n  if (!((props.type === \"Link\" && props.Link) ||\n        (props.type === \"SymbolicLink\" && props.SymbolicLink))) {\n    throw new Error(\"Non-link type \"+ props.type)\n  }\n\n  Reader.call(me, props)\n}\n\n// When piping a LinkReader into a LinkWriter, we have to\n// already have the linkpath property set, so that has to\n// happen *before* the \"ready\" event, which means we need to\n// override the _stat method.\nLinkReader.prototype._stat = function (currentStat) {\n  var me = this\n  fs.readlink(me._path, function (er, linkpath) {\n    if (er) return me.error(er)\n    me.linkpath = me.props.linkpath = linkpath\n    me.emit(\"linkpath\", linkpath)\n    Reader.prototype._stat.call(me, currentStat)\n  })\n}\n\nLinkReader.prototype._read = function () {\n  var me = this\n  if (me._paused) return\n  // basically just a no-op, since we got all the info we need\n  // from the _stat method\n  if (!me._ended) {\n    me.emit(\"end\")\n    me.emit(\"close\")\n    me._ended = true\n  }\n}\n"]}