{"version":3,"sources":["link-writer.js"],"names":[],"mappings":"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","file":"link-writer-compiled.js","sourcesContent":["\nmodule.exports = LinkWriter\n\nvar fs = require(\"graceful-fs\")\n  , Writer = require(\"./writer.js\")\n  , inherits = require(\"inherits\")\n  , path = require(\"path\")\n  , rimraf = require(\"rimraf\")\n\ninherits(LinkWriter, Writer)\n\nfunction LinkWriter (props) {\n  var me = this\n  if (!(me instanceof LinkWriter)) throw new Error(\n    \"LinkWriter must be called as constructor.\")\n\n  // should already be established as a Link type\n  if (!((props.type === \"Link\" && props.Link) ||\n        (props.type === \"SymbolicLink\" && props.SymbolicLink))) {\n    throw new Error(\"Non-link type \"+ props.type)\n  }\n\n  if (props.linkpath === \"\") props.linkpath = \".\"\n  if (!props.linkpath) {\n    me.error(\"Need linkpath property to create \" + props.type)\n  }\n\n  Writer.call(this, props)\n}\n\nLinkWriter.prototype._create = function () {\n  // console.error(\" LW _create\")\n  var me = this\n    , hard = me.type === \"Link\" || process.platform === \"win32\"\n    , link = hard ? \"link\" : \"symlink\"\n    , lp = hard ? path.resolve(me.dirname, me.linkpath) : me.linkpath\n\n  // can only change the link path by clobbering\n  // For hard links, let's just assume that's always the case, since\n  // there's no good way to read them if we don't already know.\n  if (hard) return clobber(me, lp, link)\n\n  fs.readlink(me._path, function (er, p) {\n    // only skip creation if it's exactly the same link\n    if (p && p === lp) return finish(me)\n    clobber(me, lp, link)\n  })\n}\n\nfunction clobber (me, lp, link) {\n  rimraf(me._path, function (er) {\n    if (er) return me.error(er)\n    create(me, lp, link)\n  })\n}\n\nfunction create (me, lp, link) {\n  fs[link](lp, me._path, function (er) {\n    // if this is a hard link, and we're in the process of writing out a\n    // directory, it's very possible that the thing we're linking to\n    // doesn't exist yet (especially if it was intended as a symlink),\n    // so swallow ENOENT errors here and just soldier in.\n    // Additionally, an EPERM or EACCES can happen on win32 if it's trying\n    // to make a link to a directory.  Again, just skip it.\n    // A better solution would be to have fs.symlink be supported on\n    // windows in some nice fashion.\n    if (er) {\n      if ((er.code === \"ENOENT\" ||\n           er.code === \"EACCES\" ||\n           er.code === \"EPERM\" ) && process.platform === \"win32\") {\n        me.ready = true\n        me.emit(\"ready\")\n        me.emit(\"end\")\n        me.emit(\"close\")\n        me.end = me._finish = function () {}\n      } else return me.error(er)\n    }\n    finish(me)\n  })\n}\n\nfunction finish (me) {\n  me.ready = true\n  me.emit(\"ready\")\n  if (me._ended && !me._finished) me._finish()\n}\n\nLinkWriter.prototype.end = function () {\n  // console.error(\"LW finish in end\")\n  this._ended = true\n  if (this.ready) {\n    this._finished = true\n    this._finish()\n  }\n}\n"]}