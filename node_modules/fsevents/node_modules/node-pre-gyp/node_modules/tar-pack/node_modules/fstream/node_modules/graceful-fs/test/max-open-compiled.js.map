{"version":3,"sources":["max-open.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAA;AAC9B,IAAI,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;;AAEvB,IAAI,CAAC,oBAAoB,EAAE,UAAU,CAAC,EAAE;;;AAGtC,SAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;;;AAGxB,MAAI,CAAC,GAAG,IAAI,CAAA;AACZ,MAAI,KAAK,GAAG,CAAC,CAAA;AACb,MAAI,GAAG,GAAG,EAAE,CAAA;AACZ,MAAI,KAAK,GAAG,IAAI,CAAA;AAChB,MAAI,OAAO,GAAG,KAAK,CAAA;AACnB,MAAI,UAAU,GAAG,CAAC,CAAA;;AAElB,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AAC1B,MAAE,EAAE,CAAA;GACL;;AAED,WAAS,EAAE,GAAG;AACZ,SAAK,EAAE,CAAA;AACP,MAAE,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,EAAE,EAAE,EAAE;AACzC,UAAI,EAAE,EAAE,MAAM,EAAE,CAAA;AAChB,SAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;AACZ,UAAI,KAAK,EAAE,EAAE,EAAE,CAAA;KAChB,CAAC,CAAA;GACH;;;AAGD,YAAU,CAAC,YAAY;AACrB,SAAK,GAAG,KAAK,CAAA;AACb,KAAC,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;AAC9B,QAAI,EAAE,CAAA;GACP,EAAE,GAAG,CAAC,CAAA;;AAGP,WAAS,IAAI,GAAI;AACf,QAAI,OAAO,EAAE,OAAM;AACnB,cAAU,EAAE,CAAA;;AAEZ,QAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;AACpB,aAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,UAAU,CAAC,CAAA;;;;;;AAMjD,OAAC,CAAC,EAAE,CAAC,UAAU,IAAI,CAAC,CAAC,CAAA;AACrB,aAAO,CAAC,CAAC,GAAG,EAAE,CAAA;KACf;;AAED,WAAO,GAAG,IAAI,CAAA;AACd,cAAU,CAAC,YAAY;;AAErB,aAAO,GAAG,KAAK,CAAA;AACf,UAAI,EAAE,CAAA;KACP,EAAE,GAAG,CAAC,CAAA;;;AAGP,QAAI,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;AACzB,OAAG,CAAC,MAAM,GAAG,CAAC,CAAA;AACd,UAAM,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE;AAC3B,QAAE,CAAC,KAAK,CAAC,EAAE,EAAE,UAAU,EAAE,EAAE;AACzB,YAAI,EAAE,EAAE,MAAM,EAAE,CAAA;OACjB,CAAC,CAAA;KACH,CAAC,CAAA;GACH;CACF,CAAC,CAAA","file":"max-open-compiled.js","sourcesContent":["var test = require('tap').test\nvar fs = require('../')\n\ntest('open lots of stuff', function (t) {\n  // Get around EBADF from libuv by making sure that stderr is opened\n  // Otherwise Darwin will refuse to give us a FD for stderr!\n  process.stderr.write('')\n\n  // How many parallel open()'s to do\n  var n = 1024\n  var opens = 0\n  var fds = []\n  var going = true\n  var closing = false\n  var doneCalled = 0\n\n  for (var i = 0; i < n; i++) {\n    go()\n  }\n\n  function go() {\n    opens++\n    fs.open(__filename, 'r', function (er, fd) {\n      if (er) throw er\n      fds.push(fd)\n      if (going) go()\n    })\n  }\n\n  // should hit ulimit pretty fast\n  setTimeout(function () {\n    going = false\n    t.equal(opens - fds.length, n)\n    done()\n  }, 100)\n\n\n  function done () {\n    if (closing) return\n    doneCalled++\n\n    if (fds.length === 0) {\n      console.error('done called %d times', doneCalled)\n      // First because of the timeout\n      // Then to close the fd's opened afterwards\n      // Then this time, to complete.\n      // Might take multiple passes, depending on CPU speed\n      // and ulimit, but at least 3 in every case.\n      t.ok(doneCalled >= 2)\n      return t.end()\n    }\n\n    closing = true\n    setTimeout(function () {\n      // console.error('do closing again')\n      closing = false\n      done()\n    }, 100)\n\n    // console.error('closing time')\n    var closes = fds.slice(0)\n    fds.length = 0\n    closes.forEach(function (fd) {\n      fs.close(fd, function (er) {\n        if (er) throw er\n      })\n    })\n  }\n})\n"]}