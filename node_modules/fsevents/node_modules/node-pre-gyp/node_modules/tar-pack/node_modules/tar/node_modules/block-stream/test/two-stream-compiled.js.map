{"version":3,"sources":["two-stream.js"],"names":[],"mappings":";;AAAA,IAAI,GAAG,GAAG,OAAO,CAAC,GAAG;IACjB,MAAM,GAAG,OAAO,CAAE,QAAQ,CAAE;IAC5B,WAAW,GAAG,OAAO,CAAC,oBAAoB,CAAC;IAC3C,KAAK,GAAG,CAAC;IAAE,KAAK,GAAG,CAAC;IAAE,KAAK,GAAG,CAAC;IAAE,KAAK,GAAG,CAAC;IAAE,CAAC,GAAG,CAAC;IACjD,MAAM,GAAG,IAAI;IAAE,KAAK,GAAG,IAAI;IAAE,KAAK,GAAG,IAAI;;;AAG7C,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC;AACjB,KAAK,GAAG,IAAI,MAAM,CAAE,KAAK,CAAE,CAAC;AAC5B,OAAQ,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;AAErD,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC;AACjB,KAAK,GAAG,CAAC,GAAG,IAAI,CAAE;AAClB,KAAK,GAAG,IAAI,CAAC,IAAI,CAAE,KAAK,GAAG,CAAC,CAAE,CAAC;;AAE/B,SAAS,GAAG,IAAI,CAAC,IAAI,CAAE,KAAK,GAAG,KAAK,CAAE,CAAC;AACvC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAE,KAAK,GAAG,KAAK,CAAE,CAAC;;AAGvC,MAAM,GAAG,IAAI,WAAW,CAAE,KAAK,EAAE,EAAE,KAAK,EAAG,IAAI,EAAE,CAAE,CAAC;AACpD,KAAK,GAAG,IAAI,WAAW,CAAE,KAAK,EAAE,EAAE,KAAK,EAAG,IAAI,EAAE,CAAE,CAAC;;AAGnD,IAAI,QAAQ,GAAG,CAAC,CAAC;AACjB,MAAM,CAAC,EAAE,CAAE,MAAM,EAAE,UAAU,CAAC,EAAE;;AAE9B,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAG,EAAE;AAClC,UAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;GAC5C;AACC,IAAE,QAAQ,CAAC;CACd,CAAE,CAAC;;AAEJ,IAAI,QAAQ,GAAG,CAAC,CAAC;AACjB,KAAK,CAAC,EAAE,CAAE,MAAM,EAAE,UAAU,CAAC,EAAE;;AAE7B,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAG,EAAE;AAClC,UAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;GAC5C;AACC,IAAE,QAAQ,CAAC;CACd,CAAE,CAAC;;AAEJ,MAAM,CAAC,IAAI,CAAE,KAAK,CAAE,CAAC;;AAErB,MAAM,CAAC,EAAE,CAAE,KAAK,EAAE,YAAY;AAC5B,KAAG,CAAC,qBAAqB,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAA;AAC7C,QAAM,CAAC,WAAW,CAAE,QAAQ,EAAE,SAAS,CAAE,CAAC;CAC7C,CAAE,CAAC;;AAEJ,KAAK,CAAC,EAAE,CAAE,KAAK,EAAE,YAAY;AAC3B,KAAG,CAAC,qBAAqB,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;AAC9C,QAAM,CAAC,WAAW,CAAE,QAAQ,EAAE,SAAS,CAAE,CAAC;CAC7C,CAAE,CAAC;;AAGJ,KAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI,KAAK,EAAG;AAC7C,QAAM,CAAC,KAAK,CAAE,KAAK,CAAC,KAAK,CAAE,CAAC,GAAG,KAAK,EAAE,CAAC,CAAE,CAAE,CAAC;CAC/C;;AAED,MAAM,CAAC,GAAG,EAAE,CAAC","file":"two-stream-compiled.js","sourcesContent":["var log = console.log,\n    assert = require( 'assert' ),\n    BlockStream = require(\"../block-stream.js\"),\n    isize = 0, tsize = 0, fsize = 0, psize = 0, i = 0,\n    filter = null, paper = null, stack = null,\n\n// a source data buffer\ntsize = 1 * 1024; // <- 1K\nstack = new Buffer( tsize );\nfor ( ; i < tsize; i++) stack[i] = \"x\".charCodeAt(0);\n\nisize = 1 * 1024; // <- initial packet size with 4K no bug!\nfsize = 2 * 1024 ; // <- first block-stream size \npsize = Math.ceil( isize / 6 ); // <- second block-stream size\n\nfexpected = Math.ceil( tsize / fsize ); // <- packets expected for first \npexpected = Math.ceil( tsize / psize ); // <- packets expected for second\n\n\nfilter = new BlockStream( fsize, { nopad : true } );\npaper = new BlockStream( psize, { nopad : true } );\n\n\nvar fcounter = 0;\nfilter.on( 'data', function (c) {\n  // verify that they're not null-padded\n  for (var i = 0; i < c.length; i ++) {\n    assert.strictEqual(c[i], \"x\".charCodeAt(0))\n  }\n    ++fcounter;\n} );\n\nvar pcounter = 0;\npaper.on( 'data', function (c) {\n  // verify that they're not null-padded\n  for (var i = 0; i < c.length; i ++) {\n    assert.strictEqual(c[i], \"x\".charCodeAt(0))\n  }\n    ++pcounter;\n} );\n\nfilter.pipe( paper );\n\nfilter.on( 'end', function () {\n  log(\"fcounter: %s === %s\", fcounter, fexpected)\n    assert.strictEqual( fcounter, fexpected );\n} );\n\npaper.on( 'end', function () {\n  log(\"pcounter: %s === %s\", pcounter, pexpected);\n    assert.strictEqual( pcounter, pexpected );\n} );\n\n\nfor ( i = 0, j = isize; j <= tsize; j += isize ) {\n    filter.write( stack.slice( j - isize, j ) );\n}\n\nfilter.end();\n"]}