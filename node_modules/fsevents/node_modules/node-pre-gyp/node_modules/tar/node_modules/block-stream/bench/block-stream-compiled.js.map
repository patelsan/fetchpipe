{"version":3,"sources":["block-stream.js"],"names":[],"mappings":"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","file":"block-stream-compiled.js","sourcesContent":["var BlockStream = require(\"../block-stream.js\")\n\nvar blockSizes = [16, 25, 1024]\n  , writeSizes = [4, 8, 15, 16, 17, 64, 100]\n  , writeCounts = [1, 10, 100]\n  , tap = require(\"tap\")\n\nwriteCounts.forEach(function (writeCount) {\nblockSizes.forEach(function (blockSize) {\nwriteSizes.forEach(function (writeSize) {\n  tap.test(\"writeSize=\" + writeSize +\n           \" blockSize=\"+blockSize +\n           \" writeCount=\"+writeCount, function (t) {\n    var f = new BlockStream(blockSize, {nopad: true })\n\n    var actualChunks = 0\n    var actualBytes = 0\n    var timeouts = 0\n\n    f.on(\"data\", function (c) {\n      timeouts ++\n\n      actualChunks ++\n      actualBytes += c.length\n\n      // make sure that no data gets corrupted, and basic sanity\n      var before = c.toString()\n      // simulate a slow write operation\n      setTimeout(function () {\n        timeouts --\n\n        var after = c.toString()\n        t.equal(after, before, \"should not change data\")\n\n        // now corrupt it, to find leaks.\n        for (var i = 0; i < c.length; i ++) {\n          c[i] = \"x\".charCodeAt(0)\n        }\n      }, 100)\n    })\n\n    f.on(\"end\", function () {\n      // round up to the nearest block size\n      var expectChunks = Math.ceil(writeSize * writeCount  * 2 / blockSize)\n      var expectBytes = writeSize * writeCount * 2\n      t.equal(actualBytes, expectBytes,\n              \"bytes=\" + expectBytes + \" writeSize=\" + writeSize)\n      t.equal(actualChunks, expectChunks,\n              \"chunks=\" + expectChunks + \" writeSize=\" + writeSize)\n\n      // wait for all the timeout checks to finish, then end the test\n      setTimeout(function WAIT () {\n        if (timeouts > 0) return setTimeout(WAIT)\n        t.end()\n      }, 100)\n    })\n\n    for (var i = 0; i < writeCount; i ++) {\n      var a = new Buffer(writeSize);\n      for (var j = 0; j < writeSize; j ++) a[j] = \"a\".charCodeAt(0)\n      var b = new Buffer(writeSize);\n      for (var j = 0; j < writeSize; j ++) b[j] = \"b\".charCodeAt(0)\n      f.write(a)\n      f.write(b)\n    }\n    f.end()\n  })\n}) }) })\n"]}