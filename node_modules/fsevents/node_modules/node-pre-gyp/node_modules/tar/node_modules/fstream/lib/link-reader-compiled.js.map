{"version":3,"sources":["link-reader.js"],"names":[],"mappings":";;;;;;;;AAMA,MAAM,CAAC,OAAO,GAAG,UAAU,CAAA;;AAE3B,IAAI,EAAE,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;AAC/B,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;AAClC,IAAI,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;;AAEnC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,CAAA;;AAE5B,SAAS,UAAU,CAAE,KAAK,EAAE;AAC1B,MAAI,IAAI,GAAG,IAAI,CAAA;AACf,MAAI,EAAE,IAAI,YAAY,UAAU,CAAA,AAAC,EAAE;AACjC,UAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAA;GAC7D;;AAED,MAAI,EAAE,AAAC,KAAK,CAAC,IAAI,KAAK,MAAM,IAAI,KAAK,CAAC,IAAI,IACvC,KAAK,CAAC,IAAI,KAAK,cAAc,IAAI,KAAK,CAAC,YAAY,CAAC,AAAC,EAAE;AACxD,UAAM,IAAI,KAAK,CAAC,gBAAgB,GAAG,KAAK,CAAC,IAAI,CAAC,CAAA;GAC/C;;AAED,QAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;CACzB;;;;;;AAMD,UAAU,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,WAAW,EAAE;AAClD,MAAI,IAAI,GAAG,IAAI,CAAA;AACf,IAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,EAAE,EAAE,QAAQ,EAAE;AAC9C,QAAI,EAAE,EAAE,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;AAC7B,QAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAA;AAC9C,QAAI,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAA;AAC/B,UAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CAAA;GAC/C,CAAC,CAAA;CACH,CAAA;;AAED,UAAU,CAAC,SAAS,CAAC,KAAK,GAAG,YAAY;AACvC,MAAI,IAAI,GAAG,IAAI,CAAA;AACf,MAAI,IAAI,CAAC,OAAO,EAAE,OAAM;;;AAGxB,MAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AAChB,QAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AAChB,QAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;AAClB,QAAI,CAAC,MAAM,GAAG,IAAI,CAAA;GACnB;CACF,CAAA","file":"link-reader-compiled.js","sourcesContent":["// Basically just a wrapper around an fs.readlink\n//\n// XXX: Enhance this to support the Link type, by keeping\n// a lookup table of {<dev+inode>:<path>}, so that hardlinks\n// can be preserved in tarballs.\n\nmodule.exports = LinkReader\n\nvar fs = require('graceful-fs')\nvar inherits = require('inherits')\nvar Reader = require('./reader.js')\n\ninherits(LinkReader, Reader)\n\nfunction LinkReader (props) {\n  var self = this\n  if (!(self instanceof LinkReader)) {\n    throw new Error('LinkReader must be called as constructor.')\n  }\n\n  if (!((props.type === 'Link' && props.Link) ||\n    (props.type === 'SymbolicLink' && props.SymbolicLink))) {\n    throw new Error('Non-link type ' + props.type)\n  }\n\n  Reader.call(self, props)\n}\n\n// When piping a LinkReader into a LinkWriter, we have to\n// already have the linkpath property set, so that has to\n// happen *before* the \"ready\" event, which means we need to\n// override the _stat method.\nLinkReader.prototype._stat = function (currentStat) {\n  var self = this\n  fs.readlink(self._path, function (er, linkpath) {\n    if (er) return self.error(er)\n    self.linkpath = self.props.linkpath = linkpath\n    self.emit('linkpath', linkpath)\n    Reader.prototype._stat.call(self, currentStat)\n  })\n}\n\nLinkReader.prototype._read = function () {\n  var self = this\n  if (self._paused) return\n  // basically just a no-op, since we got all the info we need\n  // from the _stat method\n  if (!self._ended) {\n    self.emit('end')\n    self.emit('close')\n    self._ended = true\n  }\n}\n"]}