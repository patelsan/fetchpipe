{"version":3,"sources":["dir-normalization.js"],"names":[],"mappings":"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","file":"dir-normalization-compiled.js","sourcesContent":["// Set the umask, so that it works the same everywhere.\nprocess.umask(parseInt('22', 8))\n\nvar fs = require('fs')\nvar path = require('path')\n\nvar fstream = require('fstream')\nvar test = require('tap').test\n\nvar tar = require('../tar.js')\nvar file = path.resolve(__dirname, 'dir-normalization.tar')\nvar target = path.resolve(__dirname, 'tmp/dir-normalization-test')\nvar ee = 0\n\nvar expectEntries = [\n  { path: 'fixtures/',\n    mode: '755',\n    type: '5',\n    linkpath: ''\n  },\n  { path: 'fixtures/a/',\n    mode: '755',\n    type: '5',\n    linkpath: ''\n  },\n  { path: 'fixtures/the-chumbler',\n    mode: '755',\n    type: '2',\n    linkpath: path.resolve(target, 'a/b/c/d/the-chumbler'),\n  },\n  { path: 'fixtures/a/b/',\n    mode: '755',\n    type: '5',\n    linkpath: ''\n  },\n  { path: 'fixtures/a/x',\n    mode: '644',\n    type: '0',\n    linkpath: ''\n  },\n  { path: 'fixtures/a/b/c/',\n    mode: '755',\n    type: '5',\n    linkpath: ''\n  },\n  { path: 'fixtures/a/b/c/y',\n    mode: '755',\n    type: '2',\n    linkpath: '../../x',\n  }\n]\n\nvar ef = 0\nvar expectFiles = [\n  { path: '',\n    mode: '40755',\n    type: 'Directory',\n    depth: 0,\n    linkpath: undefined\n  },\n  { path: '/fixtures',\n    mode: '40755',\n    type: 'Directory',\n    depth: 1,\n    linkpath: undefined\n  },\n  { path: '/fixtures/a',\n    mode: '40755',\n    type: 'Directory',\n    depth: 2,\n    linkpath: undefined\n  },\n  { path: '/fixtures/a/b',\n    mode: '40755',\n    type: 'Directory',\n    depth: 3,\n    linkpath: undefined\n  },\n  { path: '/fixtures/a/b/c',\n    mode: '40755',\n    type: 'Directory',\n    depth: 4,\n    linkpath: undefined\n  },\n  { path: '/fixtures/a/b/c/y',\n    mode: '120755',\n    type: 'SymbolicLink',\n    depth: 5,\n    linkpath: '../../x'\n  },\n  { path: '/fixtures/a/x',\n    mode: '100644',\n    type: 'File',\n    depth: 3,\n    linkpath: undefined\n  },\n  { path: '/fixtures/the-chumbler',\n    mode: '120755',\n    type: 'SymbolicLink',\n    depth: 2,\n    linkpath: path.resolve(target, 'a/b/c/d/the-chumbler')\n  }\n]\n\ntest('preclean', function (t) {\n  require('rimraf').sync(path.join(__dirname, '/tmp/dir-normalization-test'))\n  t.pass('cleaned!')\n  t.end()\n})\n\ntest('extract test', function (t) {\n  var extract = tar.Extract(target)\n  var inp = fs.createReadStream(file)\n\n  inp.pipe(extract)\n\n  extract.on('end', function () {\n    t.equal(ee, expectEntries.length, 'should see ' + expectEntries.length + ' entries')\n\n    // should get no more entries after end\n    extract.removeAllListeners('entry')\n    extract.on('entry', function (e) {\n      t.fail('Should not get entries after end!')\n    })\n\n    next()\n  })\n\n  extract.on('entry', function (entry) {\n    var mode = entry.props.mode & (~parseInt('22', 8))\n    var found = {\n      path: entry.path,\n      mode: mode.toString(8),\n      type: entry.props.type,\n      linkpath: entry.props.linkpath,\n    }\n\n    var wanted = expectEntries[ee++]\n    t.equivalent(found, wanted, 'tar entry ' + ee + ' ' + (wanted && wanted.path))\n  })\n\n  function next () {\n    var r = fstream.Reader({\n      path: target,\n      type: 'Directory',\n      sort: 'alpha'\n    })\n\n    r.on('ready', function () {\n      foundEntry(r)\n    })\n\n    r.on('end', finish)\n\n    function foundEntry (entry) {\n      var p = entry.path.substr(target.length)\n      var mode = entry.props.mode & (~parseInt('22', 8))\n      var found = {\n        path: p,\n        mode: mode.toString(8),\n        type: entry.props.type,\n        depth: entry.props.depth,\n        linkpath: entry.props.linkpath\n      }\n\n      var wanted = expectFiles[ef++]\n      t.equivalent(found, wanted, 'unpacked file ' + ef + ' ' + (wanted && wanted.path))\n\n      entry.on('entry', foundEntry)\n    }\n\n    function finish () {\n      t.equal(ef, expectFiles.length, 'should have ' + ef + ' items')\n      t.end()\n    }\n  }\n})\n"]}