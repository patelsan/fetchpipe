{"version":3,"sources":["extract-move.js"],"names":[],"mappings":"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","file":"extract-move-compiled.js","sourcesContent":["// Set the umask, so that it works the same everywhere.\nprocess.umask(parseInt('22', 8))\n\nvar tap = require(\"tap\")\n  , tar = require(\"../tar.js\")\n  , fs = require(\"fs\")\n  , gfs = require(\"graceful-fs\")\n  , path = require(\"path\")\n  , file = path.resolve(__dirname, \"fixtures/dir.tar\")\n  , target = path.resolve(__dirname, \"tmp/extract-test\")\n  , index = 0\n  , fstream = require(\"fstream\")\n  , rimraf = require(\"rimraf\")\n  , mkdirp = require(\"mkdirp\")\n\n  , ee = 0\n  , expectEntries = [\n      {\n        \"path\" : \"dir/\",\n        \"mode\" : \"750\",\n        \"type\" : \"5\",\n        \"depth\" : undefined,\n        \"size\" : 0,\n        \"linkpath\" : \"\",\n        \"nlink\" : undefined,\n        \"dev\" : undefined,\n        \"ino\" : undefined\n      },\n      {\n        \"path\" : \"dir/sub/\",\n        \"mode\" : \"750\",\n        \"type\" : \"5\",\n        \"depth\" : undefined,\n        \"size\" : 0,\n        \"linkpath\" : \"\",\n        \"nlink\" : undefined,\n        \"dev\" : undefined,\n        \"ino\" : undefined\n      } ]\n\nfunction slow (fs, method, t1, t2) {\n  var orig = fs[method]\n  if (!orig) return null\n  fs[method] = function () {\n    var args = [].slice.call(arguments)\n    console.error(\"slow\", method, args[0])\n    var cb = args.pop()\n\n    setTimeout(function () {\n      orig.apply(fs, args.concat(function(er, data) {\n        setTimeout(function() {\n          cb(er, data)\n        }, t2)\n      }))\n    }, t1)\n  }\n}\n\n// Make sure we get the graceful-fs that fstream is using.\nvar gfs2\ntry {\n  gfs2 = require(\"fstream/node_modules/graceful-fs\")\n} catch (er) {}\n\nvar slowMethods = [\"chown\", \"chmod\", \"utimes\", \"lutimes\"]\nslowMethods.forEach(function (method) {\n  var t1 = 500\n  var t2 = 0\n  slow(fs, method, t1, t2)\n  slow(gfs, method, t1, t2)\n  if (gfs2) {\n    slow(gfs2, method, t1, t2)\n  }\n})\n\n\n\n// The extract class basically just pipes the input\n// to a Reader, and then to a fstream.DirWriter\n\n// So, this is as much a test of fstream.Reader and fstream.Writer\n// as it is of tar.Extract, but it sort of makes sense.\n\ntap.test(\"preclean\", function (t) {\n  rimraf.sync(target)\n  /mkdirp.sync(target)\n  t.pass(\"cleaned!\")\n  t.end()\n})\n\ntap.test(\"extract test\", function (t) {\n  var extract = tar.Extract(target)\n  var inp = fs.createReadStream(file)\n\n  // give it a weird buffer size to try to break in odd places\n  inp.bufferSize = 1234\n\n  inp.pipe(extract)\n\n  extract.on(\"end\", function () {\n    rimraf.sync(target)\n\n    t.equal(ee, expectEntries.length, \"should see \"+ee+\" entries\")\n\n    // should get no more entries after end\n    extract.removeAllListeners(\"entry\")\n    extract.on(\"entry\", function (e) {\n      t.fail(\"Should not get entries after end!\")\n    })\n\n    t.end()\n  })\n\n\n  extract.on(\"entry\", function (entry) {\n    var found =\n      { path: entry.path\n      , mode: entry.props.mode.toString(8)\n      , type: entry.props.type\n      , depth: entry.props.depth\n      , size: entry.props.size\n      , linkpath: entry.props.linkpath\n      , nlink: entry.props.nlink\n      , dev: entry.props.dev\n      , ino: entry.props.ino\n      }\n\n    var wanted = expectEntries[ee ++]\n\n    t.equivalent(found, wanted, \"tar entry \" + ee + \" \" + wanted.path)\n  })\n})\n"]}