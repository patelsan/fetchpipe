{"version":3,"sources":["test.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAE/B,QAAQ,CAAC,aAAa,EAAE,YAAW;AACjC,IAAE,CAAC,+CAA+C,EAAE,YAAW;AAC7D,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,cAAc,CAAC,EAAE,SAAS,CAAC,CAAC;AAC5C,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,eAAe,CAAC,CAAC;AACxD,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC;AAC/B,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC;AAC9B,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC;AACjC,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,MAAM,CAAC,CAAC;AAC3C,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,iBAAiB,CAAC,EAAE,MAAM,CAAC,CAAC;AAC5C,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,iBAAiB,CAAC,EAAE,MAAM,CAAC,CAAC;AAC5C,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,iBAAiB,CAAC,EAAE,MAAM,CAAC,CAAC;AAC5C,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,iBAAiB,CAAC,EAAE,MAAM,CAAC,CAAC;AAC5C,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,iBAAiB,CAAC,EAAE,MAAM,CAAC,CAAC;AAC5C,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,EAAE,MAAM,CAAC,CAAC;AACtC,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,sBAAsB,CAAC,EAAE,MAAM,CAAC,CAAC;GAClD,CAAC,CAAC;;AAEH,IAAE,CAAC,kDAAkD,EAAE,YAAW;AAChE,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,iBAAiB,CAAC,EAAE,UAAU,CAAC,CAAC;AAChD,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,EAAE,UAAU,CAAC,CAAC;AAC1C,UAAM,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC,CAAC;GACtC,CAAC,CAAC;CACJ,CAAC,CAAC","file":"test-compiled.js","sourcesContent":["'use strict';\n\nvar gp = require('./');\nvar assert = require('assert');\n\ndescribe('glob-parent', function() {\n  it('should strip glob magic to return parent path', function() {\n    assert.equal(gp('path/to/*.js'), 'path/to');\n    assert.equal(gp('/root/path/to/*.js'), '/root/path/to');\n    assert.equal(gp('/*.js'), '/');\n    assert.equal(gp('*.js'), '.');\n    assert.equal(gp('**/*.js'), '.');\n    assert.equal(gp('path/{to,from}'), 'path');\n    assert.equal(gp('path/!(to|from)'), 'path');\n    assert.equal(gp('path/?(to|from)'), 'path');\n    assert.equal(gp('path/+(to|from)'), 'path');\n    assert.equal(gp('path/*(to|from)'), 'path');\n    assert.equal(gp('path/@(to|from)'), 'path');\n    assert.equal(gp('path/**/*'), 'path');\n    assert.equal(gp('path/**/subdir/foo.*'), 'path');\n  });\n\n  it('should return parent dirname from non-glob paths', function() {\n    assert.equal(gp('path/foo/bar.js'), 'path/foo');\n    assert.equal(gp('path/foo/'), 'path/foo');\n    assert.equal(gp('path/foo'), 'path');\n  });\n});\n"]}