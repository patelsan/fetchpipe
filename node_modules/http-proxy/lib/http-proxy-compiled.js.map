{"version":3,"sources":["http-proxy.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,GAAQ,OAAO,CAAC,MAAM,CAAC;IAC3B,KAAK,GAAO,OAAO,CAAC,OAAO,CAAC;IAC5B,GAAG,GAAS,OAAO,CAAC,KAAK,CAAC;IAC1B,SAAS,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;;;;;AAKzC,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC,MAAM,CAAC;;;;;;;;;;;;;;;;;AAiBlC,MAAM,CAAC,OAAO,CAAC,iBAAiB,GAC9B,MAAM,CAAC,OAAO,CAAC,YAAY,GAC3B,MAAM,CAAC,OAAO,CAAC,WAAW,GAAG,SAAS,iBAAiB,CAAC,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BjE,SAAO,IAAI,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;CACtC,CAAC","file":"http-proxy-compiled.js","sourcesContent":["var http      = require('http'),\n    https     = require('https'),\n    url       = require('url'),\n    httpProxy = require('./http-proxy/');\n\n/**\n * Export the proxy \"Server\" as the main export.\n */\nmodule.exports = httpProxy.Server;\n\n/**\n * Creates the proxy server.\n *\n * Examples:\n *\n *    httpProxy.createProxyServer({ .. }, 8000)\n *    // => '{ web: [Function], ws: [Function] ... }'\n *\n * @param {Object} Options Config object passed to the proxy\n *\n * @return {Object} Proxy Proxy object with handlers for `ws` and `web` requests\n *\n * @api public\n */\n\nmodule.exports.createProxyServer =\n  module.exports.createServer =\n  module.exports.createProxy = function createProxyServer(options) {\n  /*\n   *  `options` is needed and it must have the following layout:\n   *\n   *  {\n   *    target : <url string to be parsed with the url module>\n   *    forward: <url string to be parsed with the url module>\n   *    agent  : <object to be passed to http(s).request>\n   *    ssl    : <object to be passed to https.createServer()>\n   *    ws     : <true/false, if you want to proxy websockets>\n   *    xfwd   : <true/false, adds x-forward headers>\n   *    secure : <true/false, verify SSL certificate>\n   *    toProxy: <true/false, explicitly specify if we are proxying to another proxy>\n   *    prependPath: <true/false, Default: true - specify whether you want to prepend the target's path to the proxy path>\n   *    ignorePath: <true/false, Default: false - specify whether you want to ignore the proxy path of the incoming request>\n   *    localAddress : <Local interface string to bind for outgoing connections>\n   *    changeOrigin: <true/false, Default: false - changes the origin of the host header to the target URL>\n   *    auth   : Basic authentication i.e. 'user:password' to compute an Authorization header.  \n   *    hostRewrite: rewrites the location hostname on (301/302/307/308) redirects, Default: null.\n   *    autoRewrite: rewrites the location host/port on (301/302/307/308) redirects based on requested host/port. Default: false.\n   *    protocolRewrite: rewrites the location protocol on (301/302/307/308) redirects to 'http' or 'https'. Default: null.\n   *  }\n   *\n   *  NOTE: `options.ws` and `options.ssl` are optional.\n   *    `options.target and `options.forward` cannot be\n   *    both missing\n   *  }\n   */\n\n  return new httpProxy.Server(options);\n};\n\n"]}