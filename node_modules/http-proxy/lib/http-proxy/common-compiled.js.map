{"version":3,"sources":["common.js"],"names":[],"mappings":"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","file":"common-compiled.js","sourcesContent":["var common   = exports,\n    url      = require('url'),\n    extend   = require('util')._extend,\n    required = require('requires-port');\n\nvar upgradeHeader = /(^|,)\\s*upgrade\\s*($|,)/i,\n    isSSL = /^https|wss/;\n\n/**\n * Simple Regex for testing if protocol is https\n */\ncommon.isSSL = isSSL;\n/**\n * Copies the right headers from `options` and `req` to\n * `outgoing` which is then used to fire the proxied\n * request.\n *\n * Examples:\n *\n *    common.setupOutgoing(outgoing, options, req)\n *    // => { host: ..., hostname: ...}\n *\n * @param {Object} Outgoing Base object to be filled with required properties\n * @param {Object} Options Config object passed to the proxy\n * @param {ClientRequest} Req Request Object\n * @param {String} Forward String to select forward or target\n * \n * @return {Object} Outgoing Object with all required properties set\n *\n * @api private\n */\n\ncommon.setupOutgoing = function(outgoing, options, req, forward) {\n  outgoing.port = options[forward || 'target'].port ||\n                  (isSSL.test(options[forward || 'target'].protocol) ? 443 : 80);\n\n  ['host', 'hostname', 'socketPath', 'pfx', 'key',\n    'passphrase', 'cert', 'ca', 'ciphers', 'secureProtocol'].forEach(\n    function(e) { outgoing[e] = options[forward || 'target'][e]; }\n  );\n\n  outgoing.method = req.method;\n  outgoing.headers = extend({}, req.headers);\n\n  if (options.headers){\n    extend(outgoing.headers, options.headers);\n  }\n\n  if (options.auth) {\n    outgoing.auth = options.auth;\n  }\n\n  if (isSSL.test(options[forward || 'target'].protocol)) {\n    outgoing.rejectUnauthorized = (typeof options.secure === \"undefined\") ? true : options.secure;\n  }\n\n\n  outgoing.agent = options.agent || false;\n  outgoing.localAddress = options.localAddress;\n\n  //\n  // Remark: If we are false and not upgrading, set the connection: close. This is the right thing to do\n  // as node core doesn't handle this COMPLETELY properly yet.\n  //\n  if (!outgoing.agent) {\n    outgoing.headers = outgoing.headers || {};\n    if (typeof outgoing.headers.connection !== 'string'\n        || !upgradeHeader.test(outgoing.headers.connection)\n       ) { outgoing.headers.connection = 'close'; }\n  }\n\n\n  // the final path is target path + relative path requested by user:\n  var target = options[forward || 'target'];\n  var targetPath = target && options.prependPath !== false\n    ? (target.path || '')\n    : '';\n\n  //\n  // Remark: Can we somehow not use url.parse as a perf optimization?\n  //\n  var outgoingPath = !options.toProxy\n    ? (url.parse(req.url).path || '/')\n    : req.url;\n\n  //\n  // Remark: ignorePath will just straight up ignore whatever the request's\n  // path is. This can be labeled as FOOT-GUN material if you do not know what\n  // you are doing and are using conflicting options.\n  //\n  outgoingPath = !options.ignorePath ? outgoingPath : '/';\n\n  outgoing.path = common.urlJoin(targetPath, outgoingPath);\n\n  if (options.changeOrigin) {\n    outgoing.headers.host =\n      required(outgoing.port, options[forward || 'target'].protocol) && !hasPort(outgoing.host)\n        ? outgoing.host + ':' + outgoing.port\n        : outgoing.host;\n  }\n  return outgoing;\n};\n\n/**\n * Set the proper configuration for sockets,\n * set no delay and set keep alive, also set\n * the timeout to 0.\n *\n * Examples:\n *\n *    common.setupSocket(socket)\n *    // => Socket\n *\n * @param {Socket} Socket instance to setup\n * \n * @return {Socket} Return the configured socket.\n *\n * @api private\n */\n\ncommon.setupSocket = function(socket) {\n  socket.setTimeout(0);\n  socket.setNoDelay(true);\n\n  socket.setKeepAlive(true, 0);\n\n  return socket;\n};\n\n/**\n * Get the port number from the host. Or guess it based on the connection type.\n *\n * @param {Request} req Incoming HTTP request.\n *\n * @return {String} The port number.\n *\n * @api private\n */\ncommon.getPort = function(req) {\n  var res = req.headers.host ? req.headers.host.match(/:(\\d+)/) : '';\n\n  return res ?\n    res[1] :\n    common.hasEncryptedConnection(req) ? '443' : '80';\n};\n\n/**\n * Check if the request has an encrypted connection.\n *\n * @param {Request} req Incoming HTTP request.\n *\n * @return {Boolean} Whether the connection is encrypted or not.\n *\n * @api private\n */\ncommon.hasEncryptedConnection = function(req) {\n  return Boolean(req.connection.encrypted || req.connection.pair);\n};\n\n/**\n * OS-agnostic join (doesn't break on URLs like path.join does on Windows)>\n *\n * @return {String} The generated path.\n *\n * @api private\n */\n\ncommon.urlJoin = function() {\n    //\n    // We do not want to mess with the query string. All we want to touch is the path.\n    //\n  var args = Array.prototype.slice.call(arguments),\n      lastIndex = args.length - 1,\n      last = args[lastIndex],\n      lastSegs = last.split('?'),\n      retSegs;\n\n  args[lastIndex] = lastSegs.shift();\n\n  //\n  // Join all strings, but remove empty strings so we don't get extra slashes from\n  // joining e.g. ['', 'am']\n  //\n  retSegs = [\n    args.filter(Boolean).join('/').replace(/\\/+/g, '/').replace(/:\\//g, '://')\n  ];\n\n  // Only join the query string if it exists so we don't have trailing a '?'\n  // on every request\n\n  // Handle case where there could be multiple ? in the URL.\n  retSegs.push.apply(retSegs, lastSegs);\n\n  return retSegs.join('?')\n};\n\n/**\n * Check the host and see if it potentially has a port in it (keep it simple)\n *\n * @returns {Boolean} Whether we have one or not\n *\n * @api private\n */\nfunction hasPort(host) {\n  return !!~host.indexOf(':');\n};\n"]}