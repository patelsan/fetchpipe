{"version":3,"sources":["web-outgoing.js"],"names":[],"mappings":";;AAAA,IAAI,GAAG,GAAM,OAAO,CAAC,KAAK,CAAC;IACvB,MAAM,GAAG,OAAO,CAAC;;AAErB,IAAI,aAAa,GAAG,eAAe,CAAC;;;;;;;;;;AAUpC;;;;;;;;;;;AAWE,SAAS,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE;AACzC,MAAI,GAAG,CAAC,WAAW,KAAK,KAAK,EAAE;AAC7B,WAAO,QAAQ,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;GAC9C;CACF;;;;;;;;;;;;AAYD,SAAS,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE;AACzC,MAAI,GAAG,CAAC,WAAW,KAAK,KAAK,EAAE;AAC7B,YAAQ,CAAC,OAAO,CAAC,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC;GACjE,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,EAAE;AACvC,YAAQ,CAAC,OAAO,CAAC,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,IAAI,YAAY,CAAC;GACtE;CACF,EAED,SAAS,sBAAsB,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,OAAO,EAAE;AAC3D,MAAI,CAAC,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,eAAe,CAAA,IACnE,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,IAC5B,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;AAC9C,QAAI,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACvC,QAAI,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;;;AAGhD,QAAI,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,EAAE;AACzB,aAAO;KACR;;AAED,QAAI,OAAO,CAAC,WAAW,EAAE;AACvB,OAAC,CAAC,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC;KAC9B,MAAM,IAAI,OAAO,CAAC,WAAW,EAAE;AAC9B,OAAC,CAAC,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KAC9B;AACD,QAAI,OAAO,CAAC,eAAe,EAAE;AAC3B,OAAC,CAAC,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC;KACtC;;AAED,YAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;GAC3C;CACF;;;;;;;;;;;AAWD,SAAS,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE;AACxC,QAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAS,GAAG,EAAE;AAClD,OAAG,CAAC,SAAS,CAAC,GAAG,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;GAC3C,CAAC,CAAC;CACJ;;;;;;;;;;;AAWD,SAAS,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE;AAC3C,KAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;CACpC,CAEF;CACE,OAAO,CAAC,UAAS,IAAI,EAAE;AACtB,QAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;CAC1B,CAAC,CAAC","file":"web-outgoing-compiled.js","sourcesContent":["var url    = require('url'),\n    passes = exports;\n\nvar redirectRegex = /^30(1|2|7|8)$/;\n\n/*!\n * Array of passes.\n *\n * A `pass` is just a function that is executed on `req, res, options`\n * so that you can easily add new checks while still keeping the base\n * flexible.\n */\n\n[ // <--\n\n  /**\n   * If is a HTTP 1.0 request, remove chunk headers\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {IncomingMessage} Res Response object\n   * @param {proxyResponse} Res Response object from the proxy request\n   *\n   * @api private\n   */\n  function removeChunked(req, res, proxyRes) {\n    if (req.httpVersion === '1.0') {\n      delete proxyRes.headers['transfer-encoding'];\n    }\n  },\n\n  /**\n   * If is a HTTP 1.0 request, set the correct connection header\n   * or if connection header not present, then use `keep-alive`\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {IncomingMessage} Res Response object\n   * @param {proxyResponse} Res Response object from the proxy request\n   *\n   * @api private\n   */\n  function setConnection(req, res, proxyRes) {\n    if (req.httpVersion === '1.0') {\n      proxyRes.headers.connection = req.headers.connection || 'close';\n    } else if (!proxyRes.headers.connection) {\n      proxyRes.headers.connection = req.headers.connection || 'keep-alive';\n    }\n  },\n\n  function setRedirectHostRewrite(req, res, proxyRes, options) {\n    if ((options.hostRewrite || options.autoRewrite || options.protocolRewrite)\n        && proxyRes.headers['location']\n        && redirectRegex.test(proxyRes.statusCode)) {\n      var target = url.parse(options.target);\n      var u = url.parse(proxyRes.headers['location']);\n\n      // make sure the redirected host matches the target host before rewriting\n      if (target.host != u.host) {\n        return;\n      }\n\n      if (options.hostRewrite) {\n        u.host = options.hostRewrite;\n      } else if (options.autoRewrite) {\n        u.host = req.headers['host'];\n      }\n      if (options.protocolRewrite) {\n        u.protocol = options.protocolRewrite;\n      }\n\n      proxyRes.headers['location'] = u.format();\n    }\n  },\n  /**\n   * Copy headers from proxyResponse to response\n   * set each header in response object.\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {IncomingMessage} Res Response object\n   * @param {proxyResponse} Res Response object from the proxy request\n   *\n   * @api private\n   */\n  function writeHeaders(req, res, proxyRes) {\n    Object.keys(proxyRes.headers).forEach(function(key) {\n      res.setHeader(key, proxyRes.headers[key]);\n    });\n  },\n\n  /**\n   * Set the statusCode from the proxyResponse\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {IncomingMessage} Res Response object\n   * @param {proxyResponse} Res Response object from the proxy request\n   *\n   * @api private\n   */\n  function writeStatusCode(req, res, proxyRes) {\n    res.writeHead(proxyRes.statusCode);\n  }\n\n] // <--\n  .forEach(function(func) {\n    passes[func.name] = func;\n  });\n"]}