{"version":3,"sources":["jsflags.spec.js"],"names":[],"mappings":"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","file":"jsflags.spec-compiled.js","sourcesContent":["var expect = require('chai').expect\nvar sinon = require('sinon')\n\nvar launcher = require('../index')\n\ndescribe('isJSFlags()', function () {\n  var isJSFlags = launcher.test.isJSFlags\n\n  it('should return true if flag begins with --js-flags=', function () {\n    expect(isJSFlags('--js-flags=--expose-gc')).to.be.eql(true)\n    expect(isJSFlags('--js-flags=\"--expose-gc\"')).to.be.eql(true)\n    expect(isJSFlags(\"--js-flags='--expose-gc'\")).to.be.eql(true)\n  })\n\n  it('should return false if flag does not begin with --js-flags=', function () {\n    expect(isJSFlags(' --js-flags=--expose-gc')).to.be.eql(false)\n    expect(isJSFlags('--js-flags\"--expose-gc\"')).to.be.eql(false)\n    expect(isJSFlags('--jsflags=\"--expose-gc\"')).to.be.eql(false)\n  })\n})\n\ndescribe('sanitizeJSFlags()', function () {\n  var sanitizeJSFlags = launcher.test.sanitizeJSFlags\n\n  it('should do nothing if flags are not contained in quotes', function () {\n    expect(sanitizeJSFlags('--js-flags=--expose-gc')).to.be.eql('--js-flags=--expose-gc')\n  })\n\n  it('should symmetrically remove single or double quote if wraps all flags', function () {\n    expect(sanitizeJSFlags(\"--js-flags='--expose-gc'\")).to.be.eql('--js-flags=--expose-gc')\n    expect(sanitizeJSFlags('--js-flags=\"--expose-gc\"')).to.be.eql('--js-flags=--expose-gc')\n  })\n\n  it('should NOT remove anything if the flags are not contained within quote', function () {\n    expect(sanitizeJSFlags('--js-flags=--expose-gc=\"true\"')).to.be.eql('--js-flags=--expose-gc=\"true\"')\n    expect(sanitizeJSFlags(\"--js-flags=--expose-gc='true'\")).to.be.eql(\"--js-flags=--expose-gc='true'\")\n  })\n})\n\ndescribe('canaryGetOptions', function () {\n  var canaryGetOptions = launcher.test.canaryGetOptions\n\n  it('should return a merged version of --js-flags', function () {\n    var parent = sinon.stub().returns(['-incognito'])\n    var context = {}\n    var url = 'http://localhost:9876'\n    var args = {flags: ['--js-flags=\"--expose-gc\"']}\n    expect(canaryGetOptions.call(context, url, args, parent)).to.be.eql([\n      '-incognito',\n      '--js-flags=--expose-gc --nocrankshaft --noopt'\n    ])\n  })\n})\n"]}