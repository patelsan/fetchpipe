{"version":3,"sources":["adapter.js"],"names":[],"mappings":"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","file":"adapter-compiled.js","sourcesContent":["(function(window) {\n\n/* jshint globalstrict: true */\n'use strict';\n\n/**\n * Decision maker for whether a stack entry is considered external to jasmine and karma.\n * @param  {String}  entry Error stack entry.\n * @return {Boolean}       True if external, False otherwise.\n */\nfunction isExternalStackEntry(entry) {\n    return (entry ? true : false) &&\n      // entries related to jasmine and karma-jasmine:\n      !/\\/(jasmine-core|karma-jasmine)\\//.test(entry) &&\n      // karma specifics, e.g. \"at http://localhost:7018/karma.js:185\"\n      !/\\/(karma.js|context.html):/.test(entry);\n}\n\n/**\n * Returns relevant stack entries.\n * @param  {String} stack Complete error stack trace.\n * @return {Array}        A list of relevant stack entries.\n */\nfunction getRelevantStackFrom(stack) {\n  var filteredStack = [],\n      relevantStack = [];\n\n  stack = stack.split('\\n');\n\n  for (var i = 0; i < stack.length; i += 1) {\n    if (isExternalStackEntry(stack[i])) {\n      filteredStack.push(stack[i]);\n    }\n  }\n\n  // If the filtered stack is empty, i.e. the error originated entirely from within jasmine or karma, then the whole stack\n  // should be relevant.\n  if (filteredStack.length === 0) {\n    filteredStack = stack;\n  }\n\n  for (i = 0; i < filteredStack.length; i += 1) {\n    if (filteredStack[i]) {\n      relevantStack.push(filteredStack[i]);\n    }\n  }\n\n  return relevantStack;\n}\n\n/**\n * Custom formatter for a failed step.\n *\n * Different browsers report stack trace in different ways. This function\n * attempts to provide a concise, relevant error message by removing the\n * unnecessary stack traces coming from the testing framework itself as well\n * as possible repetition.\n *\n * @see    https://github.com/karma-runner/karma-jasmine/issues/60\n * @param  {Object} step Step object with stack and message properties.\n * @return {String}      Formatted step.\n */\nfunction formatFailedStep(step) {\n  // Safari seems to have no stack trace,\n  // so we just return the error message:\n  if (!step.stack) { return step.message; }\n\n  var relevantMessage = [];\n  var relevantStack = [];\n\n  // Remove the message prior to processing the stack to prevent issues like\n  // https://github.com/karma-runner/karma-jasmine/issues/79\n  var stack = step.stack.replace('Error: ' + step.message, '');\n\n  var dirtyRelevantStack = getRelevantStackFrom(stack);\n\n  // PhantomJS returns multiline error message for errors coming from specs\n  // (for example when calling a non-existing function). This error is present\n  // in both `step.message` and `step.stack` at the same time, but stack seems\n  // preferable, so we iterate relevant stack, compare it to message:\n  for (var i = 0; i < dirtyRelevantStack.length; i += 1) {\n    if (step.message && step.message.indexOf(dirtyRelevantStack[i]) === -1) {\n      // Stack entry is not in the message,\n      // we consider it to be a relevant stack:\n      relevantStack.push(dirtyRelevantStack[i]);\n    } else {\n      // Stack entry is already in the message,\n      // we consider it to be a suitable message alternative:\n      relevantMessage.push(dirtyRelevantStack[i]);\n    }\n  }\n\n  // In most cases the above will leave us with an empty message...\n  if (relevantMessage.length === 0) {\n    // Let's reuse the original message:\n    relevantMessage.push(step.message);\n\n    // Now we probably have a repetition case where:\n    // relevantMessage: [\"Expected true to be false.\"]\n    // relevantStack:   [\"Error: Expected true to be false.\", ...]\n    if (relevantStack.length && relevantStack[0].indexOf(step.message) !== -1) {\n      // The message seems preferable, so we remove the first value from\n      // the stack to get rid of repetition :\n      relevantStack.shift();\n    }\n  }\n\n  // Example output:\n  // --------------------\n  // Chrome 40.0.2214 (Mac OS X 10.9.5) xxx should return false 1 FAILED\n  //    Expected true to be false\n  //    at /foo/bar/baz.spec.js:22:13\n  //    at /foo/bar/baz.js:18:29\n  return relevantMessage.concat(relevantStack).join('\\n');\n}\n\n\nfunction SuiteNode(name, parent) {\n  this.name = name;\n  this.parent = parent;\n  this.children = [];\n\n  this.addChild = function (name) {\n    var suite = new SuiteNode(name, this);\n    this.children.push(suite);\n    return suite;\n  };\n}\n\n\nfunction processSuite(suite, pointer) {\n  var child;\n  var childPointer;\n\n  for (var i = 0; i < suite.children.length; i++) {\n    child = suite.children[i];\n\n    if (child.children) {\n      childPointer = pointer[child.description] = {_: []};\n      processSuite(child, childPointer);\n    } else {\n      if (!pointer._) {\n        pointer._ = [];\n      }\n      pointer._.push(child.description);\n    }\n  }\n}\n\n\nfunction getAllSpecNames(topSuite) {\n  var specNames = {};\n\n  processSuite(topSuite, specNames);\n\n  return specNames;\n}\n\n\n/**\n * Very simple reporter for Jasmine.\n */\nfunction KarmaReporter(tc, jasmineEnv) {\n\n  var currentSuite = new SuiteNode();\n\n  /**\n   * @param suite\n   * @returns {boolean} Return true if it is system jasmine top level suite\n   */\n  function isTopLevelSuite(suite) {\n    return suite.description === 'Jasmine_TopLevel_Suite';\n  }\n\n  /**\n   * Jasmine 2.0 dispatches the following events:\n   *\n   *  - jasmineStarted\n   *  - jasmineDone\n   *  - suiteStarted\n   *  - suiteDone\n   *  - specStarted\n   *  - specDone\n   */\n\n  this.jasmineStarted = function (data) {\n    // TODO(vojta): Do not send spec names when polling.\n    tc.info({\n      total: data.totalSpecsDefined,\n      specs: getAllSpecNames(jasmineEnv.topSuite())\n    });\n  };\n\n\n  this.jasmineDone = function () {\n    tc.complete({\n      coverage: window.__coverage__\n    });\n  };\n\n\n  this.suiteStarted = function (result) {\n    if (!isTopLevelSuite(result)) {\n      currentSuite = currentSuite.addChild(result.description);\n    }\n  };\n\n\n  this.suiteDone = function (result) {\n    // In the case of xdescribe, only \"suiteDone\" is fired.\n    // We need to skip that.\n    if (result.description !== currentSuite.name) {\n      return;\n    }\n\n    currentSuite = currentSuite.parent;\n  };\n\n\n  this.specStarted = function (specResult) {\n    specResult.startTime = new Date().getTime();\n  };\n\n\n  this.specDone = function (specResult) {\n    var skipped = specResult.status === 'disabled' || specResult.status === 'pending';\n\n    var result = {\n      description : specResult.description,\n      id          : specResult.id,\n      log         : [],\n      skipped     : skipped,\n      success     : specResult.failedExpectations.length === 0,\n      suite       : [],\n      time        : skipped ? 0 : new Date().getTime() - specResult.startTime\n    };\n\n    // generate ordered list of (nested) suite names\n    var suitePointer = currentSuite;\n    while (suitePointer.parent) {\n      result.suite.unshift(suitePointer.name);\n      suitePointer = suitePointer.parent;\n    }\n\n    if (!result.success) {\n      var steps = specResult.failedExpectations;\n      for (var i = 0, l = steps.length; i < l; i++) {\n        result.log.push(formatFailedStep(steps[i]));\n      }\n    }\n\n    tc.result(result);\n    delete specResult.startTime;\n  };\n}\n\n/**\n * Extract grep option from karma config\n * @param {[Array|string]} clientArguments The karma client arguments\n * @return {string} The value of grep option by default empty string\n */\nvar getGrepOption = function(clientArguments) {\n  var clientArgString = clientArguments || '';\n\n  if (Object.prototype.toString.call(clientArguments) === '[object Array]') {\n    clientArgString = clientArguments.join('=');\n  }\n\n  var match = /--grep=(.*)/.exec(clientArgString);\n  return match ? match[1] : '';\n};\n\n/**\n * Create jasmine spec filter\n * @param {Object} options Spec filter options\n */\nvar KarmaSpecFilter = function(options) {\n  var filterString = options && options.filterString() && options.filterString().replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n  var filterPattern = new RegExp(filterString);\n\n  this.matches = function(specName) {\n    return filterPattern.test(specName);\n  };\n};\n\n/**\n * @param {Object} config The karma config\n * @param {Object} jasmineEnv jasmine environment object\n */\nvar createSpecFilter = function(config, jasmineEnv) {\n  var specFilter = new KarmaSpecFilter({\n    filterString: function() {\n      return getGrepOption(config.args);\n    }\n  });\n\n  jasmineEnv.specFilter = function(spec) {\n    return specFilter.matches(spec.getFullName());\n  };\n};\n\n/**\n * Karma starter function factory.\n *\n * This function is invoked from the wrapper.\n * @see  adapter.wrapper\n *\n * @param  {Object}   karma        Karma runner instance.\n * @param  {Object}   [jasmineEnv] Optional Jasmine environment for testing.\n * @return {Function}              Karma starter function.\n */\nfunction createStartFn(karma, jasmineEnv) {\n  // This function will be assigned to `window.__karma__.start`:\n  return function () {\n    jasmineEnv = jasmineEnv || window.jasmine.getEnv();\n\n    jasmineEnv.addReporter(new KarmaReporter(karma, jasmineEnv));\n    jasmineEnv.execute();\n  };\n}\n\n\ncreateSpecFilter(window.__karma__.config, jasmine.getEnv());\nwindow.__karma__.start = createStartFn(window.__karma__);\n\n})(typeof window !== 'undefined' ? window : global);\n"]}