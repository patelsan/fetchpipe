{"version":3,"sources":["cli.js"],"names":[],"mappings":"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","file":"cli-compiled.js","sourcesContent":["var path = require('path')\nvar optimist = require('optimist')\nvar fs = require('fs')\n\nvar Server = require('./server')\nvar helper = require('./helper')\nvar constant = require('./constants')\n\nvar processArgs = function (argv, options, fs, path) {\n  if (argv.help) {\n    console.log(optimist.help())\n    process.exit(0)\n  }\n\n  if (argv.version) {\n    console.log('Karma version: ' + constant.VERSION)\n    process.exit(0)\n  }\n\n  // TODO(vojta): warn/throw when unknown argument (probably mispelled)\n  Object.getOwnPropertyNames(argv).forEach(function (name) {\n    var argumentValue = argv[name]\n    if (name !== '_' && name !== '$0') {\n      if (Array.isArray(argumentValue)) {\n        // If the same argument is defined multiple times, override.\n        argumentValue = argumentValue.pop()\n      }\n      options[helper.dashToCamel(name)] = argumentValue\n    }\n  })\n\n  if (helper.isString(options.autoWatch)) {\n    options.autoWatch = options.autoWatch === 'true'\n  }\n\n  if (helper.isString(options.colors)) {\n    options.colors = options.colors === 'true'\n  }\n\n  if (helper.isString(options.logLevel)) {\n    var logConstant = constant['LOG_' + options.logLevel.toUpperCase()]\n    if (helper.isDefined(logConstant)) {\n      options.logLevel = logConstant\n    } else {\n      console.error('Log level must be one of disable, error, warn, info, or debug.')\n      process.exit(1)\n    }\n  } else if (helper.isDefined(options.logLevel)) {\n    console.error('Log level must be one of disable, error, warn, info, or debug.')\n    process.exit(1)\n  }\n\n  if (helper.isString(options.singleRun)) {\n    options.singleRun = options.singleRun === 'true'\n  }\n\n  if (helper.isString(options.browsers)) {\n    options.browsers = options.browsers.split(',')\n  }\n\n  if (options.reportSlowerThan === false) {\n    options.reportSlowerThan = 0\n  }\n\n  if (helper.isString(options.reporters)) {\n    options.reporters = options.reporters.split(',')\n  }\n\n  if (helper.isString(options.removedFiles)) {\n    options.removedFiles = options.removedFiles.split(',')\n  }\n\n  if (helper.isString(options.addedFiles)) {\n    options.addedFiles = options.addedFiles.split(',')\n  }\n\n  if (helper.isString(options.changedFiles)) {\n    options.changedFiles = options.changedFiles.split(',')\n  }\n\n  if (helper.isString(options.refresh)) {\n    options.refresh = options.refresh === 'true'\n  }\n\n  var configFile = argv._.shift()\n\n  if (!configFile) {\n    // default config file (if exists)\n    if (fs.existsSync('./karma.conf.js')) {\n      configFile = './karma.conf.js'\n    } else if (fs.existsSync('./karma.conf.coffee')) {\n      configFile = './karma.conf.coffee'\n    }\n  }\n\n  options.configFile = configFile ? path.resolve(configFile) : null\n\n  return options\n}\n\nvar parseClientArgs = function (argv) {\n  // extract any args after '--' as clientArgs\n  var clientArgs = []\n  argv = argv.slice(2)\n  var idx = argv.indexOf('--')\n  if (idx !== -1) {\n    clientArgs = argv.slice(idx + 1)\n  }\n  return clientArgs\n}\n\n// return only args that occur before `--`\nvar argsBeforeDoubleDash = function (argv) {\n  var idx = argv.indexOf('--')\n\n  return idx === -1 ? argv : argv.slice(0, idx)\n}\n\nvar describeShared = function () {\n  optimist\n    .usage('Karma - Spectacular Test Runner for JavaScript.\\n\\n' +\n      'Usage:\\n' +\n      '  $0 <command>\\n\\n' +\n      'Commands:\\n' +\n      '  start [<configFile>] [<options>] Start the server / do single run.\\n' +\n      '  init [<configFile>] Initialize a config file.\\n' +\n      '  run [<options>] [ -- <clientArgs>] Trigger a test run.\\n' +\n      '  completion Shell completion for karma.\\n\\n' +\n      'Run --help with particular command to see its description and available options.')\n    .describe('help', 'Print usage and options.')\n    .describe('version', 'Print current version.')\n}\n\nvar describeInit = function () {\n  optimist\n    .usage('Karma - Spectacular Test Runner for JavaScript.\\n\\n' +\n      'INIT - Initialize a config file.\\n\\n' +\n      'Usage:\\n' +\n      '  $0 init [<configFile>]')\n    .describe('log-level', '<disable | error | warn | info | debug> Level of logging.')\n    .describe('colors', 'Use colors when reporting and printing logs.')\n    .describe('no-colors', 'Do not use colors when reporting or printing logs.')\n    .describe('help', 'Print usage and options.')\n}\n\nvar describeStart = function () {\n  optimist\n    .usage('Karma - Spectacular Test Runner for JavaScript.\\n\\n' +\n      'START - Start the server / do a single run.\\n\\n' +\n      'Usage:\\n' +\n      '  $0 start [<configFile>] [<options>]')\n    .describe('port', '<integer> Port where the server is running.')\n    .describe('auto-watch', 'Auto watch source files and run on change.')\n    .describe('no-auto-watch', 'Do not watch source files.')\n    .describe('log-level', '<disable | error | warn | info | debug> Level of logging.')\n    .describe('colors', 'Use colors when reporting and printing logs.')\n    .describe('no-colors', 'Do not use colors when reporting or printing logs.')\n    .describe('reporters', 'List of reporters (available: dots, progress, junit, growl, coverage).')\n    .describe('browsers', 'List of browsers to start (eg. --browsers Chrome,ChromeCanary,Firefox).')\n    .describe('capture-timeout', '<integer> Kill browser if does not capture in given time [ms].')\n    .describe('single-run', 'Run the test when browsers captured and exit.')\n    .describe('no-single-run', 'Disable single-run.')\n    .describe('report-slower-than', '<integer> Report tests that are slower than given time [ms].')\n    .describe('help', 'Print usage and options.')\n}\n\nvar describeRun = function () {\n  optimist\n    .usage('Karma - Spectacular Test Runner for JavaScript.\\n\\n' +\n      'RUN - Run the tests (requires running server).\\n\\n' +\n      'Usage:\\n' +\n      '  $0 run [<configFile>] [<options>] [ -- <clientArgs>]')\n    .describe('port', '<integer> Port where the server is listening.')\n    .describe('no-refresh', 'Do not re-glob all the patterns.')\n    .describe('help', 'Print usage.')\n}\n\nvar describeCompletion = function () {\n  optimist\n    .usage('Karma - Spectacular Test Runner for JavaScript.\\n\\n' +\n      'COMPLETION - Bash/ZSH completion for karma.\\n\\n' +\n      'Installation:\\n' +\n      '  $0 completion >> ~/.bashrc\\n')\n    .describe('help', 'Print usage.')\n}\n\nexports.process = function () {\n  var argv = optimist.parse(argsBeforeDoubleDash(process.argv.slice(2)))\n  var options = {\n    cmd: argv._.shift()\n  }\n\n  switch (options.cmd) {\n    case 'start':\n      describeStart()\n      break\n\n    case 'run':\n      describeRun()\n      options.clientArgs = parseClientArgs(process.argv)\n      break\n\n    case 'init':\n      describeInit()\n      break\n\n    case 'completion':\n      describeCompletion()\n      break\n\n    default:\n      describeShared()\n      if (!options.cmd) {\n        processArgs(argv, options, fs, path)\n        console.error('Command not specified.')\n      } else {\n        console.error('Unknown command \"' + options.cmd + '\".')\n      }\n      optimist.showHelp()\n      process.exit(1)\n  }\n\n  return processArgs(argv, options, fs, path)\n}\n\nexports.run = function () {\n  var config = exports.process()\n\n  switch (config.cmd) {\n    case 'start':\n      new Server(config).start()\n      break\n    case 'run':\n      require('./runner').run(config)\n      break\n    case 'init':\n      require('./init').init(config)\n      break\n    case 'completion':\n      require('./completion').completion(config)\n      break\n  }\n}\n\n// just for testing\nexports.processArgs = processArgs\nexports.parseClientArgs = parseClientArgs\nexports.argsBeforeDoubleDash = argsBeforeDoubleDash\n"]}