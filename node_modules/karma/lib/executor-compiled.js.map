{"version":3,"sources":["executor.js"],"names":[],"mappings":";;AAAA,IAAI,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,CAAA;;AAEtC,IAAI,QAAQ,GAAG,SAAX,QAAQ,CAAa,gBAAgB,EAAE,MAAM,EAAE,OAAO,EAAE;AAC1D,MAAI,IAAI,GAAG,IAAI,CAAA;AACf,MAAI,kBAAkB,GAAG,KAAK,CAAA;AAC9B,MAAI,YAAY,GAAG,CAAC,CAAA;AACpB,MAAI,eAAe,CAAA;;AAEnB,MAAI,QAAQ,GAAG,SAAX,QAAQ,GAAe;AACzB,QAAI,QAAQ,GAAG,EAAE,CAAA;;AAEjB,QAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE;AAC5B,SAAG,CAAC,IAAI,CAAC,uCAAuC,EAAE,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAChF,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,CAAA;AAC9B,aAAO,KAAK,CAAA;KACb;;AAED,QAAI,gBAAgB,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE;AAC1C,SAAG,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAA;AAC9C,wBAAkB,GAAG,KAAK,CAAA;AAC1B,sBAAgB,CAAC,YAAY,EAAE,CAAA;AAC/B,sBAAgB,CAAC,iBAAiB,EAAE,CAAA;AACpC,kBAAY,GAAG,gBAAgB,CAAC,MAAM,CAAA;AACtC,qBAAe,GAAG,gBAAgB,CAAC,KAAK,EAAE,CAAA;AAC1C,aAAO,CAAC,IAAI,CAAC,WAAW,EAAE,eAAe,CAAC,CAAA;AAC1C,UAAI,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC,CAAA;AACnD,aAAO,IAAI,CAAA;KACZ;;AAED,OAAG,CAAC,IAAI,CAAC,oDAAoD,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;AACpF,sBAAkB,GAAG,IAAI,CAAA;AACzB,WAAO,KAAK,CAAA;GACb,CAAA;;AAED,MAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;;AAExB,MAAI,CAAC,aAAa,GAAG,YAAY;AAC/B,QAAI,kBAAkB,EAAE;AACtB,cAAQ,EAAE,CAAA;KACX;GACF,CAAA;;AAED,MAAI,CAAC,iBAAiB,GAAG,YAAY;AACnC,gBAAY,EAAE,CAAA;;AAEd,QAAI,CAAC,YAAY,EAAE;AACjB,aAAO,CAAC,IAAI,CAAC,cAAc,EAAE,eAAe,EAAE,eAAe,CAAC,UAAU,EAAE,CAAC,CAAA;KAC5E;GACF,CAAA;;;AAGD,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;CACnB,CAAA;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAA","file":"executor-compiled.js","sourcesContent":["var log = require('./logger').create()\n\nvar Executor = function (capturedBrowsers, config, emitter) {\n  var self = this\n  var executionScheduled = false\n  var pendingCount = 0\n  var runningBrowsers\n\n  var schedule = function () {\n    var nonReady = []\n\n    if (!capturedBrowsers.length) {\n      log.warn('No captured browser, open %s//%s:%s%s', config.protocol, config.hostname,\n        config.port, config.urlRoot)\n      return false\n    }\n\n    if (capturedBrowsers.areAllReady(nonReady)) {\n      log.debug('All browsers are ready, executing')\n      executionScheduled = false\n      capturedBrowsers.clearResults()\n      capturedBrowsers.setAllToExecuting()\n      pendingCount = capturedBrowsers.length\n      runningBrowsers = capturedBrowsers.clone()\n      emitter.emit('run_start', runningBrowsers)\n      self.socketIoSockets.emit('execute', config.client)\n      return true\n    }\n\n    log.info('Delaying execution, these browsers are not ready: ' + nonReady.join(', '))\n    executionScheduled = true\n    return false\n  }\n\n  this.schedule = schedule\n\n  this.onRunComplete = function () {\n    if (executionScheduled) {\n      schedule()\n    }\n  }\n\n  this.onBrowserComplete = function () {\n    pendingCount--\n\n    if (!pendingCount) {\n      emitter.emit('run_complete', runningBrowsers, runningBrowsers.getResults())\n    }\n  }\n\n  // bind all the events\n  emitter.bind(this)\n}\n\nmodule.exports = Executor\n"]}