{"version":3,"sources":["state_machine.js"],"names":[],"mappings":"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","file":"state_machine-compiled.js","sourcesContent":["var util = require('util')\nvar EventEmitter = require('events').EventEmitter\n\nvar StateMachine = function (rli, colors) {\n  var questions\n  var currentQuestion\n  var answers\n  var currentOptions\n  var currentOptionsPointer\n  var currentQuestionId\n  var done\n\n  EventEmitter.call(this)\n\n  var showPrompt = function () {\n    rli.write(colors.ANSWER)\n    rli.prompt()\n  }\n\n  this.onKeypress = function (key) {\n    if (!currentOptions || !key) {\n      return\n    }\n\n    if (key.name === 'tab' || key.name === 'right' || key.name === 'down') {\n      this.suggestNextOption()\n    } else if (key.name === 'left' || key.name === 'up') {\n      currentOptionsPointer = currentOptionsPointer + currentOptions.length - 2\n      this.suggestNextOption()\n    }\n\n    if (!key.ctrl && !key.meta && key.name !== 'enter' && key.name !== 'return') {\n      key.name = 'escape'\n    }\n  }\n\n  this.suggestNextOption = function () {\n    if (!currentOptions) {\n      return\n    }\n\n    currentOptionsPointer = (currentOptionsPointer + 1) % currentOptions.length\n    rli._deleteLineLeft()\n    rli._deleteLineRight()\n    rli.write(currentOptions[currentOptionsPointer])\n  }\n\n  this.kill = function () {\n    currentOptions = null\n    currentQuestionId = null\n    rli.write('\\n' + colors.RESET + '\\n')\n    rli.close()\n  }\n\n  this.onLine = function (line) {\n    if (currentQuestionId) {\n      rli.write(colors.RESET)\n      line = line.trim().replace(colors.ANSWER, '').replace(colors.RESET, '')\n\n      if (currentOptions) {\n        currentOptionsPointer = currentOptions.indexOf(line)\n        if (currentOptionsPointer === -1) {\n          return\n        }\n      }\n\n      if (line === '') {\n        line = null\n      }\n\n      if (currentQuestion.boolean) {\n        line = (line === 'yes' || line === 'true' || line === 'on')\n      }\n\n      if (line !== null && currentQuestion.validate) {\n        currentQuestion.validate(line)\n      }\n\n      if (currentQuestion.multiple) {\n        answers[currentQuestionId] = answers[currentQuestionId] || []\n        if (line !== null) {\n          answers[currentQuestionId].push(line)\n          showPrompt()\n\n          if (currentOptions) {\n            currentOptions.splice(currentOptionsPointer, 1)\n            currentOptionsPointer = -1\n          }\n        } else {\n          this.nextQuestion()\n        }\n      } else {\n        answers[currentQuestionId] = line\n        this.nextQuestion()\n      }\n    }\n  }\n\n  this.nextQuestion = function () {\n    currentQuestion = questions.shift()\n\n    while (currentQuestion && currentQuestion.condition && !currentQuestion.condition(answers)) {\n      currentQuestion = questions.shift()\n    }\n\n    this.emit('next_question', currentQuestion)\n\n    if (currentQuestion) {\n      currentQuestionId = null\n\n      rli.write('\\n' + colors.question(currentQuestion.question) + '\\n')\n      rli.write(currentQuestion.hint + '\\n')\n      showPrompt()\n\n      currentOptions = currentQuestion.options || null\n      currentOptionsPointer = -1\n      currentQuestionId = currentQuestion.id\n\n      this.suggestNextOption()\n    } else {\n      currentQuestionId = null\n      currentOptions = null\n\n      // end\n      this.kill()\n      done(answers)\n    }\n  }\n\n  this.process = function (_questions, _done) {\n    questions = _questions\n    answers = {}\n    done = _done\n\n    this.nextQuestion()\n  }\n}\n\nutil.inherits(StateMachine, EventEmitter)\n\nmodule.exports = StateMachine\n"]}