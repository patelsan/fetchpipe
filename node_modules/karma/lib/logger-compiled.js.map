{"version":3,"sources":["logger.js"],"names":[],"mappings":";;;;;;;;AAMA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;AAC9B,IAAI,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;AAChC,IAAI,QAAQ,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;;;;;;;;;;;;;;AAcrC,IAAI,KAAK,GAAG,SAAR,KAAK,CAAa,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE;;AAE9C,MAAI,OAAO,GAAG,MAAM,GAAG,QAAQ,CAAC,aAAa,GAAG,QAAQ,CAAC,gBAAgB,CAAA;;;AAGzE,WAAS,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,SAAS,GAAG,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAA;;AAEjF,WAAS,GAAG,SAAS,CAAC,GAAG,CAAC,UAAU,QAAQ,EAAE;AAC5C,QAAI,QAAQ,CAAC,IAAI,KAAK,SAAS,EAAE;AAC/B,UAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE;AAC3E,gBAAQ,CAAC,MAAM,CAAC,OAAO,GAAG,OAAO,CAAA;OAClC;KACF;AACD,WAAO,QAAQ,CAAA;GAChB,CAAC,CAAA;;;AAGF,QAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAA;AAC/B,QAAM,CAAC,SAAS,CAAC;AACf,aAAS,EAAE,SAAS;GACrB,CAAC,CAAA;CACH,CAAA;;;;;;;AAOD,IAAI,MAAM,GAAG,SAAT,MAAM,CAAa,IAAI,EAAE,KAAK,EAAE;AAClC,MAAI,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,IAAI,OAAO,CAAC,CAAA;AAC9C,MAAI,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;AAC3B,UAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;GACvB;AACD,SAAO,MAAM,CAAA;CACd,CAAA;;;;AAID,OAAO,CAAC,MAAM,GAAG,MAAM,CAAA;AACvB,OAAO,CAAC,KAAK,GAAG,KAAK,CAAA","file":"logger-compiled.js","sourcesContent":["// This is the **logger** module for *Karma*. It uses\n// [log4js](https://github.com/nomiddlename/log4js-node) to handle and\n// configure all logging that happens inside of *Karma*.\n\n// ### Helpers and Setup\n\nvar log4js = require('log4js')\nvar helper = require('./helper')\nvar constant = require('./constants')\n\n// #### Public Functions\n\n// Setup the logger by passing in the configuration options. It needs\n// three argumentes:\n//\n//     setup(logLevel, colors, appenders)\n//\n// * `logLevel`: *String* Defines the global log level.\n// * `colors`: *Boolean* Use colors in the stdout or not.\n// * `appenders`: *Array* This will be passed as appenders to log4js\n//   to allow for fine grained configuration of log4js. For more information\n//   see https://github.com/nomiddlename/log4js-node.\nvar setup = function (level, colors, appenders) {\n  // Turn color on/off on the console appenders with pattern layout\n  var pattern = colors ? constant.COLOR_PATTERN : constant.NO_COLOR_PATTERN\n\n  // If there are no appenders use the default one\n  appenders = helper.isDefined(appenders) ? appenders : [constant.CONSOLE_APPENDER]\n\n  appenders = appenders.map(function (appender) {\n    if (appender.type === 'console') {\n      if (helper.isDefined(appender.layout) && appender.layout.type === 'pattern') {\n        appender.layout.pattern = pattern\n      }\n    }\n    return appender\n  })\n\n  // Pass the values to log4js\n  log4js.setGlobalLogLevel(level)\n  log4js.configure({\n    appenders: appenders\n  })\n}\n\n// Create a new logger. There are two optional arguments\n// * `name`, which defaults to `karma` and\n//   If the `name = 'socket.io'` this will create a special wrapper\n//   to be used as a logger for socket.io.\n// * `level`, which defaults to the global level.\nvar create = function (name, level) {\n  var logger = log4js.getLogger(name || 'karma')\n  if (helper.isDefined(level)) {\n    logger.setLevel(level)\n  }\n  return logger\n}\n\n// #### Publish\n\nexports.create = create\nexports.setup = setup\n"]}