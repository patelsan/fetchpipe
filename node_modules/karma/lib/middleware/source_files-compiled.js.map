{"version":3,"sources":["source_files.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,GAAG,OAAO,CAAC,+BAA+B,CAAC,CAAA;AACnD,IAAI,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;AACxC,IAAI,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;AAChC,IAAI,CAAC,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAA;AAC9B,IAAI,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,CAAA;AACjC,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAA;;;AAGjD,IAAI,UAAU,GAAG,SAAb,UAAU,CAAa,KAAK,EAAE,IAAI,EAAE;AACtC,SAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,UAAU,IAAI,EAAE;AACzC,WAAO,IAAI,CAAC,IAAI,KAAK,IAAI,CAAA;GAC1B,CAAC,CAAA;CACH,CAAA;;;AAGD,IAAI,2BAA2B,GAAG,SAA9B,2BAA2B,CAAa,YAAY,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE;AACtF,SAAO,UAAU,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;AACxC,QAAI,iBAAiB,GAAG,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CACtD,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CACrB,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CACpB,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAC1B,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAA;;AAE/B,WAAO,CAAC,KAAK,EAAE,CAAA;;AAEf,OAAG,CAAC,KAAK,CAAC,eAAe,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;AAChD,OAAG,CAAC,KAAK,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAA;;AAE3C,WAAO,YAAY,CAAC,IAAI,CAAC,UAAU,KAAK,EAAE;;AAExC,UAAI,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAA;;AAEtD,UAAI,IAAI,EAAE;AACR,iBAAS,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,YAAY;AAC7D,cAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;;AAE7B,kBAAM,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAA;WACtC,MAAM;;AAEL,kBAAM,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAA;WACnC;SACF,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,CAAA;OAClC,MAAM;AACL,YAAI,EAAE,CAAA;OACP;;AAED,aAAO,CAAC,MAAM,EAAE,CAAA;KACjB,CAAC,CAAA;GACH,CAAA;CACF,CAAA;;AAED,2BAA2B,CAAC,OAAO,GAAG,CACpC,cAAc,EAAE,WAAW,EAAE,iBAAiB,EAAE,gBAAgB,CACjE,CAAA;;;AAGD,OAAO,CAAC,MAAM,GAAG,2BAA2B,CAAA","file":"source_files-compiled.js","sourcesContent":["var from = require('core-js/library/fn/array/from')\nvar querystring = require('querystring')\nvar common = require('./common')\nvar _ = require('../helper')._\nvar logger = require('../logger')\nvar log = logger.create('middlware:source-files')\n\n// Files is a Set\nvar findByPath = function (files, path) {\n  return _.find(from(files), function (file) {\n    return file.path === path\n  })\n}\n\n// Source Files middleware is responsible for serving all the source files under the test.\nvar createSourceFilesMiddleware = function (filesPromise, serveFile, basePath, urlRoot) {\n  return function (request, response, next) {\n    var requestedFilePath = querystring.unescape(request.url)\n      .replace(urlRoot, '/')\n      .replace(/\\?.*$/, '')\n      .replace(/^\\/absolute/, '')\n      .replace(/^\\/base/, basePath)\n\n    request.pause()\n\n    log.debug('Requesting %s', request.url, urlRoot)\n    log.debug('Fetching %s', requestedFilePath)\n\n    return filesPromise.then(function (files) {\n      // TODO(vojta): change served to be a map rather then an array\n      var file = findByPath(files.served, requestedFilePath)\n\n      if (file) {\n        serveFile(file.contentPath || file.path, response, function () {\n          if (/\\?\\w+/.test(request.url)) {\n            // files with timestamps - cache one year, rely on timestamps\n            common.setHeavyCacheHeaders(response)\n          } else {\n            // without timestamps - no cache (debug)\n            common.setNoCacheHeaders(response)\n          }\n        }, file.content, file.doNotCache)\n      } else {\n        next()\n      }\n\n      request.resume()\n    })\n  }\n}\n\ncreateSourceFilesMiddleware.$inject = [\n  'filesPromise', 'serveFile', 'config.basePath', 'config.urlRoot'\n]\n\n// PUBLIC API\nexports.create = createSourceFilesMiddleware\n"]}