{"version":3,"sources":["plugin.js"],"names":[],"mappings":";;AAAA,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AACtB,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;;AAE1B,IAAI,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;AAChC,IAAI,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;;AAE9C,IAAI,gBAAgB,GAAG,CAAC,WAAW,EAAE,yBAAyB,CAAC,CAAA;;AAE/D,OAAO,CAAC,OAAO,GAAG,UAAU,OAAO,EAAE;AACnC,MAAI,OAAO,GAAG,EAAE,CAAA;;AAEhB,MAAI,aAAa,GAAG,SAAhB,aAAa,CAAa,IAAI,EAAE;AAClC,OAAG,CAAC,KAAK,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAA;AACrC,QAAI;AACF,aAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAA;KAC5B,CAAC,OAAO,CAAC,EAAE;AACV,UAAI,CAAC,CAAC,IAAI,KAAK,kBAAkB,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AACnE,WAAG,CAAC,IAAI,CAAC,8DAA8D,GACrE,6BAA6B,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;OAC7C,MAAM;AACL,WAAG,CAAC,IAAI,CAAC,yCAAyC,EAAE,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAA;OACrE;KACF;GACF,CAAA;;AAED,SAAO,CAAC,OAAO,CAAC,UAAU,MAAM,EAAE;AAChC,QAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;AAC3B,UAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;AAC9B,YAAI,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,QAAQ,CAAC,CAAA;AAC1D,YAAI,MAAM,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAA;;AAExD,WAAG,CAAC,KAAK,CAAC,oBAAoB,EAAE,MAAM,EAAE,eAAe,CAAC,CAAA;AACxD,UAAE,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,UAAU,UAAU,EAAE;AAC3D,iBAAO,gBAAgB,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;SAC9E,CAAC,CAAC,OAAO,CAAC,UAAU,UAAU,EAAE;AAC/B,uBAAa,CAAC,eAAe,GAAG,GAAG,GAAG,UAAU,CAAC,CAAA;SAClD,CAAC,CAAA;OACH,MAAM;AACL,qBAAa,CAAC,MAAM,CAAC,CAAA;OACtB;KACF,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;AAClC,SAAG,CAAC,KAAK,CAAC,uCAAuC,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;AAClF,aAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;KACrB,MAAM;AACL,SAAG,CAAC,IAAI,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAA;KACtC;GACF,CAAC,CAAA;;AAEF,SAAO,OAAO,CAAA;CACf,CAAA","file":"plugin-compiled.js","sourcesContent":["var fs = require('fs')\nvar path = require('path')\n\nvar helper = require('./helper')\nvar log = require('./logger').create('plugin')\n\nvar IGNORED_PACKAGES = ['karma-cli', 'karma-runner.github.com']\n\nexports.resolve = function (plugins) {\n  var modules = []\n\n  var requirePlugin = function (name) {\n    log.debug('Loading plugin %s.', name)\n    try {\n      modules.push(require(name))\n    } catch (e) {\n      if (e.code === 'MODULE_NOT_FOUND' && e.message.indexOf(name) !== -1) {\n        log.warn('Cannot find plugin \"%s\".\\n  Did you forget to install it ?\\n' +\n          '  npm install %s --save-dev', name, name)\n      } else {\n        log.warn('Error during loading \"%s\" plugin:\\n  %s', name, e.message)\n      }\n    }\n  }\n\n  plugins.forEach(function (plugin) {\n    if (helper.isString(plugin)) {\n      if (plugin.indexOf('*') !== -1) {\n        var pluginDirectory = path.normalize(__dirname + '/../..')\n        var regexp = new RegExp('^' + plugin.replace('*', '.*'))\n\n        log.debug('Loading %s from %s', plugin, pluginDirectory)\n        fs.readdirSync(pluginDirectory).filter(function (pluginName) {\n          return IGNORED_PACKAGES.indexOf(pluginName) === -1 && regexp.test(pluginName)\n        }).forEach(function (pluginName) {\n          requirePlugin(pluginDirectory + '/' + pluginName)\n        })\n      } else {\n        requirePlugin(plugin)\n      }\n    } else if (helper.isObject(plugin)) {\n      log.debug('Loading inlined plugin (defining %s).', Object.keys(plugin).join(', '))\n      modules.push(plugin)\n    } else {\n      log.warn('Invalid plugin %s', plugin)\n    }\n  })\n\n  return modules\n}\n"]}