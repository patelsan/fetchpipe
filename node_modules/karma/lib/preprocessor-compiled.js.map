{"version":3,"sources":["preprocessor.js"],"names":[],"mappings":"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","file":"preprocessor-compiled.js","sourcesContent":["var path = require('path')\nvar fs = require('graceful-fs')\nvar crypto = require('crypto')\nvar mm = require('minimatch')\nvar extensions = require('./binary-extensions.json').extensions\n\nvar log = require('./logger').create('preprocess')\n\nvar sha1 = function (data) {\n  var hash = crypto.createHash('sha1')\n  hash.update(data)\n  return hash.digest('hex')\n}\n\nvar isBinary = Object.create(null)\nextensions.forEach(function (extension) {\n  isBinary['.' + extension] = true\n})\n\nvar createPreprocessor = function (config, basePath, injector) {\n  var alreadyDisplayedWarnings = {}\n  var instances = {}\n  var patterns = Object.keys(config)\n\n  var instantiatePreprocessor = function (name) {\n    if (alreadyDisplayedWarnings[name]) {\n      return\n    }\n\n    try {\n      instances[name] = injector.get('preprocessor:' + name)\n    } catch (e) {\n      if (e.message.indexOf('No provider for \"preprocessor:' + name + '\"') !== -1) {\n        log.warn('Can not load \"%s\", it is not registered!\\n  ' +\n                 'Perhaps you are missing some plugin?', name)\n      } else {\n        log.warn('Can not load \"%s\"!\\n  ' + e.stack, name)\n      }\n\n      alreadyDisplayedWarnings[name] = true\n    }\n  }\n\n  patterns.forEach(function (pattern) {\n    config[pattern].forEach(instantiatePreprocessor)\n  })\n\n  return function preprocess (file, done) {\n    patterns = Object.keys(config)\n    var thisFileIsBinary = isBinary[path.extname(file.originalPath).toLowerCase()]\n    var preprocessors = []\n\n    var nextPreprocessor = function (error, content) {\n      // normalize B-C\n      if (arguments.length === 1 && typeof error === 'string') {\n        content = error\n        error = null\n      }\n\n      if (error) {\n        file.content = null\n        file.contentPath = null\n        return done(error)\n      }\n\n      if (!preprocessors.length) {\n        file.contentPath = null\n        file.content = content\n        file.sha = sha1(content)\n        return done()\n      }\n\n      preprocessors.shift()(content, file, nextPreprocessor)\n    }\n\n    for (var i = 0; i < patterns.length; i++) {\n      if (mm(file.originalPath, patterns[i])) {\n        if (thisFileIsBinary) {\n          log.warn('Ignoring preprocessing (%s) %s because it is a binary file.',\n            config[patterns[i]].join(', '), file.originalPath)\n        } else {\n          config[patterns[i]].forEach(function (name) {\n            if (!instances[name]) {\n              instantiatePreprocessor(name)\n            }\n            preprocessors.push(instances[name])\n          })\n        }\n      }\n    }\n\n    return fs.readFile(file.originalPath, function (err, buffer) {\n      if (err) {\n        throw err\n      }\n      nextPreprocessor(null, thisFileIsBinary ? buffer : buffer.toString())\n    })\n  }\n}\ncreatePreprocessor.$inject = ['config.preprocessors', 'config.basePath', 'injector']\n\nexports.createPreprocessor = createPreprocessor\n"]}