{"version":3,"sources":["watcher.js"],"names":[],"mappings":"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","file":"watcher-compiled.js","sourcesContent":["var chokidar = require('chokidar')\nvar mm = require('minimatch')\nvar expandBraces = require('expand-braces')\n\nvar helper = require('./helper')\nvar log = require('./logger').create('watcher')\n\nvar DIR_SEP = require('path').sep\n\n// Get parent folder, that be watched (does not contain any special globbing character)\nvar baseDirFromPattern = function (pattern) {\n  return pattern\n    .replace(/[\\/\\\\][^\\/\\\\]*\\*.*$/, '')              // remove parts with *\n    .replace(/[\\/\\\\][^\\/\\\\]*[\\!\\+]\\(.*$/, '')        // remove parts with !(...) and +(...)\n    .replace(/[\\/\\\\][^\\/\\\\]*\\)\\?.*$/, '') || DIR_SEP // remove parts with (...)?\n}\n\nvar watchPatterns = function (patterns, watcher) {\n  // filter only unique non url patterns paths\n  var pathsToWatch = []\n  var uniqueMap = {}\n  var path\n\n  // expand ['a/{b,c}'] to ['a/b', 'a/c']\n  patterns = expandBraces(patterns)\n\n  patterns.forEach(function (pattern) {\n    path = baseDirFromPattern(pattern)\n    if (!uniqueMap[path]) {\n      uniqueMap[path] = true\n      pathsToWatch.push(path)\n    }\n  })\n\n  // watch only common parents, no sub paths\n  pathsToWatch.forEach(function (path) {\n    if (!pathsToWatch.some(function (p) {\n      return p !== path && path.substr(0, p.length + 1) === p + DIR_SEP\n    })) {\n      watcher.add(path)\n      log.debug('Watching \"%s\"', path)\n    }\n  })\n}\n\n// Function to test if a path should be ignored by chokidar.\nvar createIgnore = function (patterns, excludes) {\n  return function (path, stat) {\n    if (!stat || stat.isDirectory()) {\n      return false\n    }\n\n    // Check if the path matches any of the watched patterns.\n    if (!patterns.some(function (pattern) {\n      return mm(path, pattern, {dot: true})\n    })) {\n      return true\n    }\n\n    // Check if the path matches any of the exclude patterns.\n    if (excludes.some(function (pattern) {\n      return mm(path, pattern, {dot: true})\n    })) {\n      return true\n    }\n\n    return false\n  }\n}\n\nvar onlyWatchedTrue = function (pattern) {\n  return pattern.watched\n}\n\nvar getWatchedPatterns = function (patternObjects) {\n  return patternObjects.filter(onlyWatchedTrue).map(function (patternObject) {\n    return patternObject.pattern\n  })\n}\n\nexports.watch = function (patterns, excludes, fileList, usePolling, emitter) {\n  var watchedPatterns = getWatchedPatterns(patterns)\n  var options = {\n    usePolling: usePolling,\n    ignorePermissionErrors: true,\n    ignoreInitial: true,\n    ignored: createIgnore(watchedPatterns, excludes)\n  }\n  var chokidarWatcher = new chokidar.FSWatcher(options)\n\n  watchPatterns(watchedPatterns, chokidarWatcher)\n\n  var bind = function (fn) {\n    return function (path) {\n      return fn.call(fileList, helper.normalizeWinPath(path))\n    }\n  }\n\n  // register events\n  chokidarWatcher.on('add', bind(fileList.addFile))\n    .on('change', bind(fileList.changeFile))\n    .on('unlink', bind(fileList.removeFile))\n    // If we don't subscribe; unhandled errors from Chokidar will bring Karma down\n    // (see GH Issue #959)\n    .on('error', function (e) {\n      log.debug(e)\n    })\n\n  emitter.on('exit', function (done) {\n    chokidarWatcher.close()\n    done()\n  })\n\n  return chokidarWatcher\n}\n\nexports.watch.$inject = ['config.files', 'config.exclude', 'fileList', 'config.usePolling',\n  'emitter']\n"]}