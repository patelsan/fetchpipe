{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;AAkBb,SAAS,SAAS,CAAC,EAAE,EAAE;AACrB,MAAI,KAAK,GAAG,EAAE,CAAC;AACf,MAAI,KAAK,GAAG,SAAR,KAAK,CAAa,GAAG,EAAE,IAAI,EAAE;AAC/B,QAAI,GAAG,IAAI,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC;AAC9B,UAAM,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,EAAE;AACjC,SAAG,EAAE,MAAM;KACZ,CAAC,CAAC;;AAEH,aAAS,MAAM,GAAI;AACjB,UAAI,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;AAC9B,eAAO,KAAK,CAAC,IAAI,CAAC,CAAC;OACpB;AACD,UAAI;AACF,eAAQ,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAE;OAChC,CAAC,OAAO,GAAG,EAAE;AACZ,WAAG,CAAC,OAAO,GAAG,aAAa,GAAG,GAAG,CAAC,OAAO,GAAG,GAAG,GAAG,UAAU,CAAC;AAC7D,cAAM,GAAG,CAAC;OACX;KACF,CAAC;AACF,WAAO,MAAM,CAAC;GACf,CAAC;AACF,SAAO,KAAK,CAAC;CACd;;;;;;;;;AASD,SAAS,SAAS,CAAC,GAAG,EAAE;AACtB,MAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;AAAE,WAAO,GAAG,CAAC,WAAW,EAAE,CAAC;GAAE;AACnD,KAAG,GAAG,GAAG,CAAC,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;AACxD,SAAO,GAAG,CAAC,OAAO,CAAC,eAAe,EAAE,UAAU,CAAC,EAAE,EAAE,EAAE;AACnD,WAAO,EAAE,CAAC,WAAW,EAAE,CAAC;GACzB,CAAC,CAAC;CACJ;;;;;;AAMD,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC","file":"index-compiled.js","sourcesContent":["'use strict';\n\n/**\n * Cache results of the first function call to ensure only calling once.\n *\n * ```js\n * var lazy = require('lazy-cache')(require);\n * // cache the call to `require('ansi-yellow')`\n * lazy('ansi-yellow', 'yellow');\n * // use `ansi-yellow`\n * console.log(lazy.yellow('this is yellow'));\n * ```\n *\n * @param  {Function} `fn` Function that will be called only once.\n * @return {Function} Function that can be called to get the cached function\n * @api public\n */\n\nfunction lazyCache(fn) {\n  var cache = {};\n  var proxy = function (mod, name) {\n    name = name || camelcase(mod);\n    Object.defineProperty(proxy, name, {\n      get: getter\n    });\n\n    function getter () {\n      if (cache.hasOwnProperty(name)) {\n        return cache[name];\n      }\n      try {\n        return (cache[name] = fn(mod));\n      } catch (err) {\n        err.message = 'lazy-cache ' + err.message + ' ' + __filename;\n        throw err;\n      }\n    };\n    return getter;\n  };\n  return proxy;\n}\n\n/**\n * Used to camelcase the name to be stored on the `lazy` object.\n *\n * @param  {String} `str` String containing `_`, `.`, `-` or whitespace that will be camelcased.\n * @return {String} camelcased string.\n */\n\nfunction camelcase(str) {\n  if (str.length === 1) { return str.toLowerCase(); }\n  str = str.replace(/^[\\W_]+|[\\W_]+$/g, '').toLowerCase();\n  return str.replace(/[\\W_]+(\\w|$)/g, function (_, ch) {\n    return ch.toUpperCase();\n  });\n}\n\n/**\n * Expose `lazyCache`\n */\n\nmodule.exports = lazyCache;\n"]}