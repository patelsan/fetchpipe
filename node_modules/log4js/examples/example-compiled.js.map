{"version":3,"sources":["example.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;;AAEtC,MAAM,CAAC,SAAS,CAAC;AACb,aAAS,EAAE,CACP;AACI,YAAI,EAAE,MAAM;AACZ,gBAAQ,EAAE,YAAY;AACtB,gBAAQ,EAAE,CAAE,QAAQ,EAAC,SAAS,CAAE;KACnC,EACD;AACI,YAAI,EAAE,SAAS;KAClB,CACJ;AACD,kBAAc,EAAE,IAAI;CACvB,CAAC,CAAC;;;;AAIH,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;AAC5B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,OAAO,CAAC,CAAC;;;;;;;;;AAShE,IAAI,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;;;;AAIxC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;;;;AAIzB,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,EAAE,IAAI,EAAE,aAAa,EAAE,UAAU,EAAE,gBAAgB,EAAE,CAAC,CAAC;AACrG,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;;;AAGjD,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;AACxC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;AAC5B,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;AAChC,MAAM,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;AAC5C,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;;AAEvC,MAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,OAAO,CAAC,CAAC;AAChD,MAAM,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC;;;AAGzD,IAAI,aAAa,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;AAChD,aAAa,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;;;;AAIrC,IAAI,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AACzC,QAAQ,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC","file":"example-compiled.js","sourcesContent":["var log4js = require('../lib/log4js');\n//log the cheese logger messages to a file, and the console ones as well.\nlog4js.configure({\n    appenders: [\n        {\n            type: \"file\",\n            filename: \"cheese.log\",\n            category: [ 'cheese','console' ]\n        },\n        {\n            type: \"console\"\n        }\n    ],\n    replaceConsole: true\n});\n\n//to add an appender programmatically, and without clearing other appenders\n//loadAppender is only necessary if you haven't already configured an appender of this type\nlog4js.loadAppender('file');\nlog4js.addAppender(log4js.appenders.file('pants.log'), 'pants');\n//a custom logger outside of the log4js/lib/appenders directory can be accessed like so\n//log4js.loadAppender('what/you/would/put/in/require');\n//log4js.addAppender(log4js.appenders['what/you/would/put/in/require'](args));\n//or through configure as:\n//log4js.configure({\n//  appenders: [ { type: 'what/you/would/put/in/require', otherArgs: 'blah' } ]\n//});\n\nvar logger = log4js.getLogger('cheese');\n//only errors and above get logged.\n//you can also set this log level in the config object\n//via the levels field.\nlogger.setLevel('ERROR');\n\n//console logging methods have been replaced with log4js ones.\n//so this will get coloured output on console, and appear in cheese.log\nconsole.error(\"AAArgh! Something went wrong\", { some: \"otherObject\", useful_for: \"debug purposes\" });\nconsole.log(\"This should appear as info output\");\n\n//these will not appear (logging level beneath error)\nlogger.trace('Entering cheese testing');\nlogger.debug('Got cheese.');\nlogger.info('Cheese is Gouda.');\nlogger.log('Something funny about cheese.');\nlogger.warn('Cheese is quite smelly.');\n//these end up on the console and in cheese.log\nlogger.error('Cheese %s is too ripe!', \"gouda\");\nlogger.fatal('Cheese was breeding ground for listeria.');\n\n//these don't end up in cheese.log, but will appear on the console\nvar anotherLogger = log4js.getLogger('another');\nanotherLogger.debug(\"Just checking\");\n\n//one for pants.log\n//will also go to console, since that's configured for all categories\nvar pantsLog = log4js.getLogger('pants');\npantsLog.debug(\"Something for pants\");\n\n\n\n"]}