{"version":3,"sources":["example-connect-logger.js"],"names":[],"mappings":";;;;;;AAIA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACjC,IAAI,GAAG,GAAG,OAAO,EAAE,CAAC;;;AAGpB,MAAM,CAAC,SAAS,CAAC;AAChB,UAAS,EAAE,CACV,EAAE,IAAI,EAAE,SAAS,EAAE,EACnB,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,wBAAwB,EAAE,QAAQ,EAAE,WAAW,EAAE,CAC3E;CACD,CAAC,CAAC;;;AAGH,IAAI,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;;;;;;AAM3C,GAAG,CAAC,SAAS,CAAC,YAAW;AACxB,IAAG,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;;;;;;;;AAQ7B,IAAG,CAAC,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;CACzD,CAAC,CAAC;;;AAGH,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,UAAS,GAAG,EAAC,GAAG,EAAE;AAC9B,IAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;CACxB,CAAC,CAAC;;;AAGH,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;AAEjB,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;AAC/C,OAAO,CAAC,GAAG,CAAC,oDAAoD,CAAC,CAAC;AAClE,OAAO,CAAC,GAAG,CAAC,uDAAuD,CAAC,CAAC","file":"example-connect-logger-compiled.js","sourcesContent":["//The connect/express logger was added to log4js by danbell. This allows connect/express servers to log using log4js.\n//https://github.com/nomiddlename/log4js-node/wiki/Connect-Logger\n\n// load modules\nvar log4js = require('log4js');\nvar express = require(\"express\");\nvar app = express();\n\n//config\nlog4js.configure({\n\tappenders: [\n\t\t{ type: 'console' },\n\t\t{ type: 'file', filename: 'logs/log4jsconnect.log', category: 'log4jslog' }\n\t]\n});\n\n//define logger\nvar logger = log4js.getLogger('log4jslog');\n\n// set at which time msg is logged print like: only on error & above\n// logger.setLevel('ERROR');\n\n//express app\napp.configure(function() {\n\tapp.use(express.favicon(''));\n\t// app.use(log4js.connectLogger(logger, { level: log4js.levels.INFO }));\n\t// app.use(log4js.connectLogger(logger, { level: 'auto', format: ':method :url :status' }));\n\n\t//### AUTO LEVEL DETECTION\n\t//http responses 3xx, level = WARN\n\t//http responses 4xx & 5xx, level = ERROR\n\t//else.level = INFO\n\tapp.use(log4js.connectLogger(logger, { level: 'auto' }));\n});\n\n//route\napp.get('/', function(req,res) {\n\tres.send('hello world');\n});\n\n//start app\napp.listen(5000);\n\nconsole.log('server runing at localhost:5000');\nconsole.log('Simulation of normal response: goto localhost:5000');\nconsole.log('Simulation of error response: goto localhost:5000/xxx');\n"]}