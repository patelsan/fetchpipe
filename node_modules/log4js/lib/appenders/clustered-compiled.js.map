{"version":3,"sources":["clustered.js"],"names":[],"mappings":"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","file":"clustered-compiled.js","sourcesContent":["\"use strict\";\n\nvar cluster = require('cluster');\nvar log4js = require('../log4js');\n\n/**\n * Takes a loggingEvent object, returns string representation of it.\n */\nfunction serializeLoggingEvent(loggingEvent) {\n\t// JSON.stringify(new Error('test')) returns {}, which is not really useful for us.\n\t// The following allows us to serialize errors correctly.\n\tfor (var i = 0; i < loggingEvent.data.length; i++) {\n\t\tvar item = loggingEvent.data[i];\n\t\tif (item && item.stack && JSON.stringify(item) === '{}') { // Validate that we really are in this case\n\t\t\tloggingEvent.data[i] = {stack : item.stack};\n\t\t}\n\t}\n\treturn JSON.stringify(loggingEvent);\n}\n\n/**\n * Takes a string, returns an object with\n * the correct log properties.\n *\n * This method has been \"borrowed\" from the `multiprocess` appender \n * by `nomiddlename` (https://github.com/nomiddlename/log4js-node/blob/master/lib/appenders/multiprocess.js)\n *\n * Apparently, node.js serializes everything to strings when using `process.send()`, \n * so we need smart deserialization that will recreate log date and level for further processing by log4js internals.\n */\nfunction deserializeLoggingEvent(loggingEventString) {\n\n\tvar loggingEvent;\n\t\n\ttry {\n\t\n\t\tloggingEvent = JSON.parse(loggingEventString);\n\t\tloggingEvent.startTime = new Date(loggingEvent.startTime);\n\t\tloggingEvent.level = log4js.levels.toLevel(loggingEvent.level.levelStr);\n\t\t// Unwrap serialized errors\n\t\tfor (var i = 0; i < loggingEvent.data.length; i++) {\n\t\t\tvar item = loggingEvent.data[i];\n\t\t\tif (item && item.stack) {\n\t\t\t\tloggingEvent.data[i] = item.stack;\n\t\t\t}\n\t\t}\n\n\t} catch (e) {\n\t\t\n\t\t// JSON.parse failed, just log the contents probably a naughty.\n\t\tloggingEvent = {\n\t\t\tstartTime: new Date(),\n\t\t\tcategoryName: 'log4js',\n\t\t\tlevel: log4js.levels.ERROR,\n\t\t\tdata: [ 'Unable to parse log:', loggingEventString ]\n\t\t};\n\t}\n\treturn loggingEvent;\n} \n\n/**\n * Creates an appender. \n *\n * If the current process is a master (`cluster.isMaster`), then this will be a \"master appender\".\n * Otherwise this will be a worker appender, that just sends loggingEvents to the master process.\n *\n * If you are using this method directly, make sure to provide it with `config.actualAppenders` array \n * of actual appender instances.\n *\n * Or better use `configure(config, options)`\n */\nfunction createAppender(config) {\n\n\tif (cluster.isMaster) {\n\n\t\tvar masterAppender = function(loggingEvent) {\n\t\n\t\t\tif (config.actualAppenders) {\n\t\t\t\tvar size = config.actualAppenders.length;\n\t\t\t\tfor(var i = 0; i < size; i++) {\n\t\t\t                if (!config.appenders[i].category || config.appenders[i].category === loggingEvent.categoryName) {\n\t\t\t\t\t\t// Relying on the index is not a good practice but otherwise the change would have been bigger.\n\t\t\t\t\t\tconfig.actualAppenders[i](loggingEvent);\n                    \t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Listen on new workers\n\t\tcluster.on('fork', function(worker) {\n\t\t\n\t\t\tworker.on('message', function(message) {\n\t\t\t\tif (message.type && message.type === '::log-message') {\n\t\t\t\t\t// console.log(\"master : \" + cluster.isMaster + \" received message: \" + JSON.stringify(message.event));\n\t\t\t\t\t\n\t\t\t\t\tvar loggingEvent = deserializeLoggingEvent(message.event);\n\t\t\t\t\t\n\t\t\t\t\t// Adding PID metadata\n\t\t\t\t\tloggingEvent.pid = worker.process.pid;\n\t\t\t\t\tloggingEvent.cluster = {\n\t\t\t\t\t\tmaster: process.pid,\n\t\t\t\t\t\tworker: worker.process.pid,\n\t\t\t\t\t\tworkerId: worker.id\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tmasterAppender(loggingEvent);\n\t\t\t\t}\n\t\t\t});\n\t\t\n\t\t});\n\t\t\n\t\treturn masterAppender;\n\t\t\n\t} else {\n\n\t\treturn function(loggingEvent) {\n\t\t\t// If inside the worker process, then send the logger event to master.\n\t\t\tif (cluster.isWorker) {\n\t\t\t\t// console.log(\"worker \" + cluster.worker.id + \" is sending message\");\n\t\t\t\tprocess.send({ type: '::log-message', event: serializeLoggingEvent(loggingEvent)});\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction configure(config, options) {\n\n\tif (config.appenders && cluster.isMaster) {\n\t\n\t\tvar size = config.appenders.length;\n\t\tconfig.actualAppenders = new Array(size);\n\t\n\t\tfor(var i = 0; i < size; i++) {\n\t\t\n\t\t\tlog4js.loadAppender(config.appenders[i].type);\n\t\t\tconfig.actualAppenders[i] = log4js.appenderMakers[config.appenders[i].type](config.appenders[i], options);\n\t\t\n\t\t}\n\t}\n\t\n\treturn createAppender(config);\n}\n\nexports.appender = createAppender;\nexports.configure = configure; \n"]}