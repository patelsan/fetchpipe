{"version":3,"sources":["gelf.js"],"names":[],"mappings":"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","file":"gelf-compiled.js","sourcesContent":["\"use strict\";\nvar zlib = require('zlib');\nvar layouts = require('../layouts');\nvar levels = require('../levels');\nvar dgram = require('dgram');\nvar util = require('util');\nvar debug = require('../debug')('GELF Appender');\n\nvar LOG_EMERG=0;    // system is unusable\nvar LOG_ALERT=1;    // action must be taken immediately\nvar LOG_CRIT=2;     // critical conditions\nvar LOG_ERR=3;      // error conditions\nvar LOG_ERROR=3;    // because people WILL typo\nvar LOG_WARNING=4;  // warning conditions\nvar LOG_NOTICE=5;   // normal, but significant, condition\nvar LOG_INFO=6;     // informational message\nvar LOG_DEBUG=7;    // debug-level message\n\nvar levelMapping = {};\nlevelMapping[levels.ALL] = LOG_DEBUG;\nlevelMapping[levels.TRACE] = LOG_DEBUG;\nlevelMapping[levels.DEBUG] = LOG_DEBUG;\nlevelMapping[levels.INFO] = LOG_INFO;\nlevelMapping[levels.WARN] = LOG_WARNING;\nlevelMapping[levels.ERROR] = LOG_ERR;\nlevelMapping[levels.FATAL] = LOG_CRIT;\n\n/**\n * GELF appender that supports sending UDP packets to a GELF compatible server such as Graylog\n *\n * @param layout a function that takes a logevent and returns a string (defaults to none).\n * @param host - host to which to send logs (default:localhost)\n * @param port - port at which to send logs to (default:12201)\n * @param hostname - hostname of the current host (default:os hostname)\n * @param facility - facility to log to (default:nodejs-server)\n */\nfunction gelfAppender (layout, host, port, hostname, facility) {\n  var config, customFields;\n  if (typeof(host) === 'object') {\n    config = host;\n    host = config.host;\n    port = config.port;\n    hostname = config.hostname;\n    facility = config.facility;\n    customFields = config.customFields;\n  }\n  \n  host = host || 'localhost';\n  port = port || 12201;\n  hostname = hostname || require('os').hostname();\n  layout = layout || layouts.messagePassThroughLayout;\n\n  var defaultCustomFields = customFields || {};\n\n  if(facility) {\n    defaultCustomFields['_facility'] = facility;\n  }\n\n  var client = dgram.createSocket(\"udp4\");\n  \n  process.on('exit', function() {\n    if (client) client.close();\n  });\n\n  /**\n   * Add custom fields (start with underscore ) \n   * - if the first object passed to the logger contains 'GELF' field, \n   *   copy the underscore fields to the message\n   * @param loggingEvent\n   * @param msg\n   */\n  function addCustomFields(loggingEvent, msg){\n\n    /* append defaultCustomFields firsts */\n    Object.keys(defaultCustomFields).forEach(function(key) {\n      // skip _id field for graylog2, skip keys not starts with UNDERSCORE\n      if (key.match(/^_/) && key !== \"_id\") { \n        msg[key] = defaultCustomFields[key];\n      }\n    });\n\n    /* append custom fields per message */\n    var data = loggingEvent.data;\n    if (!Array.isArray(data) || data.length === 0) return;\n    var firstData = data[0];\n    \n    if (!firstData.GELF) return; // identify with GELF field defined\n    // Remove the GELF key, some gelf supported logging systems drop the message with it\n    delete firstData.GELF;\n    Object.keys(firstData).forEach(function(key) {\n      // skip _id field for graylog2, skip keys not starts with UNDERSCORE\n      if (key.match(/^_/) || key !== \"_id\") { \n        msg[key] = firstData[key];\n      }\n    });\n    \n    /* the custom field object should be removed, so it will not be looged by the later appenders */\n    loggingEvent.data.shift(); \n  }\n \n  function preparePacket(loggingEvent) {\n    var msg = {};\n    addCustomFields(loggingEvent, msg);\n    msg.short_message = layout(loggingEvent);\n    \n    msg.version=\"1.1\";\n    msg.timestamp = msg.timestamp || new Date().getTime() / 1000; // log should use millisecond \n    msg.host = hostname;\n    msg.level = levelMapping[loggingEvent.level || levels.DEBUG];\n    return msg;\n  }\n  \n  function sendPacket(packet) {\n    try {\n      client.send(packet, 0, packet.length, port, host);\n    } catch(e) {}\n  }\n\n  return function(loggingEvent) {\n    var message = preparePacket(loggingEvent);\n    zlib.gzip(new Buffer(JSON.stringify(message)), function(err, packet) {\n      if (err) {\n        console.error(err.stack);\n      } else {\n        if (packet.length > 8192) {\n          debug(\"Message packet length (\" + packet.length + \") is larger than 8k. Not sending\");\n        } else {\n          sendPacket(packet);\n        }\n      }\n    });\n  };\n}\n\nfunction configure(config) {\n  var layout;\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n  return gelfAppender(layout, config);\n}\n\nexports.appender = gelfAppender;\nexports.configure = configure;\n"]}