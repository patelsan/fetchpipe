{"version":3,"sources":["levels.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,SAAS,KAAK,CAAC,KAAK,EAAE,QAAQ,EAAE;AAC9B,MAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,MAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;CAC1B;;;;;;;;;AASD,SAAS,OAAO;;;4BAAqB;QAApB,IAAI;QAAE,YAAY;AAO3B,KAAC;;;AALP,QAAI,CAAC,IAAI,EAAE;AACT,aAAO,YAAY,CAAC;KACrB;;AAED,QAAI,OAAO,IAAI,IAAI,QAAQ,EAAE;AAC3B,UAAI,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;AAC3B,UAAI,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;AACrB,eAAO,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;OAC1B,MAAM;AACL,eAAO,YAAY,CAAC;OACrB;KACF;;SAEc,IAAI,CAAC,QAAQ,EAAE;;;;GAC/B;CAAA;;AAED,KAAK,CAAC,SAAS,CAAC,QAAQ,GAAG,YAAW;AACpC,SAAO,IAAI,CAAC,QAAQ,CAAC;CACtB,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,mBAAmB,GAAG,UAAS,UAAU,EAAE;AACzD,MAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;AAClC,cAAU,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;GAClC;AACD,SAAO,IAAI,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,CAAC;CACvC,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,sBAAsB,GAAG,UAAS,UAAU,EAAE;AAC5D,MAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;AAClC,cAAU,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;GAClC;AACD,SAAO,IAAI,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,CAAC;CACvC,CAAC;;AAEF,KAAK,CAAC,SAAS,CAAC,SAAS,GAAG,UAAS,UAAU,EAAE;AAC/C,MAAI,OAAO,UAAU,IAAI,QAAQ,EAAE;AACjC,cAAU,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;GAClC;AACD,SAAO,IAAI,CAAC,KAAK,KAAK,UAAU,CAAC,KAAK,CAAC;CACxC,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG;AACf,KAAG,EAAE,IAAI,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC;AACvC,OAAK,EAAE,IAAI,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC;AAC/B,OAAK,EAAE,IAAI,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC;AAChC,MAAI,EAAE,IAAI,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC;AAC9B,MAAI,EAAE,IAAI,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC;AAC9B,OAAK,EAAE,IAAI,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC;AAChC,OAAK,EAAE,IAAI,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC;AAChC,MAAI,EAAE,IAAI,KAAK,CAAC,gBAAgB,EAAE,MAAM,CAAC;AACzC,KAAG,EAAE,IAAI,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC;AACvC,SAAO,EAAE,OAAO;CACjB,CAAC","file":"levels-compiled.js","sourcesContent":["\"use strict\";\n\nfunction Level(level, levelStr) {\n  this.level = level;\n  this.levelStr = levelStr;\n}\n\n/**\n * converts given String to corresponding Level\n * @param {String} sArg String value of Level OR Log4js.Level\n * @param {Log4js.Level} defaultLevel default Level, if no String representation\n * @return Level object\n * @type Log4js.Level\n */\nfunction toLevel(sArg, defaultLevel) {\n\n  if (!sArg) {\n    return defaultLevel;\n  }\n\n  if (typeof sArg == \"string\") {\n    var s = sArg.toUpperCase();\n    if (module.exports[s]) {\n      return module.exports[s];\n    } else {\n      return defaultLevel;\n    }\n  }\n\n  return toLevel(sArg.toString());\n}\n\nLevel.prototype.toString = function() {\n  return this.levelStr;\n};\n\nLevel.prototype.isLessThanOrEqualTo = function(otherLevel) {\n  if (typeof otherLevel === \"string\") {\n    otherLevel = toLevel(otherLevel);\n  }\n  return this.level <= otherLevel.level;\n};\n\nLevel.prototype.isGreaterThanOrEqualTo = function(otherLevel) {\n  if (typeof otherLevel === \"string\") {\n    otherLevel = toLevel(otherLevel);\n  }\n  return this.level >= otherLevel.level;\n};\n\nLevel.prototype.isEqualTo = function(otherLevel) {\n  if (typeof otherLevel == \"string\") {\n    otherLevel = toLevel(otherLevel);\n  }\n  return this.level === otherLevel.level;\n};\n\nmodule.exports = {\n  ALL: new Level(Number.MIN_VALUE, \"ALL\"), \n  TRACE: new Level(5000, \"TRACE\"), \n  DEBUG: new Level(10000, \"DEBUG\"), \n  INFO: new Level(20000, \"INFO\"), \n  WARN: new Level(30000, \"WARN\"), \n  ERROR: new Level(40000, \"ERROR\"), \n  FATAL: new Level(50000, \"FATAL\"), \n  MARK: new Level(9007199254740992, \"MARK\"), // 2^53\n  OFF: new Level(Number.MAX_VALUE, \"OFF\"), \n  toLevel: toLevel\n};\n"]}