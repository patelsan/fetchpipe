{"version":3,"sources":["clusteredAppender-test.js"],"names":[],"mappings":"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","file":"clusteredAppender-test-compiled.js","sourcesContent":["\"use strict\";\nvar assert = require('assert');\nvar vows = require('vows');\nvar layouts = require('../lib/layouts');\nvar sandbox = require('sandboxed-module');\nvar LoggingEvent = require('../lib/logger').LoggingEvent;\nvar cluster = require('cluster');\n\nvows.describe('log4js cluster appender').addBatch({\n\t'when in master mode': {\n\t\ttopic: function() {\n\n\t\t\tvar registeredClusterEvents = [];\n\t\t\tvar loggingEvents = [];\n\t\t\tvar onChildProcessForked;\n\t\t\tvar onMasterReceiveChildMessage;\n\t\t\t\n\t\t\t// Fake cluster module, so no real cluster listeners be really added \n\t\t\tvar fakeCluster = {\n\t\t\t\n\t\t\t\ton: function(event, callback) {\n\t\t\t\t\tregisteredClusterEvents.push(event);\n\t\t\t\t\tonChildProcessForked = callback;\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tisMaster: true,\n\t\t\t\tisWorker: false,\n\t\t\t\t\n\t\t\t};\n\t\t\tvar fakeWorker = {\n\t\t\t\ton: function(event, callback) {\n\t\t\t\t\tonMasterReceiveChildMessage = callback;\n\t\t\t\t},\n\t\t\t\tprocess: {\n\t\t\t\t\tpid: 123\n\t\t\t\t},\n\t\t\t\tid: 'workerid'\n\t\t\t};\n\t\t\n\t\t\tvar fakeActualAppender = function(loggingEvent) {\n\t\t\t\tloggingEvents.push(loggingEvent);\n\t\t\t}\n\t\t\t\n\t\t\t// Load appender and fake modules in it\n\t\t\tvar appenderModule = sandbox.require('../lib/appenders/clustered', {\n\t\t\t\trequires: {\n\t\t\t\t\t'cluster': fakeCluster,\n\t\t\t\t}\n\t\t\t});\n\t\t\n\t\t\tvar masterAppender = appenderModule.appender({\n\t\t\t\tactualAppenders: [fakeActualAppender, fakeActualAppender, fakeActualAppender],\n\t\t\t\tappenders: [{}, {category: \"test\"}, {category: \"wovs\"}]\n\t\t\t});\n\n\t\t\t// Actual test - log message using masterAppender\n\t\t\tmasterAppender(new LoggingEvent('wovs', 'Info', ['masterAppender test']));\n\n\t\t\t// Simulate a 'fork' event to register the master's message handler on our fake worker.\n\t\t\tonChildProcessForked(fakeWorker);\n\t\t\t// Simulate a cluster message received by the masterAppender.\n\t\t\tvar simulatedLoggingEvent = new LoggingEvent('wovs', 'Error', ['message deserialization test', {stack: 'my wrapped stack'}]);\n\t\t\tonMasterReceiveChildMessage({\n\t\t\t\ttype : '::log-message',\n\t\t\t\tevent : JSON.stringify(simulatedLoggingEvent)\n\t\t\t});\n\n\t\t\tvar returnValue = {\n\t\t\t\tregisteredClusterEvents: registeredClusterEvents,\n\t\t\t\tloggingEvents: loggingEvents,\n\t\t\t};\n\t\t\n\t\t\treturn returnValue;\n\t\t}, \n\t\t\n\t\t\"should register 'fork' event listener on 'cluster'\": function(topic) { \n\t\t\tassert.equal(topic.registeredClusterEvents[0], 'fork');\n\t\t},\n\t\t\n\t\t\"should log using actual appender\": function(topic) {\n\t\t\tassert.equal(topic.loggingEvents.length, 4);\n\t\t\tassert.equal(topic.loggingEvents[0].data[0], 'masterAppender test');\n\t\t\tassert.equal(topic.loggingEvents[1].data[0], 'masterAppender test');\n\t\t\tassert.equal(topic.loggingEvents[2].data[0], 'message deserialization test');\n\t\t\tassert.equal(topic.loggingEvents[2].data[1], 'my wrapped stack');\n\t\t\tassert.equal(topic.loggingEvents[3].data[0], 'message deserialization test');\n\t\t\tassert.equal(topic.loggingEvents[3].data[1], 'my wrapped stack');\n\t\t},\n\t\t\n\t},\n\t\n\t'when in worker mode': {\n\t\t\n\t\ttopic: function() {\n\t\t\t\n\t\t\tvar registeredProcessEvents = [];\n\t\t\t\n\t\t\t// Fake cluster module, to fake we're inside a worker process\n\t\t\tvar fakeCluster = {\n\t\t\t\n\t\t\t\tisMaster: false,\n\t\t\t\tisWorker: true,\n\t\t\t\t\n\t\t\t};\n\t\t\t\n\t\t\tvar fakeProcess = {\n\t\t\t\n\t\t\t\tsend: function(data) {\n\t\t\t\t\tregisteredProcessEvents.push(data);\n\t\t\t\t},\n\t\t\t\t\n\t\t\t};\n\t\t\t\n\t\t\t// Load appender and fake modules in it\n\t\t\tvar appenderModule = sandbox.require('../lib/appenders/clustered', {\n\t\t\t\trequires: {\n\t\t\t\t\t'cluster': fakeCluster,\n\t\t\t\t},\n\t\t\t\tglobals: {\n\t\t\t\t\t'process': fakeProcess,\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tvar workerAppender = appenderModule.appender();\n\n\t\t\t// Actual test - log message using masterAppender\n\t\t\tworkerAppender(new LoggingEvent('wovs', 'Info', ['workerAppender test']));\n\t\t\tworkerAppender(new LoggingEvent('wovs', 'Info', [new Error('Error test')]));\n\t\t\t\n\t\t\tvar returnValue = {\n\t\t\t\tregisteredProcessEvents: registeredProcessEvents,\n\t\t\t};\n\t\t\t\n\t\t\treturn returnValue;\n\t\t\n\t\t},\n\t\t\n\t\t\"worker appender should call process.send\" : function(topic) {\n\t\t\tassert.equal(topic.registeredProcessEvents[0].type, '::log-message');\n\t\t\tassert.equal(JSON.parse(topic.registeredProcessEvents[0].event).data[0], \"workerAppender test\");\n\t\t},\n\t\t\n\t\t\"worker should serialize an Error correctly\" : function(topic) {\n\t\t\tassert.equal(topic.registeredProcessEvents[1].type, '::log-message');\n\t\t\tassert(JSON.parse(topic.registeredProcessEvents[1].event).data[0].stack);\n\t\t\tvar actual = JSON.parse(topic.registeredProcessEvents[1].event).data[0].stack;\n\t\t\tvar expectedRegex = /^Error: Error test/;\n\t\t\tassert(actual.match(expectedRegex), \"Expected: \\n\\n \" + actual + \"\\n\\n to match \" + expectedRegex);\n\t\t}\n\t\t\n\t}\n\n}).exportTo(module);\n"]}