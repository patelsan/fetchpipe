{"version":3,"sources":["configuration-test.js"],"names":[],"mappings":"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","file":"configuration-test-compiled.js","sourcesContent":["\"use strict\";\nvar assert = require('assert')\n, vows = require('vows')\n, sandbox = require('sandboxed-module');\n\nfunction makeTestAppender() {\n  return {\n    configure: function(config, options) {\n      this.configureCalled = true;\n      this.config = config;\n      this.options = options;\n      return this.appender();\n    },\n    appender: function() {\n      var self = this;\n      return function(logEvt) { self.logEvt = logEvt; };\n    }\n  };\n}\n\nvows.describe('log4js configure').addBatch({\n  'appenders': {\n    'when specified by type': {\n      topic: function() {\n        var testAppender = makeTestAppender(),\n        log4js = sandbox.require(\n          '../lib/log4js',\n          {\n            requires: {\n              './appenders/cheese': testAppender\n            }\n          }\n        );\n        log4js.configure(\n          {\n            appenders: [\n              { type: \"cheese\", flavour: \"gouda\" }\n            ]\n          },\n          { pants: \"yes\" }\n        );\n        return testAppender;\n      },\n      'should load appender': function(testAppender) {\n        assert.ok(testAppender.configureCalled);\n      },\n      'should pass config to appender': function(testAppender) {\n        assert.equal(testAppender.config.flavour, 'gouda');\n      },\n      'should pass log4js options to appender': function(testAppender) {\n        assert.equal(testAppender.options.pants, 'yes');\n      }\n    },\n    'when core appender loaded via loadAppender': {\n      topic: function() {\n        var testAppender = makeTestAppender(),\n        log4js = sandbox.require(\n          '../lib/log4js',\n          { requires: { './appenders/cheese': testAppender } }\n        );\n        \n        log4js.loadAppender('cheese');\n        return log4js;\n      },\n      'should load appender from ../lib/appenders': function(log4js) {\n        assert.ok(log4js.appenders.cheese);\n      },\n      'should add appender configure function to appenderMakers' : function(log4js) {\n        assert.isFunction(log4js.appenderMakers.cheese);\n      }\n    },\n    'when appender in node_modules loaded via loadAppender': {\n      topic: function() {\n        var testAppender = makeTestAppender(),\n        log4js = sandbox.require(\n          '../lib/log4js',\n          { requires: { 'some/other/external': testAppender } }\n        );\n        log4js.loadAppender('some/other/external');\n        return log4js;\n      },\n      'should load appender via require': function(log4js) {\n        assert.ok(log4js.appenders['some/other/external']);\n      },\n      'should add appender configure function to appenderMakers': function(log4js) {\n        assert.isFunction(log4js.appenderMakers['some/other/external']);\n      }\n    },\n    'when appender object loaded via loadAppender': {\n      topic: function() {\n        var testAppender = makeTestAppender(),\n            log4js = sandbox.require('../lib/log4js');\n\n        log4js.loadAppender('some/other/external', testAppender);\n        return log4js;\n      },\n      'should load appender with provided object': function(log4js) {\n        assert.ok(log4js.appenders['some/other/external']);\n      },\n      'should add appender configure function to appenderMakers': function(log4js) {\n        assert.isFunction(log4js.appenderMakers['some/other/external']);\n      }\n    },\n    'when configuration file loaded via LOG4JS_CONFIG environment variable': {\n      topic: function() {\n        process.env.LOG4JS_CONFIG = 'some/path/to/mylog4js.json';\n        var fileRead = 0,\n        modulePath = 'some/path/to/mylog4js.json',\n        pathsChecked = [],\n        mtime = new Date(),\n        fakeFS = {\n          config: { appenders: [ { type: 'console', layout: { type: 'messagePassThrough' } } ],\n                    levels: { 'a-test' : 'INFO' } },\n          readdirSync: function(dir) {\n            return require('fs').readdirSync(dir);\n          },\n          readFileSync: function (file, encoding) {\n            fileRead += 1;\n            assert.isString(file);\n            assert.equal(file, modulePath);\n            assert.equal(encoding, 'utf8');\n            return JSON.stringify(fakeFS.config);\n          },\n          statSync: function (path) {\n            pathsChecked.push(path);\n            if (path === modulePath) {\n              return { mtime: mtime };\n            } else {\n              throw new Error(\"no such file\");\n            }\n          }\n        },\n        log4js = sandbox.require(\n          '../lib/log4js',\n          {\n            requires: {\n              'fs': fakeFS,\n            }\n          }\n        );\n        delete process.env.LOG4JS_CONFIG;\n        return fileRead;\n      },\n      'should load the specified local configuration file' : function(fileRead) {\n        assert.equal(fileRead, 1);\n      }\n    }\n  }\n}).exportTo(module);\n"]}