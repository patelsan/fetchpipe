{"version":3,"sources":["configureNoLevels-test.js"],"names":[],"mappings":"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","file":"configureNoLevels-test-compiled.js","sourcesContent":["\"use strict\";\n// This test shows unexpected behaviour for log4js.configure() in log4js-node@0.4.3 and earlier:\n// 1) log4js.configure(), log4js.configure(null),\n// log4js.configure({}), log4js.configure(<some object with no levels prop>)\n// all set all loggers levels to trace, even if they were previously set to something else.\n// 2) log4js.configure({levels:{}}), log4js.configure({levels: {foo:\n// bar}}) leaves previously set logger levels intact.\n//\n\n// Basic set up\nvar vows = require('vows');\nvar assert = require('assert');\nvar toLevel = require('../lib/levels').toLevel;\n\n// uncomment one or other of the following to see progress (or not) while running the tests\n// var showProgress = console.log;\nvar showProgress = function() {};\n\n\n// Define the array of levels as string to iterate over.\nvar strLevels= ['Trace','Debug','Info','Warn','Error','Fatal'];\n\n// setup the configurations we want to test\nvar configs = {\n  'nop': 'nop', // special case where the iterating vows generator will not call log4js.configure\n  'is undefined': undefined,\n  'is null': null,\n  'is empty': {},\n  'has no levels': {foo: 'bar'},\n  'has null levels': {levels: null},\n  'has empty levels': {levels: {}},\n  'has random levels': {levels: {foo: 'bar'}},\n  'has some valid levels': {levels: {A: 'INFO'}}\n};\n\n// Set up the basic vows batches for this test\nvar batches = [];\n\n\nfunction getLoggerName(level) {\n  return level+'-logger';\n}\n\n// the common vows top-level context, whether log4js.configure is called or not\n// just making sure that the code is common,\n// so that there are no spurious errors in the tests themselves.\nfunction getTopLevelContext(nop, configToTest, name) {\n  return {\n    topic: function() {\n      var log4js = require('../lib/log4js');\n      // create loggers for each level,\n      // keeping the level in the logger's name for traceability\n      strLevels.forEach(function(l) {\n        log4js.getLogger(getLoggerName(l)).setLevel(l);\n      });\n\n      if (!nop) {\n        showProgress('** Configuring log4js with', configToTest);\n        log4js.configure(configToTest);\n      }\n      else {\n        showProgress('** Not configuring log4js');\n      }\n      return log4js;\n    }\n  };\n}\n\nshowProgress('Populating batch object...');\n\nfunction checkForMismatch(topic) {\n  var er = topic.log4js.levels.toLevel(topic.baseLevel)\n    .isLessThanOrEqualTo(topic.log4js.levels.toLevel(topic.comparisonLevel));\n\n  assert.equal(\n    er, \n    topic.expectedResult, \n    'Mismatch: for setLevel(' + topic.baseLevel + \n      ') was expecting a comparison with ' + topic.comparisonLevel + \n      ' to be ' + topic.expectedResult\n  );\n}\n\nfunction checkExpectedResult(topic) {\n  var result = topic.log4js\n    .getLogger(getLoggerName(topic.baseLevel))\n    .isLevelEnabled(topic.log4js.levels.toLevel(topic.comparisonLevel));\n  \n  assert.equal(\n    result, \n    topic.expectedResult, \n    'Failed: ' + getLoggerName(topic.baseLevel) + \n      '.isLevelEnabled( ' + topic.comparisonLevel + ' ) returned ' + result\n  );\n}\n\nfunction setupBaseLevelAndCompareToOtherLevels(baseLevel) {\n  var baseLevelSubContext = 'and checking the logger whose level was set to '+baseLevel ;\n  var subContext = { topic: baseLevel };\n  batch[context][baseLevelSubContext] = subContext;\n\n  // each logging level has strLevels sub-contexts,\n  // to exhaustively test all the combinations of \n  // setLevel(baseLevel) and isLevelEnabled(comparisonLevel) per config\n  strLevels.forEach(compareToOtherLevels(subContext));\n}\n\nfunction compareToOtherLevels(subContext) {\n  var baseLevel = subContext.topic;\n\n  return function (comparisonLevel) {\n    var comparisonLevelSubContext = 'with isLevelEnabled('+comparisonLevel+')';\n\n    // calculate this independently of log4js, but we'll add a vow \n    // later on to check that we're not mismatched with log4js\n    var expectedResult = strLevels.indexOf(baseLevel) <= strLevels.indexOf(comparisonLevel);\n\n    // the topic simply gathers all the parameters for the vow \n    // into an object, to simplify the vow's work.\n    subContext[comparisonLevelSubContext] = {\n      topic: function(baseLevel, log4js) {\n        return {\n          comparisonLevel: comparisonLevel, \n          baseLevel: baseLevel, \n          log4js: log4js, \n          expectedResult: expectedResult\n        };\n      }\n    };\n\n    var vow = 'should return '+expectedResult;\n    subContext[comparisonLevelSubContext][vow] = checkExpectedResult;\n    \n    // the extra vow to check the comparison between baseLevel and\n    // comparisonLevel we performed earlier matches log4js'\n    // comparison too\n    var subSubContext = subContext[comparisonLevelSubContext];\n    subSubContext['finally checking for comparison mismatch with log4js'] = checkForMismatch;\n  };\n}\n\n// Populating the batches programmatically, as there are \n// (configs.length x strLevels.length x strLevels.length) = 324 \n// possible test combinations\nfor (var cfg in configs) {\n  var configToTest = configs[cfg];\n  var nop = configToTest === 'nop';\n  var context;\n  if (nop) {\n    context = 'Setting up loggers with initial levels, then NOT setting a configuration,';\n  }\n  else {\n    context = 'Setting up loggers with initial levels, then setting a configuration which '+cfg+',';\n  }\n\n  showProgress('Setting up the vows batch and context for '+context);\n  // each config to be tested has its own vows batch with a single top-level context\n  var batch={};\n  batch[context]= getTopLevelContext(nop, configToTest, context);\n  batches.push(batch);\n\n  // each top-level context has strLevels sub-contexts, one per logger \n  // which has set to a specific level in the top-level context's topic\n  strLevels.forEach(setupBaseLevelAndCompareToOtherLevels);\n}\n\nshowProgress('Running tests');\nvar v = vows.describe('log4js.configure(), with or without a \"levels\" property');\n\nbatches.forEach(function(batch) {v=v.addBatch(batch);});\n\nv.export(module);\n\n"]}