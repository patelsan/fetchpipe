{"version":3,"sources":["connect-logger-test.js"],"names":[],"mappings":";AACA,YAAY,CAAC;AACb,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACxB,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;IAC1B,IAAI,GAAK,OAAO,CAAC,MAAM,CAAC;IACxB,EAAE,GAAO,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY;IACvC,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;;AAEpC,SAAS,UAAU,GAAG;;AAEpB,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,MAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;;AAEnB,MAAI,CAAC,GAAG,GAAG,UAAS,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE;AAC7C,QAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;GACxD,CAAC;;AAEF,MAAI,CAAC,cAAc,GAAG,UAAS,KAAK,EAAE;AACpC,WAAO,KAAK,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;GACjD,CAAC;;AAEF,MAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;CAE3B;;AAED,SAAS,WAAW,CAAC,UAAU,EAAE,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE;;AAE7D,MAAI,CAAC,MAAM,GAAG,EAAE,aAAa,EAAE,UAAU,EAAE,CAAC;AAC5C,MAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AAC/B,MAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,MAAI,CAAC,gBAAgB,GAAG,GAAG,CAAC;AAC5B,MAAI,CAAC,gBAAgB,GAAG,GAAG,CAAC;AAC5B,MAAI,CAAC,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;;AAE7B,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,QAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAS,GAAG,EAAE;AAC9C,QAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;GACrD,CAAC,CAAC;CACJ;;AAED,SAAS,YAAY,GAAG;AACtB,MAAI,CAAC,GAAG,IAAI,CAAC;AACb,MAAI,CAAC,GAAG,GAAG,UAAS,KAAK,EAAE,QAAQ,EAAE;AACjC,KAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;GACpB,CAAC;;AAEF,MAAI,CAAC,SAAS,GAAG,UAAS,IAAI,EAAE,OAAO,EAAE;AACrC,QAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AACvB,QAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;GAC3B,CAAC;CACH;;AAED,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;;AAEhC,SAAS,OAAO,CAAC,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE;AAC9D,MAAI,GAAG,GAAG,IAAI,WAAW,CAAC,gBAAgB,EAAE,MAAM,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC;AACrE,MAAI,GAAG,GAAG,IAAI,YAAY,EAAE,CAAC;AAC7B,IAAE,CAAC,GAAG,EAAE,GAAG,EAAE,YAAW,EAAE,CAAC,CAAC;AAC5B,KAAG,CAAC,SAAS,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;AAChC,KAAG,CAAC,GAAG,CAAC,OAAO,EAAC,UAAU,CAAC,CAAC;CAC7B;;AAED,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC,CAAC,QAAQ,CAAC;AAC9C,0BAAwB,EAAE;AACxB,SAAK,EAAE,iBAAW;AAChB,UAAI,GAAG,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;AAC3C,aAAO,GAAG,CAAC;KACZ;;AAED,8CAA0C,EAAG,2CAAS,GAAG,EAAE;AACzD,YAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;KACtB;;AAED,wDAAoD,EAAG;AACrD,WAAK,EAAE,eAAS,GAAG,EAAE;AACnB,YAAI,EAAE,GAAG,IAAI,UAAU,EAAE,CAAC;AAC1B,YAAI,EAAE,GAAG,GAAG,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;AAC/B,eAAO,EAAE,CAAC;OACX;;AAED,wCAAkC,EAAE,oCAAS,EAAE,EAAE;AAC/C,cAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;OACvB;KACF;;AAED,gBAAY,EAAG;AACb,WAAK,EAAE,eAAS,GAAG,EAAE;AACnB,YAAI,EAAE,GAAG,IAAI,UAAU,EAAE,CAAC;AAC1B,YAAI,EAAE,GAAG,GAAG,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;AAC/B,YAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;AACvB,eAAO,CAAC,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;AACtC,kBAAU,CAAC,YAAW;AACpB,YAAE,CAAC,IAAI,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC;SACvB,EAAC,EAAE,CAAC,CAAC;OACP;;AAED,qBAAe,EAAE,sBAAS,QAAQ,EAAE;AAClC,cAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACzB,cAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACjC,cAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACpD,cAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AAC3C,cAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;AAClD,cAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;AACtD,cAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;OAC5C;KACF;;AAED,+CAA2C,EAAG;AAC5C,WAAK,EAAE,eAAS,GAAG,EAAE;AACnB,YAAI,EAAE,GAAG,IAAI,UAAU,EAAE,CAAC;AAC1B,UAAE,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;AACxB,YAAI,EAAE,GAAG,GAAG,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;AAC/B,eAAO,CAAC,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;AACtC,eAAO,EAAE,CAAC,QAAQ,CAAC;OACpB;;AAED,qBAAe,EAAE,sBAAS,QAAQ,EAAE;AAClC,cAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACzB,cAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;OAC1B;KACF;;AAED,yDAAqD,EAAG;AACtD,WAAK,EAAE,eAAS,GAAG,EAAE;AACnB,YAAI,EAAE,GAAG,IAAI,UAAU,EAAE,CAAC;AAC1B,YAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;AACvB,UAAE,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC;AACvB,YAAI,EAAE,GAAG,GAAG,CAAC,aAAa,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,cAAc,EAAE,CAAE,CAAC;AAChF,eAAO,CAAC,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;AACtC,kBAAU,CAAC,YAAW;AACpB,YAAE,CAAC,IAAI,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC;SACvB,EAAC,EAAE,CAAC,CAAC;OAAO;;AAEf,qBAAe,EAAE,sBAAS,QAAQ,EAAE;AAClC,cAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACzB,cAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACjC,cAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACpD,cAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;OACrD;KACF;;AAED,mCAA+B,EAAE;AAC/B,WAAK,EAAE,eAAS,GAAG,EAAE;AACnB,YAAI,EAAE,GAAG,IAAI,UAAU,EAAE,CAAC;AAC1B,YAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;AACvB,UAAE,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC;AACvB,YAAI,EAAE,GAAG,GAAG,CAAC,aAAa,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;AAC/C,eAAO,CAAC,EAAE,EAAE,MAAM,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;AACvC,kBAAU,CAAC,YAAW;AACpB,YAAE,CAAC,IAAI,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC;SACvB,EAAC,EAAE,CAAC,CAAC;OACP;AACD,uCAAiC,EAAE,oCAAS,QAAQ,EAAE;AACpD,cAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;OACtD;KACF;;AAED,qBAAiB,EAAE;AACjB,WAAK,EAAE,eAAS,GAAG,EAAE;AACnB,YAAI,EAAE,GAAG,IAAI,UAAU,EAAE,CAAC;AAC1B,YAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;AACvB,UAAE,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC;AACvB,YAAI,EAAE,GAAG,GAAG,CAAC,aAAa,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,EAAE,CAAC,CAAC;AAC1E,eAAO,CAAC,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;AACtC,eAAO,CAAC,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;AACtC,eAAO,CAAC,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;AACtC,eAAO,CAAC,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;AACtC,eAAO,CAAC,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;AACtC,kBAAU,CAAC,YAAW;AACpB,YAAE,CAAC,IAAI,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC;SACvB,EAAC,EAAE,CAAC,CAAC;OACP;;AAED,+BAAyB,EAAE,6BAAS,QAAQ,EAAE;AAC5C,cAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACpD,cAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;OACrD;;AAED,+BAAyB,EAAE,6BAAS,QAAQ,EAAE;AAC5C,cAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;OACrD;;AAED,gCAA0B,EAAE,8BAAS,QAAQ,EAAE;AAC7C,cAAM,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;OACtD;;AAED,gCAA0B,EAAE,8BAAS,QAAQ,EAAE;AAC7C,cAAM,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;OACtD;KACF;;AAED,6BAAyB,EAAE;AACzB,WAAK,EAAE,eAAS,GAAG,EAAE;AACnB,YAAI,EAAE,GAAG,IAAI,UAAU,EAAE,CAAC;AAC1B,YAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;AACvB,UAAE,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC;AACvB,YAAI,EAAE,GAAG,GAAG,CAAC,aAAa,CAAC,EAAE,EAAE,UAAS,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE;AAAE,iBAAO,cAAc,CAAC;SAAE,CAAC,CAAC;AACxF,eAAO,CAAC,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,GAAG,CAAC,CAAC;AACvC,kBAAU,CAAC,YAAW;AACpB,YAAE,CAAC,IAAI,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC;SACvB,EAAC,EAAE,CAAC,CAAC;OACP;;AAED,uCAAiC,EAAE,qCAAS,QAAQ,EAAE;AACpD,cAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;OACnD;KACF;;AAED,0CAAsC,EAAE;AACtC,WAAK,EAAE,eAAS,GAAG,EAAE;AACnB,YAAI,EAAE,GAAG,IAAI,UAAU,EAAE,CAAC;AAC1B,YAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;AACvB,UAAE,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC;AACvB,YAAI,EAAE,GAAG,GAAG,CAAC,aAAa,CAAC,EAAE,EAAE,oBAAoB,CAAC,CAAC;AACrD,eAAO,CACL,EAAE,EACF,KAAK,EAAE,aAAa,EAAE,GAAG,EACzB,EAAE,cAAc,EAAE,kBAAkB,EAAE,CACvC,CAAC;AACF,kBAAU,CAAC,YAAW;AACpB,YAAE,CAAC,IAAI,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC;SACvB,EAAC,EAAE,CAAC,CAAC;OACP;AACD,wCAAkC,EAAE,sCAAS,QAAQ,EAAE;AACrD,cAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,kBAAkB,CAAC,CAAC;OACvD;KACF;;AAED,2CAAuC,EAAE;AACvC,WAAK,EAAE,eAAS,GAAG,EAAE;AACnB,YAAI,EAAE,GAAG,IAAI,UAAU,EAAE,CAAC;AAC1B,YAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;AACvB,UAAE,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC;AACvB,YAAI,EAAE,GAAG,GAAG,CAAC,aAAa,CAAC,EAAE,EAAE,oBAAoB,CAAC,CAAC;AACrD,eAAO,CACL,EAAE,EACF,KAAK,EAAE,aAAa,EAAE,GAAG,EACzB,IAAI,EACJ,EAAE,cAAc,EAAE,oBAAoB,EAAE,CACzC,CAAC;AACF,kBAAU,CAAC,YAAW;AACpB,YAAE,CAAC,IAAI,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC;SACvB,EAAC,EAAE,CAAC,CAAC;OACP;;AAED,yCAAmC,EAAE,uCAAS,QAAQ,EAAE;AACtD,cAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,oBAAoB,CAAC,CAAC;OACzD;KACF;;AAED,kCAA8B,EAAG;AAC/B,WAAK,EAAE,eAAS,GAAG,EAAE;AACnB,YAAI,EAAE,GAAG,IAAI,UAAU,EAAE,CAAC;AAC1B,YAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;AACvB,UAAE,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC;AACvB,YAAI,EAAE,GAAG,GAAG,CAAC,aAAa,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,6BAA6B,EAAE,MAAM,EAAE,CAAC;AACnG,iBAAK,EAAE,gBAAgB,EAAE,WAAW,EAAE,QAAQ;WAC/C,CAAC,EAAE,CAAE,CAAC;AACP,eAAO,CAAC,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;AACtC,kBAAU,CAAC,YAAW;AACpB,YAAE,CAAC,IAAI,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC;SACvB,EAAC,EAAE,CAAC,CAAC;OACP;;AAED,qBAAe,EAAE,sBAAS,QAAQ,EAAE;AAClC,cAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACzB,cAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACjC,cAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACpD,cAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,uBAAuB,CAAC,CAAC;OAC5D;KACF;;AAED,2CAAuC,EAAG;AACxC,WAAK,EAAE,eAAS,GAAG,EAAE;AACnB,YAAI,EAAE,GAAG,IAAI,UAAU,EAAE,CAAC;AAC1B,YAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;AACvB,UAAE,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC;AACvB,YAAI,EAAE,GAAG,GAAG,CAAC,aAAa,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,oBAAoB,EAAE,MAAM,EAAE,CAAC;AAC1F,iBAAK,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU;WACxC,CAAC,EAAE,CAAE,CAAC;AACP,eAAO,CAAC,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;AACtC,kBAAU,CAAC,YAAW;AACpB,YAAE,CAAC,IAAI,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC;SACvB,EAAC,EAAE,CAAC,CAAC;OACP;;AAED,qBAAe,EAAE,sBAAS,QAAQ,EAAE;AAClC,cAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACzB,cAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACjC,cAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACpD,cAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,yBAAyB,CAAC,CAAC;OAC9D;KACF;GACF;CACF,CAAC,UAAO,CAAC,MAAM,CAAC,CAAC","file":"connect-logger-test-compiled.js","sourcesContent":["/* jshint maxparams:7 */\n\"use strict\";\nvar vows = require('vows')\n, assert = require('assert')\n, util   = require('util')\n, EE     = require('events').EventEmitter\n, levels = require('../lib/levels');\n\nfunction MockLogger() {\n\n  var that = this;\n  this.messages = [];\n\n  this.log = function(level, message, exception) {\n    that.messages.push({ level: level, message: message });\n  };\n\n  this.isLevelEnabled = function(level) {\n    return level.isGreaterThanOrEqualTo(that.level);\n  };\n\n  this.level = levels.TRACE;\n\n}\n\nfunction MockRequest(remoteAddr, method, originalUrl, headers) {\n\n  this.socket = { remoteAddress: remoteAddr };\n  this.originalUrl = originalUrl;\n  this.method = method;\n  this.httpVersionMajor = '5';\n  this.httpVersionMinor = '0';\n  this.headers = headers || {};\n\n  var self = this;\n  Object.keys(this.headers).forEach(function(key) {\n    self.headers[key.toLowerCase()] = self.headers[key];\n  });\n}\n\nfunction MockResponse() {\n  var r = this;\n  this.end = function(chunk, encoding) {\n      r.emit('finish');\n  };\n\n  this.writeHead = function(code, headers) {\n      this.statusCode = code;\n      this._headers = headers;\n  };\n}\n\nutil.inherits(MockResponse, EE);\n\nfunction request(cl, method, url, code, reqHeaders, resHeaders) {\n  var req = new MockRequest('my.remote.addr', method, url, reqHeaders);\n  var res = new MockResponse();\n  cl(req, res, function() {});\n  res.writeHead(code, resHeaders);\n  res.end('chunk','encoding');\n}\n\nvows.describe('log4js connect logger').addBatch({\n  'getConnectLoggerModule': {\n    topic: function() {\n      var clm = require('../lib/connect-logger');\n      return clm;\n    },\n\n    'should return a \"connect logger\" factory' : function(clm) {\n      assert.isObject(clm);\n    },\n\n    'take a log4js logger and return a \"connect logger\"' : {\n      topic: function(clm) {\n        var ml = new MockLogger();\n        var cl = clm.connectLogger(ml);\n        return cl;\n      },\n\n      'should return a \"connect logger\"': function(cl) {\n        assert.isFunction(cl);\n      }\n    },\n\n    'log events' : {\n      topic: function(clm) {\n        var ml = new MockLogger();\n        var cl = clm.connectLogger(ml);\n        var cb = this.callback;\n        request(cl, 'GET', 'http://url', 200);\n        setTimeout(function() {\n          cb(null, ml.messages);\n        },10);\n      },\n\n      'check message': function(messages) {\n        assert.isArray(messages);\n        assert.equal(messages.length, 1);\n        assert.ok(levels.INFO.isEqualTo(messages[0].level));\n        assert.include(messages[0].message, 'GET');\n        assert.include(messages[0].message, 'http://url');\n        assert.include(messages[0].message, 'my.remote.addr');\n        assert.include(messages[0].message, '200');\n      }\n    },\n\n    'log events with level below logging level' : {\n      topic: function(clm) {\n        var ml = new MockLogger();\n        ml.level = levels.FATAL;\n        var cl = clm.connectLogger(ml);\n        request(cl, 'GET', 'http://url', 200);\n        return ml.messages;\n      },\n\n      'check message': function(messages) {\n        assert.isArray(messages);\n        assert.isEmpty(messages);\n      }\n    },\n\n    'log events with non-default level and custom format' : {\n      topic: function(clm) {\n        var ml = new MockLogger();\n        var cb = this.callback;\n        ml.level = levels.INFO;\n        var cl = clm.connectLogger(ml, { level: levels.INFO, format: ':method :url' } );\n        request(cl, 'GET', 'http://url', 200);\n        setTimeout(function() {\n          cb(null, ml.messages);\n        },10);      },\n\n      'check message': function(messages) {\n        assert.isArray(messages);\n        assert.equal(messages.length, 1);\n        assert.ok(levels.INFO.isEqualTo(messages[0].level));\n        assert.equal(messages[0].message, 'GET http://url');\n      }\n    },\n\n    'logger with options as string': {\n      topic: function(clm) {\n        var ml = new MockLogger();\n        var cb = this.callback;\n        ml.level = levels.INFO;\n        var cl = clm.connectLogger(ml, ':method :url');\n        request(cl, 'POST', 'http://meh', 200);\n        setTimeout(function() {\n          cb(null, ml.messages);\n        },10);\n      },\n      'should use the passed in format': function(messages) {\n        assert.equal(messages[0].message, 'POST http://meh');\n      }\n    },\n\n    'auto log levels': {\n      topic: function(clm) {\n        var ml = new MockLogger();\n        var cb = this.callback;\n        ml.level = levels.INFO;\n        var cl = clm.connectLogger(ml, { level: 'auto', format: ':method :url' });\n        request(cl, 'GET', 'http://meh', 200);\n        request(cl, 'GET', 'http://meh', 201);\n        request(cl, 'GET', 'http://meh', 302);\n        request(cl, 'GET', 'http://meh', 404);\n        request(cl, 'GET', 'http://meh', 500);\n        setTimeout(function() {\n          cb(null, ml.messages);\n        },10);\n      },\n\n      'should use INFO for 2xx': function(messages) {\n        assert.ok(levels.INFO.isEqualTo(messages[0].level));\n        assert.ok(levels.INFO.isEqualTo(messages[1].level));\n      },\n\n      'should use WARN for 3xx': function(messages) {\n        assert.ok(levels.WARN.isEqualTo(messages[2].level));\n      },\n\n      'should use ERROR for 4xx': function(messages) {\n        assert.ok(levels.ERROR.isEqualTo(messages[3].level));\n      },\n\n      'should use ERROR for 5xx': function(messages) {\n        assert.ok(levels.ERROR.isEqualTo(messages[4].level));\n      }\n    },\n\n    'format using a function': {\n      topic: function(clm) {\n        var ml = new MockLogger();\n        var cb = this.callback;\n        ml.level = levels.INFO;\n        var cl = clm.connectLogger(ml, function(req, res, formatFn) { return \"I was called\"; });\n        request(cl, 'GET', 'http://blah', 200);\n        setTimeout(function() {\n          cb(null, ml.messages);\n        },10);\n      },\n\n      'should call the format function': function(messages) {\n        assert.equal(messages[0].message, 'I was called');\n      }\n    },\n\n    'format that includes request headers': {\n      topic: function(clm) {\n        var ml = new MockLogger();\n        var cb = this.callback;\n        ml.level = levels.INFO;\n        var cl = clm.connectLogger(ml, ':req[Content-Type]');\n        request(\n          cl,\n          'GET', 'http://blah', 200,\n          { 'Content-Type': 'application/json' }\n        );\n        setTimeout(function() {\n          cb(null, ml.messages);\n        },10);\n      },\n      'should output the request header': function(messages) {\n        assert.equal(messages[0].message, 'application/json');\n      }\n    },\n\n    'format that includes response headers': {\n      topic: function(clm) {\n        var ml = new MockLogger();\n        var cb = this.callback;\n        ml.level = levels.INFO;\n        var cl = clm.connectLogger(ml, ':res[Content-Type]');\n        request(\n          cl,\n          'GET', 'http://blah', 200,\n          null,\n          { 'Content-Type': 'application/cheese' }\n        );\n        setTimeout(function() {\n          cb(null, ml.messages);\n        },10);\n      },\n\n      'should output the response header': function(messages) {\n        assert.equal(messages[0].message, 'application/cheese');\n      }\n    },\n\n    'log events with custom token' : {\n      topic: function(clm) {\n        var ml = new MockLogger();\n        var cb = this.callback;\n        ml.level = levels.INFO;\n        var cl = clm.connectLogger(ml, { level: levels.INFO, format: ':method :url :custom_string', tokens: [{\n          token: ':custom_string', replacement: 'fooBAR'\n        }] } );\n        request(cl, 'GET', 'http://url', 200);\n        setTimeout(function() {\n          cb(null, ml.messages);\n        },10);\n      },\n\n      'check message': function(messages) {\n        assert.isArray(messages);\n        assert.equal(messages.length, 1);\n        assert.ok(levels.INFO.isEqualTo(messages[0].level));\n        assert.equal(messages[0].message, 'GET http://url fooBAR');\n      }\n    },\n\n    'log events with custom override token' : {\n      topic: function(clm) {\n        var ml = new MockLogger();\n        var cb = this.callback;\n        ml.level = levels.INFO;\n        var cl = clm.connectLogger(ml, { level: levels.INFO, format: ':method :url :date', tokens: [{\n          token: ':date', replacement: \"20150310\"\n        }] } );\n        request(cl, 'GET', 'http://url', 200);\n        setTimeout(function() {\n          cb(null, ml.messages);\n        },10);\n      },\n\n      'check message': function(messages) {\n        assert.isArray(messages);\n        assert.equal(messages.length, 1);\n        assert.ok(levels.INFO.isEqualTo(messages[0].level));\n        assert.equal(messages[0].message, 'GET http://url 20150310');\n      }\n    }\n  }\n}).export(module);\n"]}