{"version":3,"sources":["date_format-test.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACxB,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;IAC1B,UAAU,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;;AAE7C,SAAS,eAAe,GAAG;AACzB,SAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;CAC7C;;AAED,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC;AACpC,mBAAiB,EAAE;AACjB,SAAK,EAAE,eAAe;AACtB,oDAAgD,EAAE,gDAAS,IAAI,EAAE;AAC/D,YAAM,CAAC,KAAK,CACV,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,eAAe,EAAE,IAAI,CAAC,EACrD,yBAAyB,CAC1B,CAAC;KACH;AACD,0CAAsC,EAAE,yCAAS,IAAI,EAAE;AACrD,YAAM,CAAC,KAAK,CACV,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EACzB,yBAAyB,CAC1B,CAAC;KACH;AACD,0DAAsD,EAAE,yDAAW;AACjE,UAAI,IAAI,GAAG,eAAe,EAAE,CAAC;AAC7B,UAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,GAAG,GAAG,CAAC,CAAC;AACpE,UAAI,CAAC,iBAAiB,GAAG,YAAW;AAAE,eAAO,CAAC,GAAG,CAAC;OAAE,CAAC;AACrD,YAAM,CAAC,KAAK,CACV,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,6BAA6B,EAAE,IAAI,CAAC,EACnE,0BAA0B,CAC3B,CAAC;AACF,UAAI,GAAG,eAAe,EAAE,CAAC;AACzB,UAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,GAAG,GAAG,CAAC,CAAC;AACpE,UAAI,CAAC,iBAAiB,GAAG,YAAW;AAAE,eAAO,GAAG,CAAC;OAAE,CAAC;AACpD,YAAM,CAAC,KAAK,CACV,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,6BAA6B,EAAE,IAAI,CAAC,EACnE,0BAA0B,CAC3B,CAAC;KAEH;AACD,2CAAuC,EAAE,yCAAS,IAAI,EAAE;AACtD,YAAM,CAAC,KAAK,CACV,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,mBAAmB,EAAE,IAAI,CAAC,EACzD,cAAc,CACf,CAAC;KACH;AACD,oCAAgC,EAAE,sCAAW;AAC3C,UAAI,IAAI,GAAG,eAAe,EAAE,CAAC;AAC7B,UAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,GAAG,GAAG,CAAC,CAAC;AACpE,UAAI,CAAC,iBAAiB,GAAG,YAAW;AAAE,eAAO,GAAG,CAAC;OAAE,CAAC;AACpD,YAAM,CAAC,KAAK,CACV,UAAU,CAAC,QAAQ,CAAC,yBAAyB,EAAE,IAAI,CAAC,EACpD,6BAA6B,CAC9B,CAAC;KACH;GACF;CACF,CAAC,UAAO,CAAC,MAAM,CAAC,CAAC","file":"date_format-test-compiled.js","sourcesContent":["\"use strict\";\nvar vows = require('vows')\n, assert = require('assert')\n, dateFormat = require('../lib/date_format');\n\nfunction createFixedDate() {\n  return new Date(2010, 0, 11, 14, 31, 30, 5);\n}\n\nvows.describe('date_format').addBatch({\n  'Date extensions': {\n    topic: createFixedDate,\n    'should format a date as string using a pattern': function(date) {\n      assert.equal(\n        dateFormat.asString(dateFormat.DATETIME_FORMAT, date),\n        \"11 01 2010 14:31:30.005\"\n      );\n    },\n    'should default to the ISO8601 format': function(date) {\n      assert.equal(\n        dateFormat.asString(date),\n        '2010-01-11 14:31:30.005'\n      );\n    },\n    'should provide a ISO8601 with timezone offset format': function() {\n      var date = createFixedDate();\n      date.setMinutes(date.getMinutes() - date.getTimezoneOffset() - 660);\n      date.getTimezoneOffset = function() { return -660; };\n      assert.equal(\n        dateFormat.asString(dateFormat.ISO8601_WITH_TZ_OFFSET_FORMAT, date),\n        \"2010-01-11T14:31:30+1100\"\n      );\n      date = createFixedDate();\n      date.setMinutes(date.getMinutes() - date.getTimezoneOffset() + 120);\n      date.getTimezoneOffset = function() { return 120; };\n      assert.equal(\n        dateFormat.asString(dateFormat.ISO8601_WITH_TZ_OFFSET_FORMAT, date),\n        \"2010-01-11T14:31:30-0200\"\n      );\n\n    },\n    'should provide a just-the-time format': function(date) {\n      assert.equal(\n        dateFormat.asString(dateFormat.ABSOLUTETIME_FORMAT, date),\n        '14:31:30.005'\n      );\n    },\n    'should provide a custom format': function() {\n      var date = createFixedDate();\n      date.setMinutes(date.getMinutes() - date.getTimezoneOffset() + 120);\n      date.getTimezoneOffset = function() { return 120; };\n      assert.equal(\n        dateFormat.asString(\"O.SSS.ss.mm.hh.dd.MM.yy\", date),\n        '-0200.005.30.31.14.11.01.10'\n      );\n    }\n  }\n}).export(module);\n"]}