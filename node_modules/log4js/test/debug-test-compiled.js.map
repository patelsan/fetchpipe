{"version":3,"sources":["debug-test.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACxB,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;IAC1B,OAAO,GAAG,OAAO,CAAC,kBAAkB,CAAC;IACrC,WAAW,GAAG;AACd,OAAK,EAAE,eAAS,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE;AACtC,QAAI,CAAC,MAAM,GAAG,CAAE,MAAM,EAAE,KAAK,EAAE,OAAO,CAAE,CAAC;GAC1C;CACF;IACC,OAAO,GAAG,SAAV,OAAO,CAAY,UAAU,EAAE;AAC/B,SAAO;AACL,WAAO,EAAE;AACP,SAAG,EAAE;AACH,oBAAY,EAAE,UAAU;OACzB;KACF;AACD,WAAO,EAAE,WAAW;GACrB,CAAC;CACH,CAAC;;AAEF,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC;AACrC,oCAAkC,EAAE;AAClC,SAAK,EAAE,iBAAW;AAChB,UAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CACzB,cAAc,EACd,EAAE,SAAS,EAAE,OAAO,CAAC,QAAQ,CAAC,EAAE,CACjC,CAAC;;AAEF,iBAAW,CAAC,MAAM,GAAG,EAAE,CAAC;AACxB,WAAK,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;AAC5B,aAAO,WAAW,CAAC,MAAM,CAAC;KAC3B;AACD,oCAAgC,EAAE,mCAAS,MAAM,EAAE;AACjD,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC;AAC3C,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;AAClC,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;KACrC;GACF;;AAED,wCAAsC,EAAE;AACtC,SAAK,EAAE,iBAAW;AAChB,UAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CACzB,cAAc,EACd,EAAE,OAAO,EAAE,OAAO,CAAC,cAAc,CAAC,EAAE,CACrC,CAAC;;AAEF,iBAAW,CAAC,MAAM,GAAG,EAAE,CAAC;AACxB,WAAK,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;AAC5B,aAAO,WAAW,CAAC,MAAM,CAAC;KAC3B;AACD,wCAAoC,EAAE,sCAAS,MAAM,EAAE;AACrD,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;KAChC;GACF;;AAED,8BAA4B,EAAE;AAC5B,SAAK,EAAE,iBAAW;AAChB,UAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CACzB,cAAc,EACd,EAAE,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,EAAE,CAC3B,CAAC;;AAEF,iBAAW,CAAC,MAAM,GAAG,EAAE,CAAC;AACxB,WAAK,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;AAC5B,aAAO,WAAW,CAAC,MAAM,CAAC;KAC3B;AACD,wCAAoC,EAAE,sCAAS,MAAM,EAAE;AACrD,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;KAChC;GACF;;CAEF,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC","file":"debug-test-compiled.js","sourcesContent":["\"use strict\";\nvar vows = require('vows')\n, assert = require('assert')\n, sandbox = require('sandboxed-module')\n, fakeConsole = {\n  error: function(format, label, message) {\n    this.logged = [ format, label, message ];\n  }\n}\n, globals = function(debugValue) {\n  return {\n    process: {\n      env: {\n        'NODE_DEBUG': debugValue\n      }\n    },\n    console: fakeConsole\n  };\n};\n\nvows.describe('../lib/debug').addBatch({\n  'when NODE_DEBUG is set to log4js': {\n    topic: function() {\n      var debug = sandbox.require(\n        '../lib/debug', \n        { 'globals': globals('log4js') }\n      );\n\n      fakeConsole.logged = [];\n      debug('cheese')('biscuits');\n      return fakeConsole.logged;\n    },\n    'it should log to console.error': function(logged) {\n      assert.equal(logged[0], 'LOG4JS: (%s) %s');\n      assert.equal(logged[1], 'cheese');\n      assert.equal(logged[2], 'biscuits');\n    }\n  },\n\n  'when NODE_DEBUG is set to not log4js': {\n    topic: function() {\n      var debug = sandbox.require(\n        '../lib/debug',\n        { globals: globals('other_module') }\n      );\n\n      fakeConsole.logged = [];\n      debug('cheese')('biscuits');\n      return fakeConsole.logged;\n    },\n    'it should not log to console.error': function(logged) {\n      assert.equal(logged.length, 0);\n    }\n  },\n\n  'when NODE_DEBUG is not set': {\n    topic: function() {\n      var debug = sandbox.require(\n        '../lib/debug',\n        { globals: globals(null) }\n      );\n\n      fakeConsole.logged = [];\n      debug('cheese')('biscuits');\n      return fakeConsole.logged;\n    },\n    'it should not log to console.error': function(logged) {\n      assert.equal(logged.length, 0);\n    }\n  }\n\n}).exportTo(module);\n"]}