{"version":3,"sources":["gelfAppender-test.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACxB,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;IAC1B,OAAO,GAAG,OAAO,CAAC,kBAAkB,CAAC;IACrC,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC;IACjC,WAAW,GAAG,OAAO,CAAC,gBAAgB,CAAC;IACvC,YAAY,GAAG,SAAf,YAAY,CAAY,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE;AAC7D,MAAI,SAAS,GAAG;AACd,QAAI,EAAE,KAAK;AACX,UAAM,EAAE;AACN,kBAAY,EAAE,CAAC;AACf,YAAM,EAAE,KAAK;AACb,WAAK,EAAE,iBAAW;AAChB,YAAI,CAAC,MAAM,GAAG,IAAI,CAAC;OACpB;AACD,UAAI,EAAE,cAAS,GAAG,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE;AACjD,iBAAS,CAAC,IAAI,GAAG,IAAI,CAAC;AACtB,YAAI,CAAC,MAAM,GAAG,GAAG,CAAC;AAClB,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,YAAI,CAAC,YAAY,GAAG,SAAS,CAAC;AAC9B,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;OAClB;KACF;AACD,gBAAY,EAAE,sBAAS,IAAI,EAAE;AAC3B,UAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,aAAO,IAAI,CAAC,MAAM,CAAC;KACpB;GACF;MACC,QAAQ,GAAG;AACX,QAAI,EAAE,cAAS,gBAAgB,EAAE,QAAQ,EAAE;AACzC,cAAQ,CAAC,YAAY,GAAG,gBAAgB,CAAC;AACzC,UAAI,IAAI,CAAC,WAAW,EAAE;AACpB,gBAAQ,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;AAC/B,eAAO;OACR;;AAED,UAAI,gBAAgB,EAAE;AACpB,gBAAQ,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,gBAAgB,EAAE,CAAC,CAAC;OAC9C,MAAM;AACL,gBAAQ,CAAC,IAAI,EAAE,sBAAsB,CAAC,CAAC;OACxC;KACF;GACF;MACC,WAAW;MACX,WAAW,GAAG;AACd,SAAK,EAAE,eAAS,OAAO,EAAE;AACvB,UAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KACxB;GACF;MACC,WAAW,GAAG;AACd,UAAM,EAAE,gBAAS,IAAI,EAAE,OAAO,EAAE;AAC9B,UAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,UAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,aAAO,WAAW,CAAC,wBAAwB,CAAC;KAC7C;AACD,4BAAwB,EAAE,WAAW,CAAC,wBAAwB;GAC/D;MACC,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,uBAAuB,EAAE;AACpD,YAAQ,EAAE;AACR,WAAK,EAAE,SAAS;AAChB,UAAI,EAAE,QAAQ;AACd,kBAAY,EAAE,WAAW;KAC1B;AACD,WAAO,EAAE;AACP,aAAO,EAAE;AACP,UAAE,EAAE,YAAS,GAAG,EAAE,OAAO,EAAE;AACzB,cAAI,GAAG,KAAK,MAAM,EAAE;AAClB,uBAAW,GAAG,OAAO,CAAC;WACvB;SACF;OACF;AACD,aAAO,EAAE,WAAW;KACrB;GACF,CAAC,CAAC;;AAEH,QAAM,CAAC,cAAc,EAAE,CAAC;AACxB,QAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,IAAI,EAAE,CAAC,EAAE,QAAQ,IAAI,WAAW,CAAC,CAAC;AAC/E,SAAO;AACL,SAAK,EAAE,SAAS;AAChB,YAAQ,EAAE,QAAQ;AAClB,eAAW,EAAE,WAAW;AACxB,WAAO,EAAE,WAAW;AACpB,WAAO,EAAE,WAAW;AACpB,UAAM,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,IAAI,WAAW,CAAC;GAClD,CAAC;CACH,CAAC;;AAEF,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC,QAAQ,CAAC;;AAE5C,sCAAoC,EAAE;AACpC,SAAK,EAAE,iBAAW;AAChB,UAAI,KAAK,GAAG,YAAY,EAAE,CAAC;AAC3B,WAAK,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;AACpC,aAAO,KAAK,CAAC;KACd;AACD,sBAAkB,EAAE;AAClB,WAAK,EAAE,eAAS,KAAK,EAAE;AACrB,eAAO,KAAK,CAAC,KAAK,CAAC;OACpB;AACD,2DAAqD,EAAE,oDAAS,KAAK,EAAE;AACrE,cAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACjC,cAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AAC7C,cAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACvC,cAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACrC,cAAM,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,GAAG,CAAC,EAAE,wBAAwB,CAAC,CAAC;OACpE;AACD,4BAAsB,EAAE,4BAAS,KAAK,EAAE;AACtC,cAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,sBAAsB,CAAC,CAAC;OAC3D;KACF;AACD,kCAA8B,EAAE;AAC9B,WAAK,EAAE,eAAS,KAAK,EAAE;AACrB,YAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;AACtD,eAAO,OAAO,CAAC;OAChB;AACD,oCAA8B,EAAE,iCAAS,OAAO,EAAE;AAChD,cAAM,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AACrC,cAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;AACrD,cAAM,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AAC/B,cAAM,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;OACvD;KACF;GACF;AACD,iCAA+B,EAAE;AAC/B,SAAK,EAAE,iBAAW;AAChB,UAAI,KAAK,GAAG,YAAY,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;AACtD,WAAK,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC3B,aAAO,KAAK,CAAC;KACd;AACD,sBAAkB,EAAE;AAClB,WAAK,EAAE,eAAS,KAAK,EAAE;AACrB,eAAO,KAAK,CAAC,KAAK,CAAC;OACpB;AACD,0BAAoB,EAAE,yBAAS,KAAK,EAAE;AACpC,cAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;OACjC;KACF;GACF;AACD,4BAA0B,EAAE;AAC1B,SAAK,EAAE,iBAAW;AAChB,UAAI,KAAK,GAAG,YAAY,CAAC;AACvB,YAAI,EAAE,WAAW;AACjB,YAAI,EAAE,KAAK;AACX,gBAAQ,EAAE,QAAQ;AAClB,gBAAQ,EAAE,UAAU;OACrB,CAAC,CAAC;AACH,WAAK,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;AACpC,aAAO,KAAK,CAAC;KACd;AACD,sBAAkB,EAAE;AAClB,WAAK,EAAE,eAAS,KAAK,EAAE;AACrB,eAAO,KAAK,CAAC,KAAK,CAAC;OACpB;AACD,kCAA4B,EAAE,gCAAS,KAAK,EAAE;AAC5C,cAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AAC7C,cAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;OACxC;KACF;AACD,6BAAyB,EAAE;AACzB,WAAK,EAAE,eAAS,KAAK,EAAE;AACrB,YAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;AACtD,eAAO,OAAO,CAAC;OAChB;AACD,kCAA4B,EAAE,gCAAS,OAAO,EAAE;AAC9C,cAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACrC,cAAM,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;OAC7C;KACF;GACF;;AAED,mBAAiB,EAAE;AACjB,SAAK,EAAE,iBAAW;AAChB,UAAI,KAAK,GAAG,YAAY,EAAE,CAAC;AAC3B,WAAK,CAAC,WAAW,EAAE,CAAC;AACpB,aAAO,KAAK,CAAC;KACd;AACD,+BAA2B,EAAE,gCAAS,KAAK,EAAE;AAC3C,YAAM,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KAC1C;GACF;;AAED,iBAAe,EAAE;AACf,SAAK,EAAE,iBAAW;AAChB,UAAI,KAAK,GAAG,YAAY,EAAE,CAAC;AAC3B,WAAK,CAAC,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC;AAClC,WAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC9B,aAAO,KAAK,CAAC;KACd;AACD,oCAAgC,EAAE,oCAAS,KAAK,EAAE;AAChD,YAAM,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;KAChD;GACF;;AAED,gCAA8B,EAAE;AAC9B,SAAK,EAAE,iBAAW;AAChB,UAAI,KAAK,GAAG,YAAY,CAAC;AACvB,cAAM,EAAE;AACN,cAAI,EAAE,cAAc;AACpB,kBAAQ,EAAE,aAAa;SACxB;OACF,CAAC,CAAC;AACH,aAAO,KAAK,CAAC;KACd;AACD,mCAA+B,EAAE,mCAAS,KAAK,EAAE;AAC/C,YAAM,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;AACjD,YAAM,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;KAC7D;GACF;;AAED,8BAA4B,EAAE;AAC5B,SAAK,EAAE,iBAAW;AAChB,UAAI,KAAK,GAAG,YAAY,CAAC;AACvB,YAAI,EAAE,WAAW;AACjB,YAAI,EAAE,KAAK;AACX,gBAAQ,EAAE,QAAQ;AAClB,gBAAQ,EAAE,UAAU;AACpB,oBAAY,EAAE;AACZ,iBAAO,EAAE,iBAAiB;AAC1B,iBAAO,EAAE,iBAAiB;SAC3B;OACF,CAAC,CAAC;AACH,UAAI,QAAQ,GAAG;AACb,YAAI,EAAE,IAAI;AACV,eAAO,EAAE,cAAc;AACvB,gBAAQ,EAAE,mBAAmB;OAC9B,CAAC;AACF,WAAK,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;AAC9C,aAAO,KAAK,CAAC;KACd;AACD,sBAAkB,EAAE;AAClB,WAAK,EAAE,eAAS,KAAK,EAAE;AACrB,eAAO,KAAK,CAAC,KAAK,CAAC;OACpB;AACD,kCAA4B,EAAE,gCAAS,KAAK,EAAE;AAC5C,cAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AAC7C,cAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;OACxC;KACF;AACD,6BAAyB,EAAE;AACzB,WAAK,EAAE,eAAS,KAAK,EAAE;AACrB,YAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;AACtD,eAAO,OAAO,CAAC;OAChB;AACD,kCAA4B,EAAE,gCAAS,OAAO,EAAE;AAC9C,cAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACrC,cAAM,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACjC,cAAM,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;AAC5C,cAAM,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;AACjD,cAAM,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;AAC9C,cAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC;AACpD,cAAM,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC;OACtD;KACF;GACF;;CAEF,CAAC,UAAO,CAAC,MAAM,CAAC,CAAC","file":"gelfAppender-test-compiled.js","sourcesContent":["\"use strict\";\nvar vows = require('vows')\n, assert = require('assert')\n, sandbox = require('sandboxed-module')\n, log4js = require('../lib/log4js')\n, realLayouts = require('../lib/layouts')\n, setupLogging = function(options, category, compressedLength) {\n  var fakeDgram = {\n    sent: false,\n    socket: {\n      packetLength: 0,\n      closed: false,\n      close: function() {\n        this.closed = true;\n      },\n      send: function(pkt, offset, pktLength, port, host) {\n        fakeDgram.sent = true;\n        this.packet = pkt;\n        this.offset = offset;\n        this.packetLength = pktLength;\n        this.port = port;\n        this.host = host;\n      }\n    },\n    createSocket: function(type) {\n      this.type = type;\n      return this.socket;\n    }\n  }\n  , fakeZlib = {\n    gzip: function(objectToCompress, callback) {\n      fakeZlib.uncompressed = objectToCompress;\n      if (this.shouldError) {\n        callback({ stack: \"oh noes\" });\n        return;\n      }\n\n      if (compressedLength) {\n        callback(null, { length: compressedLength });\n      } else {\n        callback(null, \"I've been compressed\");\n      }\n    }\n  }\n  , exitHandler\n  , fakeConsole = {\n    error: function(message) {\n      this.message = message;\n    }\n  }\n  , fakeLayouts = {\n    layout: function(type, options) {\n      this.type = type;\n      this.options = options;\n      return realLayouts.messagePassThroughLayout;\n    },\n    messagePassThroughLayout: realLayouts.messagePassThroughLayout\n  }\n  , appender = sandbox.require('../lib/appenders/gelf', {\n    requires: {\n      dgram: fakeDgram,\n      zlib: fakeZlib,\n      '../layouts': fakeLayouts\n    },\n    globals: {\n      process: {\n        on: function(evt, handler) {\n          if (evt === 'exit') {\n            exitHandler = handler;\n          }\n        }\n      },\n      console: fakeConsole\n    }\n  });\n\n  log4js.clearAppenders();\n  log4js.addAppender(appender.configure(options || {}), category || \"gelf-test\");\n  return {\n    dgram: fakeDgram,\n    compress: fakeZlib,\n    exitHandler: exitHandler,\n    console: fakeConsole,\n    layouts: fakeLayouts,\n    logger: log4js.getLogger(category || \"gelf-test\")\n  };\n};\n\nvows.describe('log4js gelfAppender').addBatch({\n\n  'with default gelfAppender settings': {\n    topic: function() {\n      var setup = setupLogging();\n      setup.logger.info(\"This is a test\");\n      return setup;\n    },\n    'the dgram packet': {\n      topic: function(setup) {\n        return setup.dgram;\n      },\n      'should be sent via udp to the localhost gelf server': function(dgram) {\n        assert.equal(dgram.type, \"udp4\");\n        assert.equal(dgram.socket.host, \"localhost\");\n        assert.equal(dgram.socket.port, 12201);\n        assert.equal(dgram.socket.offset, 0);\n        assert.ok(dgram.socket.packetLength > 0, \"Received blank message\");\n      },\n      'should be compressed': function(dgram) {\n        assert.equal(dgram.socket.packet, \"I've been compressed\");\n      }\n    },\n    'the uncompressed log message': {\n      topic: function(setup) {\n        var message = JSON.parse(setup.compress.uncompressed);\n        return message;\n      },\n      'should be in the gelf format': function(message) {\n        assert.equal(message.version, '1.1');\n        assert.equal(message.host, require('os').hostname());\n        assert.equal(message.level, 6); //INFO\n        assert.equal(message.short_message, 'This is a test');\n      }\n    }\n  },\n  'with a message longer than 8k': {\n    topic: function() {\n      var setup = setupLogging(undefined, undefined, 10240);\n      setup.logger.info(\"Blah.\");\n      return setup;\n    },\n    'the dgram packet': {\n      topic: function(setup) {\n        return setup.dgram;\n      },\n      'should not be sent': function(dgram) {\n        assert.equal(dgram.sent, false);\n      }\n    }\n  },\n  'with non-default options': {\n    topic: function() {\n      var setup = setupLogging({\n        host: 'somewhere',\n        port: 12345,\n        hostname: 'cheese',\n        facility: 'nonsense'\n      });\n      setup.logger.debug(\"Just testing.\");\n      return setup;\n    },\n    'the dgram packet': {\n      topic: function(setup) {\n        return setup.dgram;\n      },\n      'should pick up the options': function(dgram) {\n        assert.equal(dgram.socket.host, 'somewhere');\n        assert.equal(dgram.socket.port, 12345);\n      }\n    },\n    'the uncompressed packet': {\n      topic: function(setup) {\n        var message = JSON.parse(setup.compress.uncompressed);\n        return message;\n      },\n      'should pick up the options': function(message) {\n        assert.equal(message.host, 'cheese');\n        assert.equal(message._facility, 'nonsense');\n      }\n    }\n  },\n\n  'on process.exit': {\n    topic: function() {\n      var setup = setupLogging();\n      setup.exitHandler();\n      return setup;\n    },\n    'should close open sockets': function(setup) {\n      assert.isTrue(setup.dgram.socket.closed);\n    }\n  },\n\n  'on zlib error': {\n    topic: function() {\n      var setup = setupLogging();\n      setup.compress.shouldError = true;\n      setup.logger.info('whatever');\n      return setup;\n    },\n    'should output to console.error': function(setup) {\n      assert.equal(setup.console.message, 'oh noes');\n    }\n  },\n\n  'with layout in configuration': {\n    topic: function() {\n      var setup = setupLogging({\n        layout: {\n          type: 'madeuplayout',\n          earlgrey: 'yes, please'\n        }\n      });\n      return setup;\n    },\n    'should pass options to layout': function(setup) {\n      assert.equal(setup.layouts.type, 'madeuplayout');\n      assert.equal(setup.layouts.options.earlgrey, 'yes, please');\n    }\n  },\n\n  'with custom fields options': {\n    topic: function() {\n      var setup = setupLogging({\n        host: 'somewhere',\n        port: 12345,\n        hostname: 'cheese',\n        facility: 'nonsense',\n        customFields: {\n          _every1: 'Hello every one',\n          _every2: 'Hello every two'\n        }\n      });\n      var myFields = {\n        GELF: true,\n        _every2: 'Overwritten!',\n        _myField: 'This is my field!'\n      };\n      setup.logger.debug(myFields, \"Just testing.\");\n      return setup;\n    },\n    'the dgram packet': {\n      topic: function(setup) {\n        return setup.dgram;\n      },\n      'should pick up the options': function(dgram) {\n        assert.equal(dgram.socket.host, 'somewhere');\n        assert.equal(dgram.socket.port, 12345);\n      }\n    },\n    'the uncompressed packet': {\n      topic: function(setup) {\n        var message = JSON.parse(setup.compress.uncompressed);\n        return message;\n      },\n      'should pick up the options': function(message) {\n        assert.equal(message.host, 'cheese');\n        assert.isUndefined(message.GELF); // make sure flag was removed\n        assert.equal(message._facility, 'nonsense');\n        assert.equal(message._every1, 'Hello every one'); // the default value\n        assert.equal(message._every2, 'Overwritten!'); // the overwritten value\n        assert.equal(message._myField, 'This is my field!'); // the value for this message only\n        assert.equal(message.short_message, 'Just testing.'); // skip the field object\n      }\n    }\n  }\n\n}).export(module);\n"]}