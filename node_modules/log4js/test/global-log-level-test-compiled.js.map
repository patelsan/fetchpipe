{"version":3,"sources":["global-log-level-test.js"],"names":[],"mappings":"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","file":"global-log-level-test-compiled.js","sourcesContent":["\"use strict\";\nvar vows = require('vows')\n, assert = require('assert');\n\nvows.describe('log4js global loglevel').addBatch({\n  'global loglevel' : {\n    topic: function() {\n      var log4js = require('../lib/log4js');\n      return log4js;\n    },\n\n    'set global loglevel on creation': function(log4js) {\n      var log1 = log4js.getLogger('log1');\n      var level = 'OFF';\n      if (log1.level.toString() == level) {\n        level = 'TRACE';\n      }\n      assert.notEqual(log1.level.toString(), level);\n\n      log4js.setGlobalLogLevel(level);\n      assert.equal(log1.level.toString(), level);\n\n      var log2 = log4js.getLogger('log2');\n      assert.equal(log2.level.toString(), level);\n    },\n\n    'global change loglevel': function(log4js) {\n      var log1 = log4js.getLogger('log1');\n      var log2 = log4js.getLogger('log2');\n      var level = 'OFF';\n      if (log1.level.toString() == level) {\n        level = 'TRACE';\n      }\n      assert.notEqual(log1.level.toString(), level);\n\n      log4js.setGlobalLogLevel(level);\n      assert.equal(log1.level.toString(), level);\n      assert.equal(log2.level.toString(), level);\n    },\n\n    'override loglevel': function(log4js) {\n      var log1 = log4js.getLogger('log1');\n      var log2 = log4js.getLogger('log2');\n      var level = 'OFF';\n      if (log1.level.toString() == level) {\n        level = 'TRACE';\n      }\n      assert.notEqual(log1.level.toString(), level);\n\n      var oldLevel = log1.level.toString();\n      assert.equal(log2.level.toString(), oldLevel);\n\n      log2.setLevel(level);\n      assert.equal(log1.level.toString(), oldLevel);\n      assert.equal(log2.level.toString(), level);\n      assert.notEqual(oldLevel, level);\n\n      log2.removeLevel();\n      assert.equal(log1.level.toString(), oldLevel);\n      assert.equal(log2.level.toString(), oldLevel);\n    },\n\n    'preload loglevel': function(log4js) {\n      var log1 = log4js.getLogger('log1');\n      var level = 'OFF';\n      if (log1.level.toString() == level) {\n        level = 'TRACE';\n      }\n      assert.notEqual(log1.level.toString(), level);\n\n      var oldLevel = log1.level.toString();\n      log4js.getLogger('log2').setLevel(level);\n\n      assert.equal(log1.level.toString(), oldLevel);\n\n      // get again same logger but as different variable\n      var log2 = log4js.getLogger('log2');\n      assert.equal(log2.level.toString(), level);\n      assert.notEqual(oldLevel, level);\n\n      log2.removeLevel();\n      assert.equal(log1.level.toString(), oldLevel);\n      assert.equal(log2.level.toString(), oldLevel);\n    },\n\n    'set level on all categories': function(log4js) {\n      // Get 2 loggers\n      var log1 = log4js.getLogger('log1');\n      var log2 = log4js.getLogger('log2');\n\n      // First a test with 2 categories with different levels\n      var config = {\n        'levels': {\n          'log1': 'ERROR',\n          'log2': 'WARN'\n        }\n      };\n      log4js.configure(config);\n\n      // Check if the levels are set correctly\n      assert.equal('ERROR', log1.level.toString());\n      assert.equal('WARN', log2.level.toString());\n\n      log1.removeLevel();\n      log2.removeLevel();\n\n      // Almost identical test, but now we set\n      // level on all categories\n      var config2 = {\n        'levels': {\n          '[all]': 'DEBUG'\n        }\n      };\n      log4js.configure(config2);\n\n      // Check if the loggers got the DEBUG level\n      assert.equal('DEBUG', log1.level.toString());\n      assert.equal('DEBUG', log2.level.toString());\n    }\n  }\n}).export(module);\n"]}