{"version":3,"sources":["levels-test.js"],"names":[],"mappings":"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","file":"levels-test-compiled.js","sourcesContent":["\"use strict\";\nvar vows = require('vows')\n, assert = require('assert')\n, levels = require('../lib/levels');\n\nfunction assertThat(level) {\n  function assertForEach(assertion, test, otherLevels) {\n    otherLevels.forEach(function(other) {\n      assertion.call(assert, test.call(level, other));\n    });\n  }\n\n  return {\n    isLessThanOrEqualTo: function(levels) {\n      assertForEach(assert.isTrue, level.isLessThanOrEqualTo, levels);\n    },\n    isNotLessThanOrEqualTo: function(levels) {\n      assertForEach(assert.isFalse, level.isLessThanOrEqualTo, levels);\n    },\n    isGreaterThanOrEqualTo: function(levels) {\n      assertForEach(assert.isTrue, level.isGreaterThanOrEqualTo, levels);\n    },\n    isNotGreaterThanOrEqualTo: function(levels) {\n      assertForEach(assert.isFalse, level.isGreaterThanOrEqualTo, levels);\n    },\n    isEqualTo: function(levels) {\n      assertForEach(assert.isTrue, level.isEqualTo, levels);\n    },\n    isNotEqualTo: function(levels) {\n      assertForEach(assert.isFalse, level.isEqualTo, levels);\n    }\n  };\n}\n\nvows.describe('levels').addBatch({\n  'values': {\n    topic: levels,\n    'should define some levels': function(levels) {\n      assert.isNotNull(levels.ALL);\n      assert.isNotNull(levels.TRACE);\n      assert.isNotNull(levels.DEBUG);\n      assert.isNotNull(levels.INFO);\n      assert.isNotNull(levels.WARN);\n      assert.isNotNull(levels.ERROR);\n      assert.isNotNull(levels.FATAL);\n      assert.isNotNull(levels.MARK);\n      assert.isNotNull(levels.OFF);\n    },\n    'ALL': {\n      topic: levels.ALL,\n      'should be less than the other levels': function(all) {\n        assertThat(all).isLessThanOrEqualTo(\n          [ \n            levels.ALL, \n            levels.TRACE, \n            levels.DEBUG, \n            levels.INFO, \n            levels.WARN, \n            levels.ERROR, \n            levels.FATAL,\n            levels.MARK,\n            levels.OFF\n          ]\n        );\n      },\n      'should be greater than no levels': function(all) {\n        assertThat(all).isNotGreaterThanOrEqualTo(\n          [\n            levels.TRACE, \n            levels.DEBUG, \n            levels.INFO, \n            levels.WARN, \n            levels.ERROR, \n            levels.FATAL, \n            levels.MARK,\n            levels.OFF\n          ]\n        );\n      },\n      'should only be equal to ALL': function(all) {\n        assertThat(all).isEqualTo([levels.toLevel(\"ALL\")]);\n        assertThat(all).isNotEqualTo(\n          [\n            levels.TRACE, \n            levels.DEBUG, \n            levels.INFO, \n            levels.WARN, \n            levels.ERROR, \n            levels.FATAL, \n            levels.MARK,\n            levels.OFF\n          ]\n        );\n      }\n    },\n    'TRACE': {\n      topic: levels.TRACE,\n      'should be less than DEBUG': function(trace) {\n        assertThat(trace).isLessThanOrEqualTo(\n          [\n            levels.DEBUG, \n            levels.INFO, \n            levels.WARN, \n            levels.ERROR, \n            levels.FATAL, \n            levels.MARK,\n            levels.OFF\n          ]\n        );\n        assertThat(trace).isNotLessThanOrEqualTo([levels.ALL]);\n      },\n      'should be greater than ALL': function(trace) {\n        assertThat(trace).isGreaterThanOrEqualTo([levels.ALL, levels.TRACE]);\n        assertThat(trace).isNotGreaterThanOrEqualTo(\n          [\n            levels.DEBUG, \n            levels.INFO, \n            levels.WARN, \n            levels.ERROR, \n            levels.FATAL, \n            levels.MARK,\n            levels.OFF\n          ]\n        );\n      },\n      'should only be equal to TRACE': function(trace) {\n        assertThat(trace).isEqualTo([levels.toLevel(\"TRACE\")]);\n        assertThat(trace).isNotEqualTo(\n          [\n            levels.ALL, \n            levels.DEBUG, \n            levels.INFO, \n            levels.WARN, \n            levels.ERROR, \n            levels.FATAL, \n            levels.MARK,\n            levels.OFF\n          ]\n        );\n      }\n    },\n    'DEBUG': {\n      topic: levels.DEBUG,\n      'should be less than INFO': function(debug) {\n        assertThat(debug).isLessThanOrEqualTo(\n          [\n            levels.INFO, \n            levels.WARN, \n            levels.ERROR, \n            levels.FATAL, \n            levels.MARK,\n            levels.OFF\n          ]\n        );\n        assertThat(debug).isNotLessThanOrEqualTo([levels.ALL, levels.TRACE]);\n      },\n      'should be greater than TRACE': function(debug) {\n        assertThat(debug).isGreaterThanOrEqualTo([levels.ALL, levels.TRACE]);\n        assertThat(debug).isNotGreaterThanOrEqualTo(\n          [\n            levels.INFO, \n            levels.WARN, \n            levels.ERROR, \n            levels.FATAL, \n            levels.MARK,\n            levels.OFF\n          ]\n        );\n      },\n      'should only be equal to DEBUG': function(trace) {\n        assertThat(trace).isEqualTo([levels.toLevel(\"DEBUG\")]);\n        assertThat(trace).isNotEqualTo(\n          [\n            levels.ALL, \n            levels.TRACE, \n            levels.INFO, \n            levels.WARN, \n            levels.ERROR, \n            levels.FATAL, \n            levels.MARK,\n            levels.OFF\n          ]\n        );\n      }\n    },\n    'INFO': {\n      topic: levels.INFO,\n      'should be less than WARN': function(info) {\n        assertThat(info).isLessThanOrEqualTo([\n          levels.WARN, \n          levels.ERROR, \n          levels.FATAL, \n          levels.MARK,\n          levels.OFF\n        ]);\n        assertThat(info).isNotLessThanOrEqualTo([levels.ALL, levels.TRACE, levels.DEBUG]);\n      },\n      'should be greater than DEBUG': function(info) {\n        assertThat(info).isGreaterThanOrEqualTo([levels.ALL, levels.TRACE, levels.DEBUG]);\n        assertThat(info).isNotGreaterThanOrEqualTo([\n          levels.WARN, \n          levels.ERROR, \n          levels.FATAL, \n          levels.MARK,\n          levels.OFF\n        ]);\n      },\n      'should only be equal to INFO': function(trace) {\n        assertThat(trace).isEqualTo([levels.toLevel(\"INFO\")]);\n        assertThat(trace).isNotEqualTo([\n          levels.ALL, \n          levels.TRACE, \n          levels.DEBUG, \n          levels.WARN, \n          levels.ERROR, \n          levels.FATAL, \n          levels.MARK,\n          levels.OFF\n        ]);\n      }\n    },\n    'WARN': {\n      topic: levels.WARN,\n      'should be less than ERROR': function(warn) {\n        assertThat(warn).isLessThanOrEqualTo([levels.ERROR, levels.FATAL, levels.MARK, levels.OFF]);\n        assertThat(warn).isNotLessThanOrEqualTo([\n          levels.ALL, \n          levels.TRACE, \n          levels.DEBUG, \n          levels.INFO\n        ]);\n      },\n      'should be greater than INFO': function(warn) {\n        assertThat(warn).isGreaterThanOrEqualTo([\n          levels.ALL, \n          levels.TRACE, \n          levels.DEBUG, \n          levels.INFO\n        ]);\n        assertThat(warn).isNotGreaterThanOrEqualTo([levels.ERROR, levels.FATAL, levels.MARK, levels.OFF]);\n      },\n      'should only be equal to WARN': function(trace) {\n        assertThat(trace).isEqualTo([levels.toLevel(\"WARN\")]);\n        assertThat(trace).isNotEqualTo([\n          levels.ALL, \n          levels.TRACE, \n          levels.DEBUG, \n          levels.INFO, \n          levels.ERROR, \n          levels.FATAL, \n          levels.OFF\n        ]);\n      }\n    },\n    'ERROR': {\n      topic: levels.ERROR,\n      'should be less than FATAL': function(error) {\n        assertThat(error).isLessThanOrEqualTo([levels.FATAL, levels.MARK, levels.OFF]);\n        assertThat(error).isNotLessThanOrEqualTo([\n          levels.ALL, \n          levels.TRACE, \n          levels.DEBUG, \n          levels.INFO, \n          levels.WARN\n        ]);\n      },\n      'should be greater than WARN': function(error) {\n        assertThat(error).isGreaterThanOrEqualTo([\n          levels.ALL, \n          levels.TRACE, \n          levels.DEBUG, \n          levels.INFO, \n          levels.WARN\n        ]);\n        assertThat(error).isNotGreaterThanOrEqualTo([levels.FATAL, levels.MARK, levels.OFF]);\n      },\n      'should only be equal to ERROR': function(trace) {\n        assertThat(trace).isEqualTo([levels.toLevel(\"ERROR\")]);\n        assertThat(trace).isNotEqualTo([\n          levels.ALL, \n          levels.TRACE, \n          levels.DEBUG, \n          levels.INFO, \n          levels.WARN, \n          levels.FATAL, \n          levels.MARK,\n          levels.OFF\n        ]);\n      }\n    },\n    'FATAL': {\n      topic: levels.FATAL,\n      'should be less than OFF': function(fatal) {\n        assertThat(fatal).isLessThanOrEqualTo([levels.MARK, levels.OFF]);\n        assertThat(fatal).isNotLessThanOrEqualTo([\n          levels.ALL, \n          levels.TRACE, \n          levels.DEBUG, \n          levels.INFO, \n          levels.WARN, \n          levels.ERROR\n        ]);\n      },\n      'should be greater than ERROR': function(fatal) {\n        assertThat(fatal).isGreaterThanOrEqualTo([\n          levels.ALL, \n          levels.TRACE, \n          levels.DEBUG, \n          levels.INFO, \n          levels.WARN, \n          levels.ERROR\n       ]);\n        assertThat(fatal).isNotGreaterThanOrEqualTo([levels.MARK, levels.OFF]);\n      },\n      'should only be equal to FATAL': function(fatal) {\n        assertThat(fatal).isEqualTo([levels.toLevel(\"FATAL\")]);\n        assertThat(fatal).isNotEqualTo([\n          levels.ALL, \n          levels.TRACE, \n          levels.DEBUG, \n          levels.INFO, \n          levels.WARN, \n          levels.ERROR,\n          levels.MARK, \n          levels.OFF\n        ]);\n      }\n    },\n    'MARK': {\n      topic: levels.MARK,\n      'should be less than OFF': function(mark) {\n        assertThat(mark).isLessThanOrEqualTo([levels.OFF]);\n        assertThat(mark).isNotLessThanOrEqualTo([\n          levels.ALL, \n          levels.TRACE, \n          levels.DEBUG, \n          levels.INFO, \n          levels.WARN, \n          levels.FATAL, \n          levels.ERROR\n        ]);\n      },\n      'should be greater than FATAL': function(mark) {\n        assertThat(mark).isGreaterThanOrEqualTo([\n          levels.ALL, \n          levels.TRACE, \n          levels.DEBUG, \n          levels.INFO, \n          levels.WARN, \n          levels.ERROR,\n          levels.FATAL\n       ]);\n        assertThat(mark).isNotGreaterThanOrEqualTo([levels.OFF]);\n      },\n      'should only be equal to MARK': function(mark) {\n        assertThat(mark).isEqualTo([levels.toLevel(\"MARK\")]);\n        assertThat(mark).isNotEqualTo([\n          levels.ALL, \n          levels.TRACE, \n          levels.DEBUG, \n          levels.INFO, \n          levels.WARN, \n          levels.ERROR,\n          levels.FATAL, \n          levels.OFF\n        ]);\n      }\n    },\n    'OFF': {\n      topic: levels.OFF,\n      'should not be less than anything': function(off) {\n        assertThat(off).isNotLessThanOrEqualTo([\n          levels.ALL, \n          levels.TRACE, \n          levels.DEBUG, \n          levels.INFO, \n          levels.WARN, \n          levels.ERROR, \n          levels.FATAL,\n          levels.MARK\n        ]);\n      },\n      'should be greater than everything': function(off) {\n        assertThat(off).isGreaterThanOrEqualTo([\n          levels.ALL, \n          levels.TRACE, \n          levels.DEBUG, \n          levels.INFO, \n          levels.WARN, \n          levels.ERROR, \n          levels.FATAL,\n          levels.MARK\n        ]);\n      },\n      'should only be equal to OFF': function(off) {\n        assertThat(off).isEqualTo([levels.toLevel(\"OFF\")]);\n        assertThat(off).isNotEqualTo([\n          levels.ALL, \n          levels.TRACE, \n          levels.DEBUG, \n          levels.INFO, \n          levels.WARN, \n          levels.ERROR, \n          levels.FATAL,\n          levels.MARK\n        ]);\n      }\n    }\n  },\n  'isGreaterThanOrEqualTo': {\n    topic: levels.INFO,\n    'should handle string arguments': function(info) {\n      assertThat(info).isGreaterThanOrEqualTo([\"all\", \"trace\", \"debug\"]);\n      assertThat(info).isNotGreaterThanOrEqualTo(['warn', 'ERROR', 'Fatal', 'MARK', 'off']);\n    }\n  },\n  'isLessThanOrEqualTo': {\n    topic: levels.INFO,\n    'should handle string arguments': function(info) {\n      assertThat(info).isNotLessThanOrEqualTo([\"all\", \"trace\", \"debug\"]);\n      assertThat(info).isLessThanOrEqualTo(['warn', 'ERROR', 'Fatal', 'MARK', 'off']);\n    }\n  },\n  'isEqualTo': {\n    topic: levels.INFO,\n    'should handle string arguments': function(info) {\n      assertThat(info).isEqualTo([\"info\", \"INFO\", \"iNfO\"]);\n    }\n  },\n  'toLevel': {\n    'with lowercase argument': {\n      topic: levels.toLevel(\"debug\"),\n      'should take the string and return the corresponding level': function(level) {\n        assert.equal(level, levels.DEBUG);\n      }\n    },\n    'with uppercase argument': {\n      topic: levels.toLevel(\"DEBUG\"),\n      'should take the string and return the corresponding level': function(level) {\n        assert.equal(level, levels.DEBUG);\n      }\n    },\n    'with varying case': {\n      topic: levels.toLevel(\"DeBuG\"),\n      'should take the string and return the corresponding level': function(level) {\n        assert.equal(level, levels.DEBUG);\n      }\n    },\n    'with unrecognised argument': {\n      topic: levels.toLevel(\"cheese\"),\n      'should return undefined': function(level) {\n        assert.isUndefined(level);\n      }\n    },\n    'with unrecognised argument and default value': {\n      topic: levels.toLevel(\"cheese\", levels.DEBUG),\n      'should return default value': function(level) {\n        assert.equal(level, levels.DEBUG);\n      }\n    }\n  }\n}).export(module);\n"]}