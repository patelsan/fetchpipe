{"version":3,"sources":["log-abspath-test.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACxB,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;IAC1B,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACtB,OAAO,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;;AAExC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC;AACvC,WAAS,EAAE;AACT,SAAK,EAAE,iBAAW;AAChB,UAAI,eAAe;UACnB,MAAM,GAAG,OAAO,CAAC,OAAO,CACtB,eAAe,EACf,EAAE,QAAQ,EACR,EAAE,kBAAkB,EAClB,EAAE,IAAI,EAAE,MAAM;AACZ,oBAAQ,EAAE,oBAAW,EAAE;AACvB,qBAAS,EAAE,mBAAS,aAAa,EAAE,OAAO,EAAE;AAC1C,6BAAe,GAAG,OAAO,CAAC;AAC1B,qBAAO,YAAW,EAAE,CAAC;aACtB;WACF;SACF;OACF,CACF;UACD,MAAM,GAAG;AACP,mBAAW,EAAE,CACX;AACE,gBAAM,EAAG,MAAM;AACf,oBAAU,EAAG,oBAAoB;SAClC,CACF;OACF,CAAC;;AAEF,YAAM,CAAC,SAAS,CAAC,MAAM,EAAE;AACvB,WAAG,EAAE,mBAAmB;OACzB,CAAC,CAAC;AACH,aAAO,eAAe,CAAC;KACxB;AACD,wDAAoD,EAAE,sDAAS,OAAO,EAAE;AACtE,YAAM,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;KAChD;GACF;;AAED,iBAAe,EAAE;AACf,SAAK,EAAE,iBAAW;AAChB,UAAI,UAAU;UACd,YAAY,GAAG,OAAO,CAAC,OAAO,CAC5B,uBAAuB,EACvB,EAAE,QAAQ,EACR,EAAE,YAAY,EACZ,EAAE,iBAAiB,EACjB,2BAAS,IAAI,EAAE;AACb,wBAAU,GAAG,IAAI,CAAC;AAClB,qBAAO;AACL,kBAAE,EAAE,cAAW,EAAE;AACjB,mBAAG,EAAE,eAAW,EAAE;eACnB,CAAC;aACH;WACF;SACF;OACF,CACF,CAAC;AACF,kBAAY,CAAC,SAAS,CACpB;AACE,gBAAQ,EAAE,cAAc;AACxB,kBAAU,EAAE,EAAE;OACf,EACD,EAAE,GAAG,EAAE,mBAAmB,EAAE,CAC7B,CAAC;AACF,aAAO,UAAU,CAAC;KACnB;AACD,mDAA+C,EAAE,iDAAS,UAAU,EAAE;AACpE,UAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;AAC9E,YAAM,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;KACpC;GACF;CACF,CAAC,UAAO,CAAC,MAAM,CAAC,CAAC","file":"log-abspath-test-compiled.js","sourcesContent":["\"use strict\";\nvar vows = require('vows')\n, assert = require('assert')\n, path = require('path')\n, sandbox = require('sandboxed-module');\n\nvows.describe('log4js-abspath').addBatch({\n  'options': {\n    topic: function() {\n      var appenderOptions,\n      log4js = sandbox.require(\n        '../lib/log4js',\n        { requires:\n          { './appenders/fake':\n            { name: \"fake\",\n              appender: function() {},\n              configure: function(configuration, options) {\n                appenderOptions = options;\n                return function() {};\n              }\n            }\n          }\n        }\n      ),\n      config = {\n        \"appenders\": [\n          {\n            \"type\" : \"fake\",\n            \"filename\" : \"cheesy-wotsits.log\"\n          }\n        ]\n      };\n      \n      log4js.configure(config, {\n        cwd: '/absolute/path/to'\n      });\n      return appenderOptions;\n    },\n    'should be passed to appenders during configuration': function(options) {\n      assert.equal(options.cwd, '/absolute/path/to');\n    }\n  },\n\n  'file appender': {\n    topic: function() {\n      var fileOpened,\n      fileAppender = sandbox.require(\n        '../lib/appenders/file',\n        { requires:\n          { '../streams':\n            { RollingFileStream: \n              function(file) {\n                fileOpened = file;\n                return {\n                  on: function() {},\n                  end: function() {}\n                };\n              }\n            }\n          }\n        }\n      );\n      fileAppender.configure(\n        { \n          filename: \"whatever.log\", \n          maxLogSize: 10 \n        }, \n        { cwd: '/absolute/path/to' }\n      );\n      return fileOpened;\n    },\n    'should prepend options.cwd to config.filename': function(fileOpened) {\n      var expected = path.sep + path.join(\"absolute\", \"path\", \"to\", \"whatever.log\");\n      assert.equal(fileOpened, expected);\n    }\n  },\n}).export(module);\n"]}