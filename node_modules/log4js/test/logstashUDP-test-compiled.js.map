{"version":3,"sources":["logstashUDP-test.js"],"names":[],"mappings":"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","file":"logstashUDP-test-compiled.js","sourcesContent":["\"use strict\";\nvar sys = require(\"sys\");\nvar vows = require('vows')\n, assert = require('assert')\n, log4js = require('../lib/log4js')\n, sandbox = require('sandboxed-module')\n;\n\nfunction setupLogging(category, options) {\n  var udpSent = {};\n  \n  var fakeDgram = {\n    createSocket: function (type) {\n      return {\n        send: function(buffer, offset, length, port, host, callback) {\n          udpSent.date = new Date();\n          udpSent.host = host;\n          udpSent.port = port;\n          udpSent.length = length;\n          udpSent.offset = 0;\n          udpSent.buffer = buffer;\n          callback(undefined, length);\n        }\n      };\n    }\n  };\n\n  var logstashModule = sandbox.require('../lib/appenders/logstashUDP', {\n    requires: {\n      'dgram': fakeDgram\n    }\n  });\n  log4js.clearAppenders();\n  log4js.addAppender(logstashModule.configure(options), category);\n  \n  return {\n    logger: log4js.getLogger(category),\n    results: udpSent\n  };\n}\n\nvows.describe('logstashUDP appender').addBatch({\n  'when logging with logstash via UDP': {\n    topic: function() {\n      var setup = setupLogging('logstashUDP', {\n        \"host\": \"127.0.0.1\",\n        \"port\": 10001,\n        \"type\": \"logstashUDP\",\n        \"logType\": \"myAppType\",\n        \"category\": \"myLogger\",\n        \"fields\": {\n          \"field1\": \"value1\",\n          \"field2\": \"value2\"\n        },\n        \"layout\": {\n          \"type\": \"pattern\",\n          \"pattern\": \"%m\"\n        }\n      });\n      setup.logger.log('trace', 'Log event #1');\n      return setup;\n    },\n    'an UDP packet should be sent': function (topic) {\n      assert.equal(topic.results.host, \"127.0.0.1\");\n      assert.equal(topic.results.port, 10001);\n      assert.equal(topic.results.offset, 0);\n      var json = JSON.parse(topic.results.buffer.toString());\n      assert.equal(json.type, 'myAppType');\n      var fields = {\n        field1: 'value1',\n        field2: 'value2',\n        level: 'TRACE'\n      };\n      assert.equal(JSON.stringify(json.fields), JSON.stringify(fields));\n      assert.equal(json.message, 'Log event #1');\n      // Assert timestamp, up to hours resolution.\n      var date = new Date(json['@timestamp']);\n      assert.equal(\n        date.toISOString().substring(0, 14),\n        topic.results.date.toISOString().substring(0, 14)\n      );\n    }\n  },\n\n  'when missing some options': {\n    topic: function() {\n      var setup = setupLogging('myLogger', {\n        \"host\": \"127.0.0.1\",\n        \"port\": 10001,\n        \"type\": \"logstashUDP\",\n        \"category\": \"myLogger\",\n        \"layout\": {\n          \"type\": \"pattern\",\n          \"pattern\": \"%m\"\n        }\n      });\n      setup.logger.log('trace', 'Log event #1');\n      return setup;\n    },\n    'it sets some defaults': function (topic) {\n      var json = JSON.parse(topic.results.buffer.toString());\n      assert.equal(json.type, 'myLogger');\n      assert.equal(JSON.stringify(json.fields), JSON.stringify({'level': 'TRACE'}));\n    }\n  }\n}).export(module);\n"]}