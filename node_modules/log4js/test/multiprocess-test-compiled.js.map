{"version":3,"sources":["multiprocess-test.js"],"names":[],"mappings":"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","file":"multiprocess-test-compiled.js","sourcesContent":["\"use strict\";\nvar vows = require('vows')\n, sandbox = require('sandboxed-module')\n, assert = require('assert')\n;\n\nfunction makeFakeNet() {\n  return {\n    logEvents: [],\n    data: [],\n    cbs: {},\n    createConnectionCalled: 0,\n    fakeAppender: function(logEvent) {\n      this.logEvents.push(logEvent);\n    },\n    createConnection: function(port, host) {\n      var fakeNet = this;\n      this.port = port;\n      this.host = host;\n      this.createConnectionCalled += 1;\n      return {\n        on: function(evt, cb) {\n          fakeNet.cbs[evt] = cb;\n        },\n        write: function(data, encoding) {\n          fakeNet.data.push(data);\n          fakeNet.encoding = encoding;\n        },\n        end: function() {\n          fakeNet.closeCalled = true;\n        }\n      };\n    },\n    createServer: function(cb) {\n      var fakeNet = this;\n      cb({\n        remoteAddress: '1.2.3.4',\n        remotePort: '1234',\n        setEncoding: function(encoding) {\n          fakeNet.encoding = encoding;\n        },\n        on: function(event, cb) {\n          fakeNet.cbs[event] = cb;\n        }\n      });\n\n      return {\n        listen: function(port, host) {\n          fakeNet.port = port;\n          fakeNet.host = host;\n        }\n      };\n    }\n  };\n}\n\nvows.describe('Multiprocess Appender').addBatch({\n  'worker': {\n    topic: function() {\n      var fakeNet = makeFakeNet(),\n      appender = sandbox.require(\n        '../lib/appenders/multiprocess',\n        {\n          requires: {\n            'net': fakeNet\n          }\n        }\n      ).appender({ mode: 'worker', loggerPort: 1234, loggerHost: 'pants' });\n      \n      //don't need a proper log event for the worker tests\n      appender('before connect');\n      fakeNet.cbs.connect();\n      appender('after connect');\n      fakeNet.cbs.close(true);\n      appender('after error, before connect');\n      fakeNet.cbs.connect();\n      appender('after error, after connect');\n\t  appender(new Error('Error test'));\n      \n      return fakeNet;\n    },\n    'should open a socket to the loggerPort and loggerHost': function(net) {\n      assert.equal(net.port, 1234);\n      assert.equal(net.host, 'pants');\n    },\n    'should buffer messages written before socket is connected': function(net) {\n      assert.equal(net.data[0], JSON.stringify('before connect'));\n    },\n    'should write log messages to socket as json strings with a terminator string': function(net) {\n      assert.equal(net.data[0], JSON.stringify('before connect'));\n      assert.equal(net.data[1], '__LOG4JS__');\n      assert.equal(net.data[2], JSON.stringify('after connect'));\n      assert.equal(net.data[3], '__LOG4JS__');\n      assert.equal(net.encoding, 'utf8');\n    },\n    'should attempt to re-open the socket on error': function(net) {\n      assert.equal(net.data[4], JSON.stringify('after error, before connect'));\n      assert.equal(net.data[5], '__LOG4JS__');\n      assert.equal(net.data[6], JSON.stringify('after error, after connect'));\n      assert.equal(net.data[7], '__LOG4JS__');\n      assert.equal(net.createConnectionCalled, 2);\n    },\n    'should serialize an Error correctly': function(net) {\n      assert(JSON.parse(net.data[8]).stack, \"Expected:\\n\\n\" + net.data[8] + \"\\n\\n to have a 'stack' property\");\n      var actual = JSON.parse(net.data[8]).stack;\n      var expectedRegex = /^Error: Error test/;\n      assert(actual.match(expectedRegex), \"Expected: \\n\\n \" + actual + \"\\n\\n to match \" + expectedRegex);\n\n    }\n  },\n  'worker with timeout': {\n    topic: function() {\n      var fakeNet = makeFakeNet(),\n      appender = sandbox.require(\n        '../lib/appenders/multiprocess',\n        {\n          requires: {\n            'net': fakeNet\n          }\n        }\n      ).appender({ mode: 'worker' });\n      \n      //don't need a proper log event for the worker tests\n      appender('before connect');\n      fakeNet.cbs.connect();\n      appender('after connect');\n      fakeNet.cbs.timeout();\n      appender('after timeout, before close');\n      fakeNet.cbs.close();\n      appender('after close, before connect');\n      fakeNet.cbs.connect();\n      appender('after close, after connect');\n      \n      return fakeNet;\n    },\n    'should attempt to re-open the socket': function(net) {\n      //skipping the __LOG4JS__ separators\n      assert.equal(net.data[0], JSON.stringify('before connect'));\n      assert.equal(net.data[2], JSON.stringify('after connect'));\n      assert.equal(net.data[4], JSON.stringify('after timeout, before close'));\n      assert.equal(net.data[6], JSON.stringify('after close, before connect'));\n      assert.equal(net.data[8], JSON.stringify('after close, after connect'));\n      assert.equal(net.createConnectionCalled, 2);\n    }\n  },\n  'worker defaults': {\n    topic: function() {\n      var fakeNet = makeFakeNet(),\n      appender = sandbox.require(\n        '../lib/appenders/multiprocess',\n        {\n          requires: {\n            'net': fakeNet\n          }\n        }\n      ).appender({ mode: 'worker' });\n      \n      return fakeNet;\n    },\n    'should open a socket to localhost:5000': function(net) {\n      assert.equal(net.port, 5000);\n      assert.equal(net.host, 'localhost');\n    }\n  },\n  'master': {\n    topic: function() {\n      var fakeNet = makeFakeNet(),\n      appender = sandbox.require(\n        '../lib/appenders/multiprocess',\n        {\n          requires: {\n            'net': fakeNet\n          }\n        }\n      ).appender({ mode: 'master',\n                   loggerHost: 'server',\n                   loggerPort: 1234,\n                   actualAppender: fakeNet.fakeAppender.bind(fakeNet)\n                 });\n      \n      appender('this should be sent to the actual appender directly');\n      \n      return fakeNet;\n    },\n    'should listen for log messages on loggerPort and loggerHost': function(net) {\n      assert.equal(net.port, 1234);\n      assert.equal(net.host, 'server');\n    },\n    'should return the underlying appender': function(net) {\n      assert.equal(net.logEvents[0], 'this should be sent to the actual appender directly');\n    },\n    'when a client connects': {\n      topic: function(net) {\n        var logString = JSON.stringify(\n          { level: { level: 10000, levelStr: 'DEBUG' }\n            , data: ['some debug']}\n        ) + '__LOG4JS__';\n        \n        net.cbs.data(\n          JSON.stringify(\n            { level: { level: 40000, levelStr: 'ERROR' }\n              , data: ['an error message'] }\n          ) + '__LOG4JS__'\n        );\n        net.cbs.data(logString.substring(0, 10));\n        net.cbs.data(logString.substring(10));\n        net.cbs.data(logString + logString + logString);\n        net.cbs.end(\n          JSON.stringify(\n            { level:  { level: 50000, levelStr: 'FATAL' }\n              , data: [\"that's all folks\"] }\n          ) + '__LOG4JS__'\n        );\n        net.cbs.data('bad message__LOG4JS__');\n        return net;\n      },\n      'should parse log messages into log events and send to appender': function(net) {\n        assert.equal(net.logEvents[1].level.toString(), 'ERROR');\n        assert.equal(net.logEvents[1].data[0], 'an error message');\n        assert.equal(net.logEvents[1].remoteAddress, '1.2.3.4');\n        assert.equal(net.logEvents[1].remotePort, '1234');\n      },\n      'should parse log messages split into multiple chunks': function(net) {\n        assert.equal(net.logEvents[2].level.toString(), 'DEBUG');\n        assert.equal(net.logEvents[2].data[0], 'some debug');\n        assert.equal(net.logEvents[2].remoteAddress, '1.2.3.4');\n        assert.equal(net.logEvents[2].remotePort, '1234');\n      },\n      'should parse multiple log messages in a single chunk': function(net) {\n        assert.equal(net.logEvents[3].data[0], 'some debug');\n        assert.equal(net.logEvents[4].data[0], 'some debug');\n        assert.equal(net.logEvents[5].data[0], 'some debug');\n      },\n      'should handle log messages sent as part of end event': function(net) {\n        assert.equal(net.logEvents[6].data[0], \"that's all folks\");\n      },\n      'should handle unparseable log messages': function(net) {\n        assert.equal(net.logEvents[7].level.toString(), 'ERROR');\n        assert.equal(net.logEvents[7].categoryName, 'log4js');\n        assert.equal(net.logEvents[7].data[0], 'Unable to parse log:');\n        assert.equal(net.logEvents[7].data[1], 'bad message');\n      }\n    }\n  },\n  'master defaults': {\n    topic: function() {\n      var fakeNet = makeFakeNet(),\n      appender = sandbox.require(\n        '../lib/appenders/multiprocess',\n        {\n          requires: {\n            'net': fakeNet\n          }\n        }\n      ).appender({ mode: 'master' });\n      \n      return fakeNet;\n    },\n    'should listen for log messages on localhost:5000': function(net) {\n      assert.equal(net.port, 5000);\n      assert.equal(net.host, 'localhost');\n    }\n  }\n}).addBatch({\n  'configure': {\n    topic: function() {\n      var results = {}\n      , fakeNet = makeFakeNet()\n      , appender = sandbox.require(\n        '../lib/appenders/multiprocess',\n        {\n          requires: {\n            'net': fakeNet,\n            '../log4js': {\n              loadAppender: function(app) {\n                results.appenderLoaded = app;\n              },\n              appenderMakers: {\n                'madeupappender': function(config, options) {\n                  results.config = config;\n                  results.options = options;\n                }\n              }\n            }\n          }\n        }\n      ).configure(\n        {\n          mode: 'master',\n          appender: {\n            type: 'madeupappender',\n            cheese: 'gouda'\n          }\n        },\n        { crackers: 'jacobs' }\n      );\n\n      return results;\n        \n    },\n    'should load underlying appender for master': function(results) {\n      assert.equal(results.appenderLoaded, 'madeupappender');\n    },\n    'should pass config to underlying appender': function(results) {\n      assert.equal(results.config.cheese, 'gouda');\n    },\n    'should pass options to underlying appender': function(results) {\n      assert.equal(results.options.crackers, 'jacobs');\n    }\n  }\n}).exportTo(module);\n"]}