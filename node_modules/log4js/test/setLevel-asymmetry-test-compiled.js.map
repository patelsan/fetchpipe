{"version":3,"sources":["setLevel-asymmetry-test.js"],"names":[],"mappings":"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","file":"setLevel-asymmetry-test-compiled.js","sourcesContent":["\"use strict\";\n/* jshint loopfunc: true */\n// This test shows an asymmetry between setLevel and isLevelEnabled \n// (in log4js-node@0.4.3 and earlier):\n// 1) setLevel(\"foo\") works, but setLevel(log4js.levels.foo) silently \n//    does not (sets the level to TRACE).\n// 2) isLevelEnabled(\"foo\") works as does isLevelEnabled(log4js.levels.foo).\n//\n\n// Basic set up\nvar vows = require('vows');\nvar assert = require('assert');\nvar log4js = require('../lib/log4js');\nvar logger = log4js.getLogger('test-setLevel-asymmetry');\n\n// uncomment one or other of the following to see progress (or not) while running the tests\n// var showProgress = console.log;\nvar showProgress = function() {};\n\n\n// Define the array of levels as string to iterate over.\nvar strLevels= ['Trace','Debug','Info','Warn','Error','Fatal'];\n\nvar log4jsLevels =[];\n// populate an array with the log4js.levels that match the strLevels.\n// Would be nice if we could iterate over log4js.levels instead, \n// but log4js.levels.toLevel prevents that for now.\nstrLevels.forEach(function(l) {\n  log4jsLevels.push(log4js.levels.toLevel(l));\n});\n\n\n// We are going to iterate over this object's properties to define an exhaustive list of vows.\nvar levelTypes = {\n  'string': strLevels,\n  'log4js.levels.level': log4jsLevels,\n};\n\n// Set up the basic vows batch for this test\nvar batch = {\n  setLevel: {\n  }\n};\n\nshowProgress('Populating batch object...');\n\n// Populating the batch object programmatically,\n// as I don't have the patience to manually populate it with \n// the (strLevels.length x levelTypes.length) ^ 2 = 144 possible test combinations\nfor (var type in levelTypes) {\n  var context = 'is called with a '+type;\n  var levelsToTest = levelTypes[type];\n  showProgress('Setting up the vows context for '+context);\n\n  batch.setLevel[context]= {};\n  levelsToTest.forEach( function(level) {\n    var subContext = 'of '+level;\n    var log4jsLevel=log4js.levels.toLevel(level.toString());\n\n    showProgress('Setting up the vows sub-context for '+subContext);\n    batch.setLevel[context][subContext] = {topic: level};\n    for (var comparisonType in levelTypes) {\n      levelTypes[comparisonType].forEach(function(comparisonLevel) {\n        var t = type;\n        var ct = comparisonType;\n        var expectedResult = log4jsLevel.isLessThanOrEqualTo(comparisonLevel);\n        var vow = 'isLevelEnabled(' + comparisonLevel + \n          ') called with a ' + comparisonType + \n          ' should return ' + expectedResult;\n        showProgress('Setting up the vows vow for '+vow);\n\n        batch.setLevel[context][subContext][vow] = function(levelToSet) {\n          logger.setLevel(levelToSet);\n          showProgress(\n            '*** Checking setLevel( ' + level + \n              ' ) of type ' + t + \n              ', and isLevelEnabled( ' + comparisonLevel + \n              ' ) of type ' + ct + '. Expecting: ' + expectedResult\n          );\n          assert.equal(\n            logger.isLevelEnabled(comparisonLevel), \n            expectedResult, \n            'Failed: calling setLevel( ' + level + \n              ' ) with type ' + type + \n              ', isLevelEnabled( ' + comparisonLevel + \n              ' ) of type ' + comparisonType + \n              ' did not return ' + expectedResult\n          );\n        };\n      });\n    }\n  });\n\n}\n\nshowProgress('Running tests...');\n\nvows.describe('log4js setLevel asymmetry fix').addBatch(batch).export(module);\n\n\n"]}