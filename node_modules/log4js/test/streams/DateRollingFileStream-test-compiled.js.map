{"version":3,"sources":["DateRollingFileStream-test.js"],"names":[],"mappings":"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","file":"DateRollingFileStream-test-compiled.js","sourcesContent":["\"use strict\";\nvar vows = require('vows')\n, assert = require('assert')\n, fs = require('fs')\n, semver = require('semver')\n, streams\n, DateRollingFileStream\n, testTime = new Date(2012, 8, 12, 10, 37, 11);\n\nif (semver.satisfies(process.version, '>=0.10.0')) {\n  streams = require('stream');\n} else {\n  streams = require('readable-stream');\n}\nDateRollingFileStream = require('../../lib/streams').DateRollingFileStream;\n\nfunction cleanUp(filename) {\n  return function() {\n    fs.unlink(filename);\n  };\n}\n\nfunction now() {\n  return testTime.getTime();\n}\n\nvows.describe('DateRollingFileStream').addBatch({\n  'arguments': {\n    topic: new DateRollingFileStream(\n      __dirname + '/test-date-rolling-file-stream-1', \n      'yyyy-mm-dd.hh'\n    ),\n    teardown: cleanUp(__dirname + '/test-date-rolling-file-stream-1'),\n    \n    'should take a filename and a pattern and return a WritableStream': function(stream) {\n      assert.equal(stream.filename, __dirname + '/test-date-rolling-file-stream-1');\n      assert.equal(stream.pattern, 'yyyy-mm-dd.hh');\n      assert.instanceOf(stream, streams.Writable);\n    },\n    'with default settings for the underlying stream': function(stream) {\n      assert.equal(stream.theStream.mode, 420);\n      assert.equal(stream.theStream.flags, 'a');\n      //encoding is not available on the underlying stream\n      //assert.equal(stream.encoding, 'utf8');\n    }\n  },\n  \n  'default arguments': {\n    topic: new DateRollingFileStream(__dirname + '/test-date-rolling-file-stream-2'),\n    teardown: cleanUp(__dirname + '/test-date-rolling-file-stream-2'),\n    \n    'pattern should be .yyyy-MM-dd': function(stream) {\n      assert.equal(stream.pattern, '.yyyy-MM-dd');\n    }\n  },\n\n  'with stream arguments': {\n    topic: new DateRollingFileStream(\n      __dirname + '/test-date-rolling-file-stream-3', \n      'yyyy-MM-dd', \n      { mode: parseInt('0666', 8) }\n    ),\n    teardown: cleanUp(__dirname + '/test-date-rolling-file-stream-3'),\n    \n    'should pass them to the underlying stream': function(stream) {\n      assert.equal(stream.theStream.mode, parseInt('0666', 8));\n    }\n  },\n\n  'with stream arguments but no pattern': {\n    topic: new DateRollingFileStream(\n      __dirname + '/test-date-rolling-file-stream-4', \n      { mode: parseInt('0666', 8) }\n    ),\n    teardown: cleanUp(__dirname + '/test-date-rolling-file-stream-4'),\n    \n    'should pass them to the underlying stream': function(stream) {\n      assert.equal(stream.theStream.mode, parseInt('0666', 8));\n    },\n    'should use default pattern': function(stream) {\n      assert.equal(stream.pattern, '.yyyy-MM-dd');\n    }\n  },\n\n  'with a pattern of .yyyy-MM-dd': {\n    topic: function() {\n      var that = this,\n      stream = new DateRollingFileStream(\n        __dirname + '/test-date-rolling-file-stream-5', '.yyyy-MM-dd', \n        null, \n        now\n      );\n      stream.write(\"First message\\n\", 'utf8', function() {\n        that.callback(null, stream);\n      });\n    },\n    teardown: cleanUp(__dirname + '/test-date-rolling-file-stream-5'),\n    \n    'should create a file with the base name': {\n      topic: function(stream) {\n        fs.readFile(__dirname + '/test-date-rolling-file-stream-5', this.callback);\n      },\n      'file should contain first message': function(result) {\n        assert.equal(result.toString(), \"First message\\n\");\n      }\n    },\n\n    'when the day changes': {\n      topic: function(stream) {\n        testTime = new Date(2012, 8, 13, 0, 10, 12);\n        stream.write(\"Second message\\n\", 'utf8', this.callback);\n      },\n      teardown: cleanUp(__dirname + '/test-date-rolling-file-stream-5.2012-09-12'),\n\n      \n      'the number of files': {\n        topic: function() {\n          fs.readdir(__dirname, this.callback);\n        },\n        'should be two': function(files) {\n          assert.equal(\n            files.filter(\n              function(file) { \n                return file.indexOf('test-date-rolling-file-stream-5') > -1; \n              }\n            ).length, \n            2\n          );\n        }\n      },\n      \n      'the file without a date': {\n        topic: function() {\n          fs.readFile(__dirname + '/test-date-rolling-file-stream-5', this.callback);\n        },\n        'should contain the second message': function(contents) {\n          assert.equal(contents.toString(), \"Second message\\n\");\n        }\n      },\n      \n      'the file with the date': {\n        topic: function() {\n          fs.readFile(__dirname + '/test-date-rolling-file-stream-5.2012-09-12', this.callback);\n        },\n        'should contain the first message': function(contents) {\n          assert.equal(contents.toString(), \"First message\\n\");\n        }\n      }\n    }\n  },\n  \n  'with alwaysIncludePattern': {\n    topic: function() {\n      var that = this,\n      testTime = new Date(2012, 8, 12, 0, 10, 12),\n      stream = new DateRollingFileStream(\n        __dirname + '/test-date-rolling-file-stream-pattern', \n        '.yyyy-MM-dd', \n        {alwaysIncludePattern: true}, \n        now\n      );\n      stream.write(\"First message\\n\", 'utf8', function() {\n        that.callback(null, stream);\n      });\n    },\n    teardown: cleanUp(__dirname + '/test-date-rolling-file-stream-pattern.2012-09-12'),\n    \n    'should create a file with the pattern set': {\n      topic: function(stream) {\n        fs.readFile(__dirname + '/test-date-rolling-file-stream-pattern.2012-09-12', this.callback);\n      },\n      'file should contain first message': function(result) {\n        assert.equal(result.toString(), \"First message\\n\");\n      }\n    },\n    \n    'when the day changes': {\n      topic: function(stream) {\n        testTime = new Date(2012, 8, 13, 0, 10, 12);\n        stream.write(\"Second message\\n\", 'utf8', this.callback);\n      },\n      teardown: cleanUp(__dirname + '/test-date-rolling-file-stream-pattern.2012-09-13'),\n      \n      \n      'the number of files': {\n        topic: function() {\n          fs.readdir(__dirname, this.callback);\n        },\n        'should be two': function(files) {\n          assert.equal(\n            files.filter(\n              function(file) { \n                return file.indexOf('test-date-rolling-file-stream-pattern') > -1; \n              }\n            ).length, \n            2\n          );\n        }\n      },\n      \n      'the file with the later date': {\n        topic: function() {\n          fs.readFile(\n            __dirname + '/test-date-rolling-file-stream-pattern.2012-09-13', \n            this.callback\n          );\n        },\n        'should contain the second message': function(contents) {\n          assert.equal(contents.toString(), \"Second message\\n\");\n        }\n      },\n      \n      'the file with the date': {\n        topic: function() {\n          fs.readFile(\n            __dirname + '/test-date-rolling-file-stream-pattern.2012-09-12', \n            this.callback\n          );\n        },\n        'should contain the first message': function(contents) {\n          assert.equal(contents.toString(), \"First message\\n\");\n        }\n      }\n    }\n  }\n\n}).exportTo(module);\n"]}