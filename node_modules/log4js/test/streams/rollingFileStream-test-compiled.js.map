{"version":3,"sources":["rollingFileStream-test.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACxB,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC;IACxB,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;IAC1B,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;IAC1B,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;IAClB,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;IAC1B,OAAO;IACP,iBAAiB,CAAC;;AAEpB,IAAI,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,UAAU,CAAC,EAAE;AACjD,SAAO,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;CAC7B,MAAM;AACL,SAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;CACtC;AACD,iBAAiB,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC,iBAAiB,CAAC;;AAEnE,SAAS,MAAM,CAAC,QAAQ,EAAE;AACxB,MAAI;AACF,MAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;GACzB,CAAC,OAAO,CAAC,EAAE;;GAEX;CACF;;AAED,SAAS,MAAM,CAAC,QAAQ,EAAE;AACxB,IAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;CACzC;;AAED,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC,QAAQ,CAAC;AAC1C,aAAW,EAAE;AACX,SAAK,EAAE,iBAAW;AAChB,YAAM,CAAC,SAAS,GAAG,2BAA2B,CAAC,CAAC;AAChD,aAAO,IAAI,iBAAiB,CAAC,0BAA0B,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;KACnE;AACD,8EAA0E,EAAE,iEAAS,MAAM,EAAE;AAC3F,YAAM,CAAC,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC5C,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,0BAA0B,CAAC,CAAC;AAC1D,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAChC,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;KACjC;AACD,qDAAiD,EAAE,mDAAS,MAAM,EAAE;AAClE,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AACzC,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;;;KAG3C;GACF;AACD,yBAAuB,EAAE;AACvB,SAAK,EAAE,iBAAW;AAChB,YAAM,CAAC,SAAS,GAAG,2BAA2B,CAAC,CAAC;AAChD,aAAO,IAAI,iBAAiB,CAC1B,0BAA0B,EAC1B,IAAI,EACJ,CAAC,EACD,EAAE,IAAI,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAC9B,CAAC;KACH;AACD,+CAA2C,EAAE,6CAAS,MAAM,EAAE;AAC5D,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;KAC1D;GACF;AACD,gBAAc,EAAE;AACd,SAAK,EAAE,iBAAW;AAChB,UAAI;AACF,YAAI,iBAAiB,CAAC,SAAS,GAAG,2BAA2B,CAAC,CAAC;OAChE,CAAC,OAAO,CAAC,EAAE;AACV,eAAO,CAAC,CAAC;OACV;KACF;AACD,2BAAuB,EAAE,4BAAS,GAAG,EAAE;AACrC,YAAM,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;KAC/B;GACF;AACD,6BAA2B,EAAE;AAC3B,SAAK,EAAE,iBAAW;AAChB,YAAM,CAAC,0BAA0B,CAAC,CAAC;AACnC,aAAO,IAAI,iBAAiB,CAAC,SAAS,GAAG,2BAA2B,EAAE,IAAI,CAAC,CAAC;KAC7E;AACD,gCAA4B,EAAE,gCAAS,MAAM,EAAE;AAC7C,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;KACjC;GACF;AACD,mCAAiC,EAAE;AACjC,SAAK,EAAE,iBAAW;AAChB,YAAM,CAAC,SAAS,GAAG,sCAAsC,CAAC,CAAC;AAC3D,UAAI,IAAI,GAAG,IAAI;UACb,MAAM,GAAG,IAAI,iBAAiB,CAC9B,SAAS,GAAG,sCAAsC,EAClD,GAAG,CACJ,CAAC;AACF,YAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,EAAE,YAAW;AACxC,cAAM,CAAC,GAAG,EAAE,CAAC;AACb,UAAE,CAAC,QAAQ,CAAC,SAAS,GAAG,sCAAsC,EAAE,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;OACxF,CAAC,CAAC;KACJ;AACD,8BAA0B,EAAE,8BAAS,QAAQ,EAAE;AAC7C,YAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;KAClC;AACD,yBAAqB,EAAE;AACrB,WAAK,EAAE,iBAAW;AAChB,UAAE,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;OACtC;AACD,qBAAe,EAAE,qBAAS,KAAK,EAAE;AAC/B,cAAM,CAAC,KAAK,CACV,KAAK,CAAC,MAAM,CACV,UAAS,IAAI,EAAE;AACb,iBAAO,IAAI,CAAC,OAAO,CAAC,qCAAqC,CAAC,GAAG,CAAC,CAAC,CAAC;SACjE,CACF,CAAC,MAAM,EACR,CAAC,CACF,CAAC;OACH;KACF;GACF;AACD,mCAAiC,EAAE;AACjC,SAAK,EAAE,iBAAW;AAChB,YAAM,CAAC,SAAS,GAAG,sCAAsC,CAAC,CAAC;AAC3D,YAAM,CAAC,SAAS,GAAG,wCAAwC,CAAC,CAAC;AAC7D,UAAI,IAAI,GAAG,IAAI;UACb,MAAM,GAAG,IAAI,iBAAiB,CAC9B,SAAS,GAAG,sCAAsC,EAClD,EAAE,CACH,CAAC;AACF,WAAK,CAAC,IAAI,CACR,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACrB,UAAS,CAAC,EAAE,EAAE,EAAE;AACd,cAAM,CAAC,KAAK,CAAC,CAAC,GAAE,WAAW,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;OAC1C,EACD,YAAW;AACT,cAAM,CAAC,GAAG,EAAE,CAAC;AACb,YAAI,CAAC,QAAQ,EAAE,CAAC;OACjB,CACF,CAAC;KACH;AACD,yBAAqB,EAAE;AACrB,WAAK,EAAE,iBAAW;AAChB,UAAE,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;OACtC;AACD,qBAAe,EAAE,qBAAS,KAAK,EAAE;AAC/B,cAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CACvB,UAAS,IAAI,EAAE;AACb,iBAAO,IAAI,CAAC,OAAO,CAAC,qCAAqC,CAAC,GAAG,CAAC,CAAC,CAAC;SACjE,CACF,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;OACd;KACF;AACD,oBAAgB,EAAE;AAChB,WAAK,EAAE,iBAAW;AAChB,UAAE,CAAC,QAAQ,CAAC,SAAS,GAAG,sCAAsC,EAAE,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;OACxF;AACD,gDAA0C,EAAE,4CAAS,QAAQ,EAAE;AAC7D,cAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAAC;OAChD;KACF;AACD,qBAAiB,EAAE;AACjB,WAAK,EAAE,iBAAW;AAChB,UAAE,CAAC,QAAQ,CAAC,SAAS,GAAG,wCAAwC,EAAE,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;OAC1F;AACD,kDAA4C,EAAE,8CAAS,QAAQ,EAAE;AAC/D,cAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,oDAAoD,CAAC,CAAC;OAC9E;KACF;GACF;AACD,iCAA+B,EAAE;AAC/B,SAAK,EAAE,iBAAW;AAChB,YAAM,CAAC,SAAS,GAAG,6CAA6C,CAAC,CAAC;AAClE,YAAM,CAAC,SAAS,GAAG,6CAA6C,CAAC,CAAC;AAClE,YAAM,CAAC,SAAS,GAAG,6CAA6C,CAAC,CAAC;AAClE,YAAM,CAAC,SAAS,GAAG,8CAA8C,CAAC,CAAC;AACnE,YAAM,CAAC,SAAS,GAAG,4CAA4C,CAAC,CAAC;;AAGjE,YAAM,CAAC,SAAS,GAAG,6CAA6C,CAAC,CAAC;AAClE,YAAM,CAAC,SAAS,GAAG,6CAA6C,CAAC,CAAC;AAClE,YAAM,CAAC,SAAS,GAAG,6CAA6C,CAAC,CAAC;AAClE,YAAM,CAAC,SAAS,GAAG,8CAA8C,CAAC,CAAC;AACnE,YAAM,CAAC,SAAS,GAAG,4CAA4C,CAAC,CAAC;;AAEjE,UAAI,IAAI,GAAG,IAAI;UACb,MAAM,GAAG,IAAI,iBAAiB,CAC9B,SAAS,GAAG,0CAA0C,EACtD,EAAE,EACF,CAAC,CACF,CAAC;AACF,WAAK,CAAC,IAAI,CACR,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACrB,UAAS,CAAC,EAAE,EAAE,EAAE;AACd,cAAM,CAAC,KAAK,CAAC,CAAC,GAAE,WAAW,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;OAC1C,EACD,YAAW;AACT,cAAM,CAAC,GAAG,EAAE,CAAC;AACb,YAAI,CAAC,QAAQ,EAAE,CAAC;OACjB,CACF,CAAC;KACH;AACD,eAAW,EAAE;AACX,WAAK,EAAE,iBAAW;AAChB,UAAE,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;OACtC;AACD,wBAAkB,EAAE,wBAAS,KAAK,EAAE;AAClC,cAAM,CAAC,OAAO,CAAC,KAAK,EAAE,yCAAyC,CAAC,CAAC;AACjE,cAAM,CAAC,OAAO,CAAC,KAAK,EAAE,2CAA2C,CAAC,CAAC;AACnE,cAAM,CAAC,OAAO,CAAC,KAAK,EAAE,2CAA2C,CAAC,CAAC;AACnE,cAAM,CAAC,OAAO,CAAC,KAAK,EAAE,4CAA4C,CAAC,CAAC;AACpE,cAAM,CAAC,OAAO,CAAC,KAAK,EAAE,4CAA4C,CAAC,CAAC;OACrE;KACF;GACF;CACF,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC","file":"rollingFileStream-test-compiled.js","sourcesContent":["\"use strict\";\nvar vows = require('vows')\n, async = require('async')\n, assert = require('assert')\n, events = require('events')\n, fs = require('fs')\n, semver = require('semver')\n, streams\n, RollingFileStream;\n\nif (semver.satisfies(process.version, '>=0.10.0')) {\n  streams = require('stream');\n} else {\n  streams = require('readable-stream');\n}\nRollingFileStream = require('../../lib/streams').RollingFileStream;\n\nfunction remove(filename) {\n  try {\n    fs.unlinkSync(filename);\n  } catch (e) {\n    //doesn't really matter if it failed\n  }\n}\n\nfunction create(filename) {\n  fs.writeFileSync(filename, \"test file\");\n}\n\nvows.describe('RollingFileStream').addBatch({\n  'arguments': {\n    topic: function() {\n      remove(__dirname + \"/test-rolling-file-stream\");\n      return new RollingFileStream(\"test-rolling-file-stream\", 1024, 5);\n    },\n    'should take a filename, file size (bytes), no. backups,  return Writable': function(stream) {\n      assert.instanceOf(stream, streams.Writable);\n      assert.equal(stream.filename, \"test-rolling-file-stream\");\n      assert.equal(stream.size, 1024);\n      assert.equal(stream.backups, 5);\n    },\n    'with default settings for the underlying stream': function(stream) {\n      assert.equal(stream.theStream.mode, 420);\n      assert.equal(stream.theStream.flags, 'a');\n      //encoding isn't a property on the underlying stream\n      //assert.equal(stream.theStream.encoding, 'utf8');\n    }\n  },\n  'with stream arguments': {\n    topic: function() {\n      remove(__dirname + '/test-rolling-file-stream');\n      return new RollingFileStream(\n        'test-rolling-file-stream', \n        1024, \n        5, \n        { mode: parseInt('0666', 8) }\n      );\n    },\n    'should pass them to the underlying stream': function(stream) {\n      assert.equal(stream.theStream.mode, parseInt('0666', 8));\n    }\n  },\n  'without size': {\n    topic: function() {\n      try {\n        new RollingFileStream(__dirname + \"/test-rolling-file-stream\");\n      } catch (e) {\n        return e;\n      }\n    },\n    'should throw an error': function(err) {\n      assert.instanceOf(err, Error);\n    }\n  },\n  'without number of backups': {\n    topic: function() {\n      remove('test-rolling-file-stream');\n      return new RollingFileStream(__dirname + \"/test-rolling-file-stream\", 1024);\n    },\n    'should default to 1 backup': function(stream) {\n      assert.equal(stream.backups, 1);\n    }\n  },\n  'writing less than the file size': {\n    topic: function() {\n      remove(__dirname + \"/test-rolling-file-stream-write-less\");\n      var that = this\n      , stream = new RollingFileStream(\n        __dirname + \"/test-rolling-file-stream-write-less\", \n        100\n      );\n      stream.write(\"cheese\", \"utf8\", function() {\n        stream.end();\n        fs.readFile(__dirname + \"/test-rolling-file-stream-write-less\", \"utf8\", that.callback);\n      });\n    },\n    'should write to the file': function(contents) {\n      assert.equal(contents, \"cheese\");\n    },\n    'the number of files': {\n      topic: function() {\n        fs.readdir(__dirname, this.callback);\n      },\n      'should be one': function(files) {\n        assert.equal(\n          files.filter(\n            function(file) { \n              return file.indexOf('test-rolling-file-stream-write-less') > -1; \n            }\n          ).length, \n          1\n        );\n      }\n    }\n  },\n  'writing more than the file size': {\n    topic: function() {\n      remove(__dirname + \"/test-rolling-file-stream-write-more\");\n      remove(__dirname + \"/test-rolling-file-stream-write-more.1\");\n      var that = this\n      , stream = new RollingFileStream(\n        __dirname + \"/test-rolling-file-stream-write-more\", \n        45\n      );\n      async.each(\n        [0, 1, 2, 3, 4, 5, 6], \n        function(i, cb) {\n          stream.write(i +\".cheese\\n\", \"utf8\", cb);\n        }, \n        function() {\n          stream.end();\n          that.callback();\n        }\n      );\n    },\n    'the number of files': {\n      topic: function() {\n        fs.readdir(__dirname, this.callback);\n      },\n      'should be two': function(files) {\n        assert.equal(files.filter(\n          function(file) { \n            return file.indexOf('test-rolling-file-stream-write-more') > -1; \n          }\n        ).length, 2);\n      }\n    },\n    'the first file': {\n      topic: function() {\n        fs.readFile(__dirname + \"/test-rolling-file-stream-write-more\", \"utf8\", this.callback);\n      },\n      'should contain the last two log messages': function(contents) {\n        assert.equal(contents, '5.cheese\\n6.cheese\\n');\n      }\n    },\n    'the second file': {\n      topic: function() {\n        fs.readFile(__dirname + '/test-rolling-file-stream-write-more.1', \"utf8\", this.callback);\n      },\n      'should contain the first five log messages': function(contents) {\n        assert.equal(contents, '0.cheese\\n1.cheese\\n2.cheese\\n3.cheese\\n4.cheese\\n');\n      }\n    }\n  },\n  'when many files already exist': {\n    topic: function() {\n      remove(__dirname + '/test-rolling-stream-with-existing-files.11');\n      remove(__dirname + '/test-rolling-stream-with-existing-files.20');\n      remove(__dirname + '/test-rolling-stream-with-existing-files.-1');\n      remove(__dirname + '/test-rolling-stream-with-existing-files.1.1');\n      remove(__dirname + '/test-rolling-stream-with-existing-files.1');\n      \n\n      create(__dirname + '/test-rolling-stream-with-existing-files.11');\n      create(__dirname + '/test-rolling-stream-with-existing-files.20');\n      create(__dirname + '/test-rolling-stream-with-existing-files.-1');\n      create(__dirname + '/test-rolling-stream-with-existing-files.1.1');\n      create(__dirname + '/test-rolling-stream-with-existing-files.1');\n\n      var that = this\n      , stream = new RollingFileStream(\n        __dirname + \"/test-rolling-stream-with-existing-files\", \n        45,\n        5\n      );\n      async.each(\n        [0, 1, 2, 3, 4, 5, 6], \n        function(i, cb) {\n          stream.write(i +\".cheese\\n\", \"utf8\", cb);\n        }, \n        function() {\n          stream.end();\n          that.callback();\n        }\n      );\n    },\n    'the files': {\n      topic: function() {\n        fs.readdir(__dirname, this.callback);\n      },\n      'should be rolled': function(files) {\n        assert.include(files, 'test-rolling-stream-with-existing-files');\n        assert.include(files, 'test-rolling-stream-with-existing-files.1');\n        assert.include(files, 'test-rolling-stream-with-existing-files.2');\n        assert.include(files, 'test-rolling-stream-with-existing-files.11');\n        assert.include(files, 'test-rolling-stream-with-existing-files.20');\n      }\n    }\n  }  \n}).exportTo(module);\n"]}