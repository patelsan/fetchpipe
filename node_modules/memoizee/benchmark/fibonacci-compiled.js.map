{"version":3,"sources":["fibonacci.js"],"names":[],"mappings":"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","file":"fibonacci-compiled.js","sourcesContent":["'use strict';\n\n// Simple benchmark for very simple memoization case (fibonacci series)\n// To run it, do following in memoizee package path:\n//\n// $ npm install underscore lodash lru-cache secondary-cache\n// $ node benchmark/fibonacci.js\n\nvar forEach      = require('es5-ext/object/for-each')\n  , pad          = require('es5-ext/string/#/pad')\n  , memoizee     = require('..')\n  , underscore   = require('underscore').memoize\n  , lodash       = require('lodash').memoize\n  , lruCache     = require('lru-cache')\n  , lruSecondary = require('secondary-cache/lib/lru-cache')\n\n  , now = Date.now\n\n  , time, getFib, lru, memo, total, index = 3000, count = 10, i, lruMax = 1000\n  , data = {}, lruObj;\n\ngetFib = function (memoize, opts) {\n\tvar fib = memoize(function (x) {\n\t\treturn (x < 2) ? 1 : fib(x - 1) + fib(x - 2);\n\t}, opts);\n\treturn fib;\n};\n\nlru = function (x) {\n\tvar value = lruObj.get(x);\n\tif (value === undefined) {\n\t\tvalue = ((x < 2) ? 1 : lru(x - 1) + lru(x - 2));\n\t\tlruObj.set(x, value);\n\t}\n\treturn value;\n};\n\nconsole.log(\"Fibonacci\", index, \"x\" + count + \":\\n\");\n\ntotal = 0;\ni = count;\nwhile (i--) {\n\tmemo = getFib(memoizee);\n\ttime = now();\n\tmemo(index);\n\ttotal += now() - time;\n}\ndata[\"Memoizee (object mode)\"] = total;\n\ntotal = 0;\ni = count;\nwhile (i--) {\n\tmemo = getFib(memoizee, { primitive: true });\n\ttime = now();\n\tmemo(index);\n\ttotal += now() - time;\n}\ndata[\"Memoizee (primitive mode)\"] = total;\n\ntotal = 0;\ni = count;\nwhile (i--) {\n\tmemo = getFib(underscore);\n\ttime = now();\n\tmemo(index);\n\ttotal += now() - time;\n}\ndata[\"Underscore\"] = total;\n\ntotal = 0;\ni = count;\nwhile (i--) {\n\tmemo = getFib(lodash);\n\ttime = now();\n\tmemo(index);\n\ttotal += now() - time;\n}\ndata[\"Lo-dash\"] = total;\n\ntotal = 0;\ni = count;\nwhile (i--) {\n\tmemo = getFib(memoizee, { primitive: true, max: lruMax });\n\ttime = now();\n\tmemo(index);\n\ttotal += now() - time;\n}\ndata[\"Memoizee (primitive mode) LRU (max: 1000)\"] = total;\n\ntotal = 0;\ni = count;\nwhile (i--) {\n\tmemo = getFib(memoizee, { max: lruMax });\n\ttime = now();\n\tmemo(index);\n\ttotal += now() - time;\n}\ndata[\"Memoizee (object mode)    LRU (max: 1000)\"] = total;\n\ntotal = 0;\ni = count;\nwhile (i--) {\n\tlruObj = lruCache({ max: lruMax });\n\ttime = now();\n\tlru(index);\n\ttotal += now() - time;\n}\ndata[\"lru-cache                 LRU (max: 1000)\"] = total;\n\ntotal = 0;\ni = count;\nwhile (i--) {\n\tlruObj = lruSecondary(lruMax);\n\ttime = now();\n\tlru(index);\n\ttotal += now() - time;\n}\ndata[\"secondary-cache           LRU (max: 1000)\"] = total;\n\nforEach(data, function (value, name, obj, index) {\n\tconsole.log(index + 1 + \":\",  pad.call(value, \" \", 5) + \"ms \", name);\n}, null, function (a, b) {\n\treturn this[a] - this[b];\n});\n"]}