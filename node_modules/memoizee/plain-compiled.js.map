{"version":3,"sources":["plain.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,QAAQ,GAAQ,OAAO,CAAC,+BAA+B,CAAC;IACxD,OAAO,GAAS,OAAO,CAAC,yBAAyB,CAAC;IAClD,UAAU,GAAM,OAAO,CAAC,6BAA6B,CAAC;IACtD,SAAS,GAAO,OAAO,CAAC,qBAAqB,CAAC;IAC9C,aAAa,GAAG,OAAO,CAAC,sBAAsB,CAAC;IAE/C,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC;;AAErD,MAAM,CAAC,OAAO,GAAG,SAAS,IAAI,CAAC,EAAE,iBAAgB;AAChD,KAAI,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC;;AAE1B,SAAQ,CAAC,EAAE,CAAC,CAAC;AACb,QAAO,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;;;AAG/B,KAAI,cAAc,CAAC,IAAI,CAAC,EAAE,EAAE,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC;;;AAGzE,OAAM,GAAG,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC;;;AAGrF,KAAI,GAAG,SAAS,CAAC,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;;;AAGtC,QAAO,CAAC,UAAU,EAAE,UAAU,EAAE,EAAE,IAAI,EAAE;AACvC,MAAI,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;EACpD,CAAC,CAAC;;AAEH,KAAI,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;;AAE/C,KAAI,CAAC,SAAS,EAAE,CAAC;AACjB,QAAO,IAAI,CAAC,QAAQ,CAAC;CACrB,CAAC","file":"plain-compiled.js","sourcesContent":["'use strict';\n\nvar callable      = require('es5-ext/object/valid-callable')\n  , forEach       = require('es5-ext/object/for-each')\n  , extensions    = require('./lib/registered-extensions')\n  , configure     = require('./lib/configure-map')\n  , resolveLength = require('./lib/resolve-length')\n\n  , hasOwnProperty = Object.prototype.hasOwnProperty;\n\nmodule.exports = function self(fn/*, options */) {\n\tvar options, length, conf;\n\n\tcallable(fn);\n\toptions = Object(arguments[1]);\n\n\t// Do not memoize already memoized function\n\tif (hasOwnProperty.call(fn, '__memoized__') && !options.force) return fn;\n\n\t// Resolve length;\n\tlength = resolveLength(options.length, fn.length, options.async && extensions.async);\n\n\t// Configure cache map\n\tconf = configure(fn, length, options);\n\n\t// Bind eventual extensions\n\tforEach(extensions, function (fn, name) {\n\t\tif (options[name]) fn(options[name], conf, options);\n\t});\n\n\tif (self.__profiler__) self.__profiler__(conf);\n\n\tconf.updateEnv();\n\treturn conf.memoized;\n};\n"]}