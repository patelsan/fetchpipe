{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * micromatch <https://github.com/jonschlinkert/micromatch>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar diff = require('arr-diff');\nvar typeOf = require('kind-of');\nvar omit = require('object.omit');\nvar unique = require('array-unique');\nvar cache = require('regex-cache');\nvar isGlob = require('is-glob');\nvar expand = require('./lib/expand');\nvar utils = require('./lib/utils');\n\n/**\n * The main function. Pass an array of filepaths,\n * and a string or array of glob patterns\n *\n * @param  {Array|String} `files`\n * @param  {Array|String} `patterns`\n * @param  {Object} `opts`\n * @return {Array} Array of matches\n */\n\nfunction micromatch(files, patterns, opts) {\n  if (!files || !patterns) return [];\n  opts = opts || {};\n\n  if (typeof opts.cache === 'undefined') {\n    opts.cache = true;\n  }\n\n  if (!Array.isArray(patterns)) {\n    return match(files, patterns, opts);\n  }\n\n  var len = patterns.length, i = 0;\n  var omit = [], keep = [];\n\n  while (len--) {\n    var glob = patterns[i++];\n    if (glob.charCodeAt(0) === 33 /* ! */) {\n      omit.push.apply(omit, match(files, glob.slice(1), opts));\n    } else {\n      keep.push.apply(keep, match(files, glob, opts));\n    }\n  }\n  return diff(keep, omit);\n}\n\n/**\n * Pass an array of files and a glob pattern as a string.\n *\n * This function is called by the main `micromatch` function\n * If you only need to pass a single pattern you might get\n * very minor speed improvements using this function.\n *\n * @param  {Array} `files`\n * @param  {Array} `pattern`\n * @param  {Object} `options`\n * @return {Array}\n */\n\nfunction match(files, pattern, opts) {\n  if (typeOf(files) !== 'string' && !Array.isArray(files)) {\n    throw new Error(msg('match', 'files', 'a string or array'));\n  }\n\n  files = utils.arrayify(files);\n  opts = opts || {};\n\n  var negate = opts.negate || false;\n  var orig = pattern;\n\n  if (typeof pattern === 'string' && opts.nonegate !== true) {\n    negate = pattern.charAt(0) === '!';\n    if (negate) {\n      pattern = pattern.slice(1);\n    }\n  }\n\n  var _isMatch = matcher(pattern, opts);\n  var len = files.length, i = 0;\n  var res = [];\n\n  while (i < len) {\n    var file = files[i++];\n    var fp = utils.unixify(file, opts);\n\n    if (!_isMatch(fp)) { continue; }\n    res.push(fp);\n  }\n\n  if (res.length === 0) {\n    if (opts.failglob === true) {\n      throw new Error('micromatch.match() found no matches for: \"' + orig + '\".');\n    }\n\n    if (opts.nonull || opts.nullglob) {\n      res.push(utils.unescapeGlob(orig));\n    }\n  }\n\n  // if `negate` was defined, diff negated files\n  if (negate) { res = diff(files, res); }\n\n  // if `ignore` was defined, diff ignored filed\n  if (opts.ignore && opts.ignore.length) {\n    pattern = opts.ignore;\n    opts = omit(opts, ['ignore']);\n    res = diff(res, micromatch(res, pattern, opts));\n  }\n\n  if (opts.nodupes) {\n    return unique(res);\n  }\n  return res;\n}\n\n/**\n * Returns a function that takes a glob pattern or array of glob patterns\n * to be used with `Array#filter()`. (Internally this function generates\n * the matching function using the [matcher] method).\n *\n * ```js\n * var fn = mm.filter('[a-c]');\n * ['a', 'b', 'c', 'd', 'e'].filter(fn);\n * //=> ['a', 'b', 'c']\n * ```\n *\n * @param  {String|Array} `patterns` Can be a glob or array of globs.\n * @param  {Options} `opts` Options to pass to the [matcher] method.\n * @return {Function} Filter function to be passed to `Array#filter()`.\n */\n\nfunction filter(patterns, opts) {\n  if (!Array.isArray(patterns) && typeof patterns !== 'string') {\n    throw new TypeError(msg('filter', 'patterns', 'a string or array'));\n  }\n\n  patterns = utils.arrayify(patterns);\n  return function (fp) {\n    if (fp == null) return [];\n    var len = patterns.length, i = 0;\n    var res = true;\n\n    fp = utils.unixify(fp, opts);\n    while (i < len) {\n      var fn = matcher(patterns[i++], opts);\n      if (!fn(fp)) {\n        res = false;\n        break;\n      }\n    }\n    return res;\n  };\n}\n\n/**\n * Returns true if the filepath contains the given\n * pattern. Can also return a function for matching.\n *\n * ```js\n * isMatch('foo.md', '*.md', {});\n * //=> true\n *\n * isMatch('*.md', {})('foo.md')\n * //=> true\n * ```\n *\n * @param  {String} `fp`\n * @param  {String} `pattern`\n * @param  {Object} `opts`\n * @return {Boolean}\n */\n\nfunction isMatch(fp, pattern, opts) {\n  if (typeof fp !== 'string') {\n    throw new TypeError(msg('isMatch', 'filepath', 'a string'));\n  }\n\n  fp = utils.unixify(fp, opts);\n  if (typeOf(pattern) === 'object') {\n    return matcher(fp, pattern);\n  }\n  return matcher(pattern, opts)(fp);\n}\n\n/**\n * Returns true if the filepath matches the\n * given pattern.\n */\n\nfunction contains(fp, pattern, opts) {\n  if (typeof fp !== 'string') {\n    throw new TypeError(msg('contains', 'pattern', 'a string'));\n  }\n\n  opts = opts || {};\n  opts.contains = (pattern !== '');\n  fp = utils.unixify(fp, opts);\n\n  if (opts.contains && !isGlob(pattern)) {\n    return fp.indexOf(pattern) !== -1;\n  }\n  return matcher(pattern, opts)(fp);\n}\n\n/**\n * Returns true if a file path matches any of the\n * given patterns.\n *\n * @param  {String} `fp` The filepath to test.\n * @param  {String|Array} `patterns` Glob patterns to use.\n * @param  {Object} `opts` Options to pass to the `matcher()` function.\n * @return {String}\n */\n\nfunction any(fp, patterns, opts) {\n  if (!Array.isArray(patterns) && typeof patterns !== 'string') {\n    throw new TypeError(msg('any', 'patterns', 'a string or array'));\n  }\n\n  patterns = utils.arrayify(patterns);\n  var len = patterns.length;\n\n  fp = utils.unixify(fp, opts);\n  while (len--) {\n    var isMatch = matcher(patterns[len], opts);\n    if (isMatch(fp)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Filter the keys of an object with the given `glob` pattern\n * and `options`\n *\n * @param  {Object} `object`\n * @param  {Pattern} `object`\n * @return {Array}\n */\n\nfunction matchKeys(obj, glob, options) {\n  if (typeOf(obj) !== 'object') {\n    throw new TypeError(msg('matchKeys', 'first argument', 'an object'));\n  }\n\n  var fn = matcher(glob, options);\n  var res = {};\n\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key) && fn(key)) {\n      res[key] = obj[key];\n    }\n  }\n  return res;\n}\n\n/**\n * Return a function for matching based on the\n * given `pattern` and `options`.\n *\n * @param  {String} `pattern`\n * @param  {Object} `options`\n * @return {Function}\n */\n\nfunction matcher(pattern, opts) {\n  // pattern is a function\n  if (typeof pattern === 'function') {\n    return pattern;\n  }\n  // pattern is a regex\n  if (pattern instanceof RegExp) {\n    return function(fp) {\n      return pattern.test(fp);\n    };\n  }\n\n  // strings, all the way down...\n  pattern = utils.unixify(pattern, opts);\n\n  // pattern is a non-glob string\n  if (!isGlob(pattern)) {\n    return utils.matchPath(pattern, opts);\n  }\n  // pattern is a glob string\n  var re = makeRe(pattern, opts);\n\n  // `matchBase` is defined\n  if (opts && opts.matchBase) {\n    return utils.hasFilename(re, opts);\n  }\n  // `matchBase` is not defined\n  return function(fp) {\n    fp = utils.unixify(fp, opts);\n    return re.test(fp);\n  };\n}\n\n/**\n * Create and cache a regular expression for matching\n * file paths.\n *\n * If the leading character in the `glob` is `!`, a negation\n * regex is returned.\n *\n * @param  {String} `glob`\n * @param  {Object} `options`\n * @return {RegExp}\n */\n\nfunction toRegex(glob, options) {\n  if (typeOf(glob) !== 'string') {\n    throw new Error(msg('toRegex', 'glob', 'a string'));\n  }\n\n  // clone options to prevent  mutating the original object\n  var opts = Object.create(options || {});\n  var flags = opts.flags || '';\n  if (opts.nocase && flags.indexOf('i') === -1) {\n    flags += 'i';\n  }\n\n  var parsed = expand(glob, opts);\n\n  // pass in tokens to avoid parsing more than once\n  opts.negated = opts.negated || parsed.negated;\n  opts.negate = opts.negated;\n  glob = wrapGlob(parsed.pattern, opts);\n  var re;\n\n  try {\n    re = new RegExp(glob, flags);\n    return re;\n  } catch (err) {\n    var msg = 'micromatch invalid regex: (' + re + ')';\n    if (opts.strict) throw new SyntaxError(msg + err);\n  }\n  return /$^/;\n}\n\n/**\n * Create the regex to do the matching. If the leading\n * character in the `glob` is `!` a negation regex is returned.\n *\n * @param {String} `glob`\n * @param {Boolean} `negate`\n */\n\nfunction wrapGlob(glob, opts) {\n  var prefix = (opts && !opts.contains) ? '^' : '';\n  var after = (opts && !opts.contains) ? '$' : '';\n  glob = ('(?:' + glob + ')' + after);\n  if (opts && opts.negate) {\n    return prefix + ('(?!^' + glob + ').*$');\n  }\n  return prefix + glob;\n}\n\n/**\n * Wrap `toRegex` to memoize the generated regex\n * the string and options don't change\n */\n\nfunction makeRe(glob, opts) {\n  return cache(toRegex, glob, opts);\n}\n\n/**\n * Make error messages consistent. Follows this format:\n *\n * ```js\n * msg(methodName, argNumber, nativeType);\n * // example:\n * msg('matchKeys', 'first', 'an object');\n * ```\n *\n * @param  {String} `method`\n * @param  {String} `num`\n * @param  {String} `type`\n * @return {String}\n */\n\nfunction msg(method, what, type) {\n  return 'micromatch.' + method + '(): ' + what + ' should be ' + type + '.';\n}\n\n/**\n * Public methods\n */\n\nmicromatch.any       = any;\nmicromatch.braces    = micromatch.braceExpand = require('braces');\nmicromatch.contains  = contains;\nmicromatch.expand    = expand;\nmicromatch.filter    = filter;\nmicromatch.isMatch   = isMatch;\nmicromatch.makeRe    = makeRe;\nmicromatch.match     = match;\nmicromatch.matcher   = matcher;\nmicromatch.matchKeys = matchKeys;\n\n/**\n * Expose `micromatch`\n */\n\nmodule.exports = micromatch;\n"]}