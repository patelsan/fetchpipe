{"version":3,"sources":["expand.js"],"names":[],"mappings":"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","file":"expand-compiled.js","sourcesContent":["/*!\n * micromatch <https://github.com/jonschlinkert/micromatch>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar utils = require('./utils');\nvar Glob = require('./glob');\n\n/**\n * Expose `expand`\n */\n\nmodule.exports = expand;\n\n/**\n * Expand a glob pattern to resolve braces and\n * similar patterns before converting to regex.\n *\n * @param  {String|Array} `pattern`\n * @param  {Array} `files`\n * @param  {Options} `opts`\n * @return {Array}\n */\n\nfunction expand(pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('micromatch.expand(): argument should be a string.');\n  }\n\n  var glob = new Glob(pattern, options || {});\n  var opts = glob.options;\n\n  if (typeof opts.braces !== 'boolean' && typeof opts.nobraces !== 'boolean') {\n    opts.braces = true;\n  }\n\n  // return early if glob pattern matches special patterns\n  if (specialCase(pattern) && opts.safemode) {\n    return new RegExp(utils.escapeRe(pattern), 'g');\n  }\n\n  if (glob.pattern === '.*') {\n    return {\n      pattern: '\\\\.' + star,\n      tokens: tok,\n      options: opts\n    };\n  }\n\n  if (glob.pattern === '.') {\n    return {\n      pattern: '\\\\.',\n      tokens: tok,\n      options: opts\n    };\n  }\n\n  if (glob.pattern === '*') {\n    return {\n      pattern: oneStar(opts.dot),\n      tokens: tok,\n      options: opts\n    };\n  }\n\n  // parse the glob pattern into tokens\n  glob.parse();\n  var tok = glob.tokens;\n  tok.is.negated = opts.negated;\n\n  // dotfile handling\n  if ((opts.dotfiles === true || tok.is.dotfile) && opts.dot !== false) {\n    opts.dotfiles = true;\n    opts.dot = true;\n  }\n\n  if ((opts.dotdirs === true || tok.is.dotdir) && opts.dot !== false) {\n    opts.dotdirs = true;\n    opts.dot = true;\n  }\n\n  // check for braces with a dotfile pattern\n  if (/[{,]\\./.test(glob.pattern)) {\n    opts.makeRe = false;\n    opts.dot = true;\n  }\n\n  if (opts.nonegate !== true) {\n    opts.negated = glob.negated;\n  }\n\n  // if the leading character is a dot or a slash, escape it\n  if (glob.pattern.charAt(0) === '.' && glob.pattern.charAt(1) !== '/') {\n    glob.pattern = '\\\\' + glob.pattern;\n  }\n\n  /**\n   * Extended globs\n   */\n\n  // expand brackets, e.g `[[:alpha:]]`\n  glob.track('before brackets');\n  if (tok.is.brackets) {\n    glob.brackets();\n  }\n  glob.track('after brackets');\n\n  // expand braces, e.g `{1..5}`\n  glob.track('before braces');\n  if (tok.is.braces) {\n    glob.braces();\n  }\n  glob.track('after braces');\n\n  // expand extglobs, e.g `foo/!(a|b)`\n  glob.track('before extglob');\n  if (tok.is.extglob) {\n    glob.extglob();\n  }\n  glob.track('after extglob');\n\n  // special patterns\n  glob._replace('[!', '[^');\n  glob._replace('(?', '(%~');\n  glob._replace('[]', '\\\\[\\\\]');\n  glob._replace('/[', '/' + (opts.dot ? dotfiles : nodot) + '[', true);\n  glob._replace('/?', '/' + (opts.dot ? dotfiles : nodot) + '[^/]', true);\n  glob._replace('/.', '/(?=.)\\\\.', true);\n\n  // windows drives\n  glob._replace(/^(\\w):([\\\\\\/]+?)/gi, '(?=.)$1:$2', true);\n\n  // negate slashes in exclusion ranges\n  if (glob.pattern.indexOf('[^') !== -1) {\n    glob.pattern = negateSlash(glob.pattern);\n  }\n\n  if (opts.globstar !== false && glob.pattern === '**') {\n     glob.pattern = globstar(opts.dot);\n\n  } else {\n    // '/*/*/*' => '(?:/*){3}'\n    glob._replace(/(\\/\\*)+/g, function (match) {\n      var len = match.length / 2;\n      if (len === 1) { return match; }\n      return '(?:\\\\/*){' + len + '}';\n    });\n\n    glob.pattern = balance(glob.pattern, '[', ']');\n    glob.escape(glob.pattern);\n\n    // if the pattern has `**`\n    if (tok.is.globstar) {\n      glob.pattern = collapse(glob.pattern, '/**');\n      glob.pattern = collapse(glob.pattern, '**/');\n      glob._replace(/\\*{2,}/g, '**');\n\n      // 'foo/*'\n      glob._replace(/(\\w+)\\*(?!\\/)/g, '$1[^/]*?', true);\n      glob._replace(/\\*\\*\\/\\*(\\w)/g, globstar(opts.dot) + '\\\\/' + (opts.dot ? dotfiles : nodot) + '[^/]*?$1', true);\n\n      if (opts.dot !== true) {\n        glob._replace(/\\*\\*\\/(.)/g, '(?:**\\\\/|)$1');\n      }\n\n      // 'foo/**' or '{**,*}', but not 'foo**'\n      if (tok.path.dirname !== '' || /,\\*\\*|\\*\\*,/.test(glob.orig)) {\n        glob._replace('**', globstar(opts.dot), true);\n      }\n    }\n\n    // ends with /*\n    glob._replace(/\\/\\*$/, '\\\\/' + oneStar(opts.dot), true);\n    // ends with *, no slashes\n    glob._replace(/(?!\\/)\\*$/, star, true);\n    // has 'n*.' (partial wildcard w/ file extension)\n    glob._replace(/([^\\/]+)\\*/, '$1' + oneStar(true), true);\n    // has '*'\n    glob._replace('*', oneStar(opts.dot), true);\n    glob._replace('?.', '?\\\\.', true);\n    glob._replace('?:', '?:', true);\n\n    glob._replace(/\\?+/g, function (match) {\n      var len = match.length;\n      if (len === 1) {\n        return qmark;\n      }\n      return qmark + '{' + len + '}';\n    });\n\n    // escape '.abc' => '\\\\.abc'\n    glob._replace(/\\.([*\\w]+)/g, '\\\\.$1');\n    // fix '[^\\\\\\\\/]'\n    glob._replace(/\\[\\^[\\\\\\/]+\\]/g, qmark);\n    // '///' => '\\/'\n    glob._replace(/\\/+/g, '\\\\/');\n    // '\\\\\\\\\\\\' => '\\\\'\n    glob._replace(/\\\\{2,}/g, '\\\\');\n  }\n\n  // unescape previously escaped patterns\n  glob.unescape(glob.pattern);\n  glob._replace('__UNESC_STAR__', '*');\n\n  // escape dots that follow qmarks\n  glob._replace('?.', '?\\\\.');\n\n  // remove unnecessary slashes in character classes\n  glob._replace('[^\\\\/]', qmark);\n\n  if (glob.pattern.length > 1) {\n    if (glob.pattern.indexOf('\\\\/') === 0 && glob.pattern.indexOf('\\\\/' + nodot) !== 0) {\n      glob.pattern = '\\\\/' + nodot + glob.pattern.slice(2);\n    } else if (/^[\\[?*]/.test(glob.pattern)) {\n      // only prepend the string if we don't want to match dotfiles\n      glob.pattern = (opts.dot ? dotfiles : nodot) + glob.pattern;\n    }\n  }\n\n  return glob;\n}\n\n/**\n * Special cases. This is somewhat of a placeholder\n * for more advanced logic.\n */\n\nfunction specialCase(glob) {\n  if (glob === '\\\\') {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Collapse repeated character sequences.\n *\n * ```js\n * collapse('a/../../../b', '../');\n * //=> 'a/../b'\n * ```\n *\n * @param  {String} `str`\n * @param  {String} `ch` Character sequence to collapse\n * @return {String}\n */\n\nfunction collapse(str, ch) {\n  var res = str.split(ch);\n  var isFirst = res[0] === '';\n  var isLast = res[res.length - 1] === '';\n  res = res.filter(Boolean);\n  if (isFirst) res.unshift('');\n  if (isLast) res.push('');\n  return res.join(ch);\n}\n\n/**\n * Negate slashes in exclusion ranges, per glob spec:\n *\n * ```js\n * negateSlash('[^foo]');\n * //=> '[^\\\\/foo]'\n * ```\n *\n * @param  {String} `str` glob pattern\n * @return {String}\n */\n\nfunction negateSlash(str) {\n  return str.replace(/\\[\\^([^\\]]*?)\\]/g, function (match, inner) {\n    if (inner.indexOf('/') === -1) {\n      inner = '\\\\/' + inner;\n    }\n    return '[^' + inner + ']';\n  });\n}\n\n/**\n * Escape imbalanced braces/bracket. This is a very\n * basic, naive implementation that only does enough\n * to serve the purpose.\n */\n\nfunction balance(str, a, b) {\n  var aarr = str.split(a);\n  var alen = aarr.join('').length;\n  var blen = str.split(b).join('').length;\n\n  if (alen !== blen) {\n    str = aarr.join('\\\\' + a);\n    return str.split(b).join('\\\\' + b);\n  }\n  return str;\n}\n\n/**\n * Special patterns to be converted to regex.\n * Heuristics are used to simplify patterns\n * and speed up processing.\n */\n\nvar qmark       = '[^/]';\nvar star        = qmark + '*?';\nvar nodot       = '(?!\\\\.)(?=.)';\nvar dotfileGlob = '(?:\\\\/|^)\\\\.{1,2}($|\\\\/)';\nvar dotfiles    = '(?!' + dotfileGlob + ')(?=.)';\nvar twoStarDot  = '(?:(?!' + dotfileGlob + ').)*?';\n\n/**\n * Create a regex for `*`.\n *\n * If `dot` is true, or the pattern does not begin with\n * a leading star, then return the simpler regex.\n */\n\nfunction oneStar(dotfile) {\n  return dotfile ? '(?!' + dotfileGlob + ')(?=.)' + star : (nodot + star);\n}\n\nfunction globstar(dotfile) {\n  if (dotfile) { return twoStarDot; }\n  return '(?:(?!(?:\\\\/|^)\\\\.).)*?';\n}\n"]}