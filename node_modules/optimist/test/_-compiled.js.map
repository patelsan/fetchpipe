{"version":3,"sources":["_.js"],"names":[],"mappings":"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","file":"_-compiled.js","sourcesContent":["var spawn = require('child_process').spawn;\nvar test = require('tap').test;\n\ntest('dotSlashEmpty', testCmd('./bin.js', []));\n\ntest('dotSlashArgs', testCmd('./bin.js', [ 'a', 'b', 'c' ]));\n\ntest('nodeEmpty', testCmd('node bin.js', []));\n\ntest('nodeArgs', testCmd('node bin.js', [ 'x', 'y', 'z' ]));\n\ntest('whichNodeEmpty', function (t) {\n    var which = spawn('which', ['node']);\n    \n    which.stdout.on('data', function (buf) {\n        t.test(\n            testCmd(buf.toString().trim() + ' bin.js', [])\n        );\n        t.end();\n    });\n    \n    which.stderr.on('data', function (err) {\n        assert.error(err);\n        t.end();\n    });\n});\n\ntest('whichNodeArgs', function (t) {\n    var which = spawn('which', ['node']);\n\n    which.stdout.on('data', function (buf) {\n        t.test(\n            testCmd(buf.toString().trim() + ' bin.js', [ 'q', 'r' ])\n        );\n        t.end();\n    });\n    \n    which.stderr.on('data', function (err) {\n        t.error(err);\n        t.end();\n    });\n});\n\nfunction testCmd (cmd, args) {\n\n    return function (t) {\n        var to = setTimeout(function () {\n            assert.fail('Never got stdout data.')\n        }, 5000);\n        \n        var oldDir = process.cwd();\n        process.chdir(__dirname + '/_');\n        \n        var cmds = cmd.split(' ');\n        \n        var bin = spawn(cmds[0], cmds.slice(1).concat(args.map(String)));\n        process.chdir(oldDir);\n        \n        bin.stderr.on('data', function (err) {\n            t.error(err);\n            t.end();\n        });\n        \n        bin.stdout.on('data', function (buf) {\n            clearTimeout(to);\n            var _ = JSON.parse(buf.toString());\n            t.same(_.map(String), args.map(String));\n            t.end();\n        });\n    };\n}\n"]}