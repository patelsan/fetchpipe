{"version":3,"sources":["test.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACtC,IAAI,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAClC,IAAI,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;;AAEjC,QAAQ,CAAC,wBAAwB,EAAE,YAAU;AAC5C,GAAE,CAAC,iDAAiD,EAAE,YAAY;;;AAGjE,MAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AACtC,QAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;;;AAGlC,UAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,6BAA6B,CAAC,CAAC;AACtD,QAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;AACvC,QAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;;;AAGzC,UAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;AAC5C,QAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;EAC1C,CAAC,CAAC;;AAEH,GAAE,CAAC,gDAAgD,EAAE,YAAY;AAChE,QAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;AAC7C,QAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;AACzD,QAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC;EAC7E,CAAC,CAAC;CACH,CAAC,CAAC","file":"test-compiled.js","sourcesContent":["var assert = require('better-assert');\nvar expect = require('expect.js');\nvar util = require('./index.js');\n\ndescribe('querystring test suite', function(){\n\tit('should parse a querystring and return an object', function () {\n\t\t\n\t\t// Single assignment\n\t\tvar queryObj = util.decode(\"foo=bar\");\n\t\texpect(queryObj.foo).to.be(\"bar\");\n\t\t\n\t\t// Multiple assignments\n\t\tqueryObj = util.decode(\"france=paris&germany=berlin\");\n\t\texpect(queryObj.france).to.be(\"paris\");\n\t\texpect(queryObj.germany).to.be(\"berlin\");\n\t\t\n\t\t// Assignments containing non-alphanumeric characters\n\t\tqueryObj = util.decode(\"india=new%20delhi\");\n\t\texpect(queryObj.india).to.be(\"new delhi\");\n\t});\n\t\n\tit('should construct a query string from an object', function () {\n\t\texpect(util.encode({ a: 'b' })).to.be('a=b');\n\t\texpect(util.encode({ a: 'b', c: 'd' })).to.be('a=b&c=d');\n\t\texpect(util.encode({ a: 'b', c: 'tobi rocks' })).to.be('a=b&c=tobi%20rocks');\n\t});\n});\n"]}