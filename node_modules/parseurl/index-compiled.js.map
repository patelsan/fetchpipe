{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;;;;AAWA,IAAI,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;AACxB,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAA;AACrB,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,CAAA;;;;;;;AAOjB,IAAI,gBAAgB,GAAG,sCAAsC,CAAA;;;;;;AAM7D,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAA;AACzB,MAAM,CAAC,OAAO,CAAC,QAAQ,GAAG,WAAW,CAAA;;;;;;;;;;AAUrC,SAAS,QAAQ,CAAC,GAAG,EAAE;AACrB,MAAI,GAAG,GAAG,GAAG,CAAC,GAAG,CAAA;;AAEjB,MAAI,GAAG,KAAK,SAAS,EAAE;;AAErB,WAAO,SAAS,CAAA;GACjB;;AAED,MAAI,MAAM,GAAG,GAAG,CAAC,UAAU,CAAA;;AAE3B,MAAI,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,EAAE;;AAEtB,WAAO,MAAM,CAAA;GACd;;;AAGD,QAAM,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;AACvB,QAAM,CAAC,IAAI,GAAG,GAAG,CAAA;;AAEjB,SAAO,GAAG,CAAC,UAAU,GAAG,MAAM,CAAA;CAC/B,CAAC;;;;;;;;;;AAUF,SAAS,WAAW,CAAC,GAAG,EAAE;AACxB,MAAI,GAAG,GAAG,GAAG,CAAC,WAAW,CAAA;;AAEzB,MAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;;AAE3B,WAAO,QAAQ,CAAC,GAAG,CAAC,CAAA;GACrB;;AAED,MAAI,MAAM,GAAG,GAAG,CAAC,kBAAkB,CAAA;;AAEnC,MAAI,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,EAAE;;AAEtB,WAAO,MAAM,CAAA;GACd;;;AAGD,QAAM,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;AACvB,QAAM,CAAC,IAAI,GAAG,GAAG,CAAA;;AAEjB,SAAO,GAAG,CAAC,kBAAkB,GAAG,MAAM,CAAA;CACvC,CAAC;;;;;;;;;;AAUF,SAAS,SAAS,CAAC,GAAG,EAAE;;;AAGtB,MAAI,UAAU,GAAG,OAAO,GAAG,KAAK,QAAQ,IAAI,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;;;AAGtE,MAAI,UAAU,EAAE;AACd,QAAI,QAAQ,GAAG,UAAU,CAAC,CAAC,CAAC,CAAA;AAC5B,QAAI,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,CAAA;AAClC,QAAI,GAAG,GAAG,GAAG,KAAK,SAAS,GACvB,IAAI,GAAG,EAAE,GACT,EAAE,CAAA;AACN,OAAG,CAAC,IAAI,GAAG,GAAG,CAAA;AACd,OAAG,CAAC,IAAI,GAAG,GAAG,CAAA;AACd,OAAG,CAAC,QAAQ,GAAG,QAAQ,CAAA;AACvB,OAAG,CAAC,MAAM,GAAG,MAAM,CAAA;AACnB,OAAG,CAAC,KAAK,GAAG,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;;AAEtC,WAAO,GAAG,CAAA;GACX;;AAED,SAAO,KAAK,CAAC,GAAG,CAAC,CAAA;CAClB;;;;;;;;;;;AAWD,SAAS,KAAK,CAAC,GAAG,EAAE,SAAS,EAAE;AAC7B,SAAO,OAAO,SAAS,KAAK,QAAQ,IAC/B,SAAS,KAAK,IAAI,KACjB,GAAG,KAAK,SAAS,IAAI,SAAS,YAAY,GAAG,CAAA,AAAC,IAC/C,SAAS,CAAC,IAAI,KAAK,GAAG,CAAA;CAC5B","file":"index-compiled.js","sourcesContent":["/*!\n * parseurl\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar url = require('url')\nvar parse = url.parse\nvar Url = url.Url\n\n/**\n * Pattern for a simple path case.\n * See: https://github.com/joyent/node/pull/7878\n */\n\nvar simplePathRegExp = /^(\\/\\/?(?!\\/)[^\\?#\\s]*)(\\?[^#\\s]*)?$/\n\n/**\n * Exports.\n */\n\nmodule.exports = parseurl\nmodule.exports.original = originalurl\n\n/**\n * Parse the `req` url with memoization.\n *\n * @param {ServerRequest} req\n * @return {Object}\n * @api public\n */\n\nfunction parseurl(req) {\n  var url = req.url\n\n  if (url === undefined) {\n    // URL is undefined\n    return undefined\n  }\n\n  var parsed = req._parsedUrl\n\n  if (fresh(url, parsed)) {\n    // Return cached URL parse\n    return parsed\n  }\n\n  // Parse the URL\n  parsed = fastparse(url)\n  parsed._raw = url\n\n  return req._parsedUrl = parsed\n};\n\n/**\n * Parse the `req` original url with fallback and memoization.\n *\n * @param {ServerRequest} req\n * @return {Object}\n * @api public\n */\n\nfunction originalurl(req) {\n  var url = req.originalUrl\n\n  if (typeof url !== 'string') {\n    // Fallback\n    return parseurl(req)\n  }\n\n  var parsed = req._parsedOriginalUrl\n\n  if (fresh(url, parsed)) {\n    // Return cached URL parse\n    return parsed\n  }\n\n  // Parse the URL\n  parsed = fastparse(url)\n  parsed._raw = url\n\n  return req._parsedOriginalUrl = parsed\n};\n\n/**\n * Parse the `str` url with fast-path short-cut.\n *\n * @param {string} str\n * @return {Object}\n * @api private\n */\n\nfunction fastparse(str) {\n  // Try fast path regexp\n  // See: https://github.com/joyent/node/pull/7878\n  var simplePath = typeof str === 'string' && simplePathRegExp.exec(str)\n\n  // Construct simple URL\n  if (simplePath) {\n    var pathname = simplePath[1]\n    var search = simplePath[2] || null\n    var url = Url !== undefined\n      ? new Url()\n      : {}\n    url.path = str\n    url.href = str\n    url.pathname = pathname\n    url.search = search\n    url.query = search && search.substr(1)\n\n    return url\n  }\n\n  return parse(str)\n}\n\n/**\n * Determine if parsed is still fresh for url.\n *\n * @param {string} url\n * @param {object} parsedUrl\n * @return {boolean}\n * @api private\n */\n\nfunction fresh(url, parsedUrl) {\n  return typeof parsedUrl === 'object'\n    && parsedUrl !== null\n    && (Url === undefined || parsedUrl instanceof Url)\n    && parsedUrl._raw === url\n}\n"]}