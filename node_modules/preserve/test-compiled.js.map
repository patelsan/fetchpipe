{"version":3,"sources":["test.js"],"names":[],"mappings":";;;;;;;AAOA,YAAY,CAAC;;AAEb,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;;AAE3B,IAAI,EAAE,GAAG,gBAAgB,CAAC;AAC1B,IAAI,MAAM,GAAG,SAAT,MAAM,CAAY,GAAG,EAAE;AACzB,SAAO,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;AACtC,eAAW,EAAE,GAAG;AAChB,eAAW,EAAE,CAAC;GACf,CAAC,CAAC;CACJ,CAAC;;AAEF,QAAQ,CAAC,iBAAiB,EAAE,YAAY;AACtC,MAAI,MAAM,GAAG,oCAAoC,CAAC;AAClD,MAAI,EAAE,GAAG,gBAAgB,CAAC;;AAE1B,IAAE,CAAC,sEAAsE,EAAE,YAAY;AACrF,QAAI,IAAI,GAAG,MAAM,CAAC,+BAA+B,CAAC,CAAC;AACnD,QAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;GACpE,CAAC,CAAC;;AAEH,IAAE,CAAC,4CAA4C,EAAE,YAAY;AAC3D,QAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,+BAA+B,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AACpF,QAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;GAC1D,CAAC,CAAC;;AAEH,UAAQ,CAAC,WAAW,EAAE,YAAY;AAChC,MAAE,CAAC,iDAAiD,EAAE,YAAY;AAChE,YAAM,CAAC,MAAM,CAAC,8BAA8B,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KACxE,CAAC,CAAC;GACJ,CAAC,CAAC;;AAEH,UAAQ,CAAC,gBAAgB,EAAE,YAAY;AACrC,MAAE,CAAC,yDAAyD,EAAE,YAAY;AACxE,UAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,8BAA8B,EAAE,EAAE,CAAC,CAAC;AAC/D,YAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AAC5B,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;KACnE,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ,CAAC,CAAC","file":"test-compiled.js","sourcesContent":["/*!\n * preserve <https://github.com/jonschlinkert/preserve>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License\n */\n\n'use strict';\n\nvar should = require('should');\nvar tokens = require('./');\n\nvar re = /<%=\\s*[^>]+%>/g;\nvar pretty = function(str) {\n  return require('js-beautify').html(str, {\n    indent_char: ' ',\n    indent_size: 2,\n  });\n};\n\ndescribe('preserve tokens', function () {\n  var testRe = /__ID.{5}__\\n__ID.{5}__\\n__ID.{5}__/;\n  var re = /<%=\\s*[^>]+%>/g;\n\n  it('should (e.g. shouldn\\'t, but will) mangle tokens in the given string', function () {\n    var html = pretty('<ul><li><%= name %></li></ul>');\n    html.should.equal('<ul>\\n  <li>\\n    <%=n ame %>\\n  </li>\\n</ul>');\n  });\n\n  it('should preserve tokens in the given string', function () {\n    var html = tokens.after(pretty(tokens.before('<ul><li><%= name %></li></ul>', re)));\n    html.should.equal('<ul>\\n  <li><%= name %></li>\\n</ul>');\n  });\n\n  describe('.before()', function () {\n    it('should replace matches with placeholder tokens:', function () {\n      tokens.before('<%= a %>\\n<%= b %>\\n<%= c %>', re).should.match(testRe);\n    });\n  });\n\n  describe('tokens.after()', function () {\n    it('should replace placeholder tokens with original values:', function () {\n      var before = tokens.before('<%= a %>\\n<%= b %>\\n<%= c %>', re);\n      before.should.match(testRe);\n      tokens.after(before).should.equal('<%= a %>\\n<%= b %>\\n<%= c %>');\n    });\n  });\n});\n"]}