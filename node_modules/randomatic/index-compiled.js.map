{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;AAUA,YAAY,CAAC;;AAEb,IAAI,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACpC,IAAI,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;;;;;;AAMhC,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC;;;;;;AAM5B,IAAI,IAAI,GAAG;AACT,OAAK,EAAE,4BAA4B;AACnC,OAAK,EAAE,4BAA4B;AACnC,QAAM,EAAE,YAAY;AACpB,SAAO,EAAE,yBAAyB;CACnC,CAAC;;AAEF,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;;;;;;;;;;;;;AAajD,SAAS,UAAU,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE;AAC5C,MAAI,OAAO,OAAO,KAAK,WAAW,EAAE;AAClC,UAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;GAC3D;;AAED,MAAI,MAAM,GAAG,KAAK,CAAC;AACnB,MAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;AAC1B,QAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;AAC/B,YAAM,GAAG,OAAO,CAAC,MAAM,CAAC;KAEzB,MAAM,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;AAC5B,aAAO,GAAG,EAAE,CAAC,AAAC,MAAM,GAAG,OAAO,CAAC,AAAC,OAAO,GAAG,GAAG,CAAC;KAC/C;GACF;;AAED,MAAG,MAAM,CAAC,MAAM,CAAC,KAAK,QAAQ,IAAI,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;AAChE,WAAO,GAAG,MAAM,CAAC;AACjB,WAAO,GAAG,OAAO,CAAC,KAAK,CAAC;AACxB,UAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AACxB,UAAM,GAAG,IAAI,CAAC;GACf;;AAED,MAAI,IAAI,GAAG,OAAO,IAAI,EAAE,CAAC;AACzB,MAAI,IAAI,GAAG,EAAE,CAAC;AACd,MAAI,GAAG,GAAG,EAAE,CAAC;;;AAGb,MAAI,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC;AACpD,MAAI,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC;AACpD,MAAI,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC;AACpD,MAAI,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC;AACrD,MAAI,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC;AACtD,MAAI,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC;AAClD,MAAI,MAAM,EAAE,IAAI,IAAI,OAAO,CAAC;;AAE5B,SAAO,MAAM,EAAE,EAAE;AACf,OAAG,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;GAC3D;;AAED,SAAO,GAAG,CAAC;CACZ,CAAC","file":"index-compiled.js","sourcesContent":["/*!\n * randomatic <https://github.com/jonschlinkert/randomatic>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License (MIT)\n *\n * Many changes have been made, but this was originally\n * inspired by <http://stackoverflow.com/a/10727155/1267639>\n */\n\n'use strict';\n\nvar isNumber = require('is-number');\nvar typeOf = require('kind-of');\n\n/**\n * Expose `randomatic`\n */\n\nmodule.exports = randomatic;\n\n/**\n * Available mask characters\n */\n\nvar type = {\n  lower: 'abcdefghijklmnopqrstuvwxyz',\n  upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  number: '0123456789',\n  special: '~!@#$%^&()_+-={}[];\\',.'\n};\n\ntype.all = type.lower + type.upper + type.number;\n\n/**\n * Generate random character sequences of a specified `length`,\n * based on the given `pattern`.\n *\n * @param {String} `pattern` The pattern to use for generating the random string.\n * @param {String} `length` The length of the string to generate.\n * @param {String} `options`\n * @return {String}\n * @api public\n */\n\nfunction randomatic(pattern, length, options) {\n  if (typeof pattern === 'undefined') {\n    throw new Error('randomatic expects a string or number.');\n  }\n\n  var custom = false;\n  if (arguments.length === 1) {\n    if (typeof pattern === 'string') {\n      length = pattern.length;\n\n    } else if (isNumber(pattern)) {\n      options = {}; length = pattern; pattern = '*';\n    }\n  }\n\n  if(typeOf(length) === 'object' && length.hasOwnProperty('chars')) {\n    options = length;\n    pattern = options.chars;\n    length = pattern.length;\n    custom = true;\n  }\n\n  var opts = options || {};\n  var mask = '';\n  var res = '';\n\n  // Characters to be used\n  if (pattern.indexOf('?') !== -1) mask += opts.chars;\n  if (pattern.indexOf('a') !== -1) mask += type.lower;\n  if (pattern.indexOf('A') !== -1) mask += type.upper;\n  if (pattern.indexOf('0') !== -1) mask += type.number;\n  if (pattern.indexOf('!') !== -1) mask += type.special;\n  if (pattern.indexOf('*') !== -1) mask += type.all;\n  if (custom) mask += pattern;\n\n  while (length--) {\n    res += mask.charAt(parseInt(Math.random() * mask.length));\n  }\n\n  return res;\n};\n"]}