{"version":3,"sources":["dbcs-data.js"],"names":[],"mappings":"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","file":"dbcs-data-compiled.js","sourcesContent":["\"use strict\"\n\n// Description of supported double byte encodings and aliases.\n// Tables are not require()-d until they are needed to speed up library load.\n// require()-s are direct to support Browserify.\n\nmodule.exports = {\n    \n    // == Japanese/ShiftJIS ====================================================\n    // All japanese encodings are based on JIS X set of standards:\n    // JIS X 0201 - Single-byte encoding of ASCII + Â¥ + Kana chars at 0xA1-0xDF.\n    // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. \n    //              Has several variations in 1978, 1983, 1990 and 1997.\n    // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.\n    // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.\n    //              2 planes, first is superset of 0208, second - revised 0212.\n    //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)\n\n    // Byte encodings are:\n    //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte\n    //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.\n    //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.\n    //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.\n    //               0x00-0x7F       - lower part of 0201\n    //               0x8E, 0xA1-0xDF - upper part of 0201\n    //               (0xA1-0xFE)x2   - 0208 plane (94x94).\n    //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).\n    //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.\n    //               Used as-is in ISO2022 family.\n    //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, \n    //                0201-1976 Roman, 0208-1978, 0208-1983.\n    //  * ISO2022-JP-1: Adds esc seq for 0212-1990.\n    //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.\n    //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.\n    //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.\n    //\n    // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.\n    //\n    // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html\n\n\n    'shiftjis': {\n        type: '_dbcs',\n        table: function() { return require('./tables/shiftjis.json') },\n        encodeAdd: {'\\u00a5': 0x5C, '\\u203E': 0x7E},\n        encodeSkipVals: [{from: 0xED40, to: 0xF940}],\n    },\n    'csshiftjis': 'shiftjis',\n    'mskanji': 'shiftjis',\n    'sjis': 'shiftjis',\n    'windows31j': 'shiftjis',\n    'xsjis': 'shiftjis',\n    'windows932': 'shiftjis',\n    '932': 'shiftjis',\n    'cp932': 'shiftjis',\n\n    'eucjp': {\n        type: '_dbcs',\n        table: function() { return require('./tables/eucjp.json') },\n        encodeAdd: {'\\u00a5': 0x5C, '\\u203E': 0x7E},\n    },\n\n    // TODO: KDDI extension to Shift_JIS\n    // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.\n    // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.\n\n    // == Chinese/GBK ==========================================================\n    // http://en.wikipedia.org/wiki/GBK\n\n    // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936\n    'gb2312': 'cp936',\n    'gb231280': 'cp936',\n    'gb23121980': 'cp936',\n    'csgb2312': 'cp936',\n    'csiso58gb231280': 'cp936',\n    'euccn': 'cp936',\n    'isoir58': 'gbk',\n\n    // Microsoft's CP936 is a subset and approximation of GBK.\n    // TODO: Euro = 0x80 in cp936, but not in GBK (where it's valid but undefined)\n    'windows936': 'cp936',\n    '936': 'cp936',\n    'cp936': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json') },\n    },\n\n    // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.\n    'gbk': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json').concat(require('./tables/gbk-added.json')) },\n    },\n    'xgbk': 'gbk',\n\n    // GB18030 is an algorithmic extension of GBK.\n    'gb18030': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json').concat(require('./tables/gbk-added.json')) },\n        gb18030: function() { return require('./tables/gb18030-ranges.json') },\n    },\n\n    'chinese': 'gb18030',\n\n    // TODO: Support GB18030 (~27000 chars + whole unicode mapping, cp54936)\n    // http://icu-project.org/docs/papers/gb18030.html\n    // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml\n    // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0\n\n    // == Korean ===============================================================\n    // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.\n    'windows949': 'cp949',\n    '949': 'cp949',\n    'cp949': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp949.json') },\n    },\n\n    'cseuckr': 'cp949',\n    'csksc56011987': 'cp949',\n    'euckr': 'cp949',\n    'isoir149': 'cp949',\n    'korean': 'cp949',\n    'ksc56011987': 'cp949',\n    'ksc56011989': 'cp949',\n    'ksc5601': 'cp949',\n\n\n    // == Big5/Taiwan/Hong Kong ================================================\n    // There are lots of tables for Big5 and cp950. Please see the following links for history:\n    // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html\n    // Variations, in roughly number of defined chars:\n    //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT\n    //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/\n    //  * Big5-2003 (Taiwan standard) almost superset of cp950.\n    //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.\n    //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. \n    //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.\n    //    Plus, it has 4 combining sequences.\n    //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299\n    //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.\n    //    Implementations are not consistent within browsers; sometimes labeled as just big5.\n    //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.\n    //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31\n    //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.\n    //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt\n    //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt\n    // \n    // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder\n    // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.\n\n    'windows950': 'cp950',\n    '950': 'cp950',\n    'cp950': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp950.json') },\n    },\n\n    // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.\n    'big5': 'big5hkscs',\n    'big5hkscs': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp950.json').concat(require('./tables/big5-added.json')) },\n        encodeSkipVals: [0xa2cc],\n    },\n\n    'cnbig5': 'big5hkscs',\n    'csbig5': 'big5hkscs',\n    'xxbig5': 'big5hkscs',\n\n};\n"]}