{"version":3,"sources":["grep.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,IAAI,QAAQ,GAAI,OAAO,CAAC,IAAI,CAAC;IACzB,IAAI,GAAQ,OAAO,CAAC,MAAM,CAAC;IAC3B,EAAE,GAAU,OAAO,CAAC,IAAI,CAAC;IACzB,IAAI,GAAQ,OAAO,CAAC,MAAM,CAAC;IAC3B,EAAE,GAAU,OAAO,CAAC,cAAc,CAAC,CACpC;;AAEH,SAAS,iBAAiB,CAAE,UAAU,EAAE;;AAEtC,SAAO,EAAE,CAAC,OAAO,CAAC,UAAU,KAAK,EAAE;AACjC,QAAI,MAAM,GAAG,CAAC;QACV,aAAa,GAAG,EAAE;QAClB,UAAU,GAAG,IAAI,CAAC;;AAEtB,aAAS,MAAM,GAAI;AACjB,aAAO,EAAE,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AAChC,cAAM,EAAE,CAAC;AACT,eAAO,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,MAAM,GAAG,IAAI,GAAG,IAAI,GAAG,SAAS,CAAC;OACrE,CAAC,CAAC;KACJ;;AAED,aAAS,SAAS,GAAI;AACpB,aAAO,EAAE,CAAC,OAAO,CACb,SAAS,KAAK,CAAE,IAAI,EAAE;AACpB,qBAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;OAC1B,EACD,SAAS,GAAG,GAAI;;;AAGd,YAAI,aAAa,CAAC,MAAM,EAAE;AACxB,cAAI,MAAM,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC;;;AAGnD,oBAAU,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;SACjC;AACD,YAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;OAClB,CACJ,CAAC;KACH;;AAED,MAAE,CAAC,gBAAgB,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC;;;KAGvD,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;;;KAGpB,IAAI,CAAC,MAAM,EAAE,CAAC;;;KAGd,IAAI,CAAC,SAAS,EAAE,CAAC,CACjB;GACJ,CAAC,CAAC;CACJ;;AAED,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;;;AAGxC,QAAQ,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;;;CAGzD,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;;;CAGpC,IAAI,CACH,EAAE,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE;AACxB,SAAO,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;CACjE,CAAC,CACH,CACA,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CACpB","file":"grep-compiled.js","sourcesContent":["'use strict';\nvar readdirp =  require('..')\n  , util     =  require('util')\n  , fs       =  require('fs')\n  , path     =  require('path')\n  , es       =  require('event-stream')\n  ;\n\nfunction findLinesMatching (searchTerm) {\n\n  return es.through(function (entry) {\n    var lineno = 0\n      , matchingLines = []\n      , fileStream = this;\n\n    function filter () {\n      return es.mapSync(function (line) {\n        lineno++;\n        return ~line.indexOf(searchTerm) ? lineno + ': ' + line : undefined;\n      });\n    }\n\n    function aggregate () {\n      return es.through(\n          function write (data) { \n            matchingLines.push(data); \n          }\n        , function end () {\n\n            // drop files that had no matches\n            if (matchingLines.length) {\n              var result = { file: entry, lines: matchingLines };\n\n              // pass result on to file stream\n              fileStream.emit('data', result);\n            }\n            this.emit('end');\n          }\n      );\n    }\n\n    fs.createReadStream(entry.fullPath, { encoding: 'utf-8' })\n\n      // handle file contents line by line\n      .pipe(es.split('\\n'))\n\n      // keep only the lines that matched the term\n      .pipe(filter())\n\n      // aggregate all matching lines and delegate control back to the file stream\n      .pipe(aggregate())\n      ;\n  });\n}\n\nconsole.log('grepping for \"arguments\"');\n\n// create a stream of all javascript files found in this and all sub directories\nreaddirp({ root: path.join(__dirname), fileFilter: '*.js' })\n\n  // find all lines matching the term for each file (if none found, that file is ignored)\n  .pipe(findLinesMatching('arguments'))\n\n  // format the results and output\n  .pipe(\n    es.mapSync(function (res) {\n      return '\\n\\n' + res.file.path + '\\n\\t' + res.lines.join('\\n\\t');\n    })\n  )\n  .pipe(process.stdout)\n  ;\n"]}