{"version":3,"sources":["readdirp.js"],"names":[],"mappings":"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","file":"readdirp-compiled.js","sourcesContent":["/*jshint asi:true */\n\nvar test     = require('tap').test\n  , path     = require('path')\n  , fs       = require('fs')\n  , util     = require('util')\n  , net      = require('net')\n  , readdirp = require('../readdirp.js')\n  , root     = path.join(__dirname, '../test/bed')\n  , totalDirs          =  6\n  , totalFiles         =  12\n  , ext1Files          =  4\n  , ext2Files          =  3\n  , ext3Files          =  2\n  , rootDir2Files      =  2\n  , nameHasLength9Dirs =  2\n  , depth1Files        =  8\n  , depth0Files        =  3\n  ;\n\n/*\nStructure of test bed:\n    .\n    ├── root_dir1\n    │   ├── root_dir1_file1.ext1\n    │   ├── root_dir1_file2.ext2\n    │   ├── root_dir1_file3.ext3\n    │   ├── root_dir1_subdir1\n    │   │   └── root1_dir1_subdir1_file1.ext1\n    │   └── root_dir1_subdir2\n    │       └── .gitignore\n    ├── root_dir2\n    │   ├── root_dir2_file1.ext1\n    │   ├── root_dir2_file2.ext2\n    │   ├── root_dir2_subdir1\n    │   │   └── .gitignore\n    │   └── root_dir2_subdir2\n    │       └── .gitignore\n    ├── root_file1.ext1\n    ├── root_file2.ext2\n    └── root_file3.ext3\n\n    6 directories, 13 files\n*/\n\n// console.log('\\033[2J'); // clear console\n\nfunction opts (extend) {\n  var o = { root: root };\n\n  if (extend) {\n    for (var prop in extend) {\n      o[prop] = extend[prop];\n    }\n  }\n  return o;\n}\n\ntest('\\nreading root without filter', function (t) {\n  t.plan(2);\n  readdirp(opts(), function (err, res) {\n    t.equals(res.directories.length, totalDirs, 'all directories');\n    t.equals(res.files.length, totalFiles, 'all files');\n    t.end();\n  })\n})\n\ntest('\\nreading root without filter using lstat', function (t) {\n  t.plan(2);\n  readdirp(opts({ lstat: true }), function (err, res) {\n    t.equals(res.directories.length, totalDirs, 'all directories');\n    t.equals(res.files.length, totalFiles, 'all files');\n    t.end();\n  })\n})\n\ntest('\\nreading root with symlinks using lstat', function (t) {\n  t.plan(2);\n  fs.symlinkSync(path.join(root, 'root_dir1'), path.join(root, 'dirlink'));\n  fs.symlinkSync(path.join(root, 'root_file1.ext1'), path.join(root, 'link.ext1'));\n  readdirp(opts({ lstat: true }), function (err, res) {\n    t.equals(res.directories.length, totalDirs, 'all directories');\n    t.equals(res.files.length, totalFiles + 2, 'all files + symlinks');\n    fs.unlinkSync(path.join(root, 'dirlink'));\n    fs.unlinkSync(path.join(root, 'link.ext1'));\n    t.end();\n  })\n})\n\ntest('\\nreading non-standard fds', function (t) {\n  t.plan(2);\n  var server = net.createServer().listen(path.join(root, 'test.sock'), function(){\n    readdirp(opts({ entryType: 'all' }), function (err, res) {\n      t.equals(res.files.length, totalFiles + 1, 'all files + socket');\n      readdirp(opts({ entryType: 'both' }), function (err, res) {\n        t.equals(res.files.length, totalFiles, 'all regular files only');\n        server.close();\n        t.end();\n      })\n    })\n  });\n})\n\ntest('\\nreading root using glob filter', function (t) {\n  // normal\n  t.test('\\n# \"*.ext1\"', function (t) {\n    t.plan(1);\n    readdirp(opts( { fileFilter: '*.ext1' } ), function (err, res) {\n      t.equals(res.files.length, ext1Files, 'all ext1 files');\n      t.end();\n    })\n  })\n  t.test('\\n# [\"*.ext1\", \"*.ext3\"]', function (t) {\n    t.plan(1);\n    readdirp(opts( { fileFilter: [ '*.ext1', '*.ext3' ] } ), function (err, res) {\n      t.equals(res.files.length, ext1Files + ext3Files, 'all ext1 and ext3 files');\n      t.end();\n    })\n  })\n  t.test('\\n# \"root_dir1\"', function (t) {\n    t.plan(1);\n    readdirp(opts( { directoryFilter: 'root_dir1' }), function (err, res) {\n      t.equals(res.directories.length, 1, 'one directory');\n      t.end();\n    })\n  })\n  t.test('\\n# [\"root_dir1\", \"*dir1_subdir1\"]', function (t) {\n    t.plan(1);\n    readdirp(opts( { directoryFilter: [ 'root_dir1', '*dir1_subdir1' ]}), function (err, res) {\n      t.equals(res.directories.length, 2, 'two directories');\n      t.end();\n    })\n  })\n\n  t.test('\\n# negated: \"!*.ext1\"', function (t) {\n    t.plan(1);\n    readdirp(opts( { fileFilter: '!*.ext1' } ), function (err, res) {\n      t.equals(res.files.length, totalFiles - ext1Files, 'all but ext1 files');\n      t.end();\n    })\n  })\n  t.test('\\n# negated: [\"!*.ext1\", \"!*.ext3\"]', function (t) {\n    t.plan(1);\n    readdirp(opts( { fileFilter: [ '!*.ext1', '!*.ext3' ] } ), function (err, res) {\n      t.equals(res.files.length, totalFiles - ext1Files - ext3Files, 'all but ext1 and ext3 files');\n      t.end();\n    })\n  })\n\n  t.test('\\n# mixed: [\"*.ext1\", \"!*.ext3\"]', function (t) {\n    t.plan(1);\n    readdirp(opts( { fileFilter: [ '*.ext1', '!*.ext3' ] } ), function (err, res) {\n      t.similar(err[0].toString(), /Cannot mix negated with non negated glob filters/, 'returns meaningfull error');\n      t.end();\n    })\n  })\n\n  t.test('\\n# leading and trailing spaces: [\" *.ext1\", \"*.ext3 \"]', function (t) {\n    t.plan(1);\n    readdirp(opts( { fileFilter: [ ' *.ext1', '*.ext3 ' ] } ), function (err, res) {\n      t.equals(res.files.length, ext1Files + ext3Files, 'all ext1 and ext3 files');\n      t.end();\n    })\n  })\n  t.test('\\n# leading and trailing spaces: [\" !*.ext1\", \" !*.ext3 \"]', function (t) {\n    t.plan(1);\n    readdirp(opts( { fileFilter: [ ' !*.ext1', ' !*.ext3' ] } ), function (err, res) {\n      t.equals(res.files.length, totalFiles - ext1Files - ext3Files, 'all but ext1 and ext3 files');\n      t.end();\n    })\n  })\n\n  t.test('\\n# ** glob pattern', function (t) {\n    t.plan(1);\n    readdirp(opts( { fileFilter: '**/*.ext1' } ), function (err, res) {\n      t.equals(res.files.length, ext1Files, 'ignores ** in **/*.ext1 -> only *.ext1 files');\n      t.end();\n    })\n  })\n})\n\ntest('\\n\\nreading root using function filter', function (t) {\n  t.test('\\n# file filter -> \"contains root_dir2\"', function (t) {\n    t.plan(1);\n    readdirp(\n        opts( { fileFilter: function (fi) { return fi.name.indexOf('root_dir2') >= 0; } })\n      , function (err, res) {\n          t.equals(res.files.length, rootDir2Files, 'all rootDir2Files');\n          t.end();\n      }\n    )\n  })\n\n  t.test('\\n# directory filter -> \"name has length 9\"', function (t) {\n    t.plan(1);\n    readdirp(\n        opts( { directoryFilter: function (di) { return di.name.length === 9; } })\n      , function (err, res) {\n          t.equals(res.directories.length, nameHasLength9Dirs, 'all all dirs with name length 9');\n          t.end();\n      }\n    )\n  })\n})\n\ntest('\\nreading root specifying maximum depth', function (t) {\n  t.test('\\n# depth 1', function (t) {\n    t.plan(1);\n      readdirp(opts( { depth: 1 } ), function (err, res) {\n        t.equals(res.files.length, depth1Files, 'does not return files at depth 2');\n      })\n  })\n})\n\ntest('\\nreading root with no recursion', function (t) {\n  t.test('\\n# depth 0', function (t) {\n    t.plan(1);\n      readdirp(opts( { depth: 0 } ), function (err, res) {\n        t.equals(res.files.length, depth0Files, 'does not return files at depth 0');\n      })\n  })\n})\n\ntest('\\nprogress callbacks', function (t) {\n  t.plan(2);\n\n  var pluckName = function(fi) { return fi.name; }\n    , processedFiles = [];\n\n  readdirp(\n      opts()\n    , function(fi) {\n        processedFiles.push(fi);\n      }\n    , function (err, res) {\n        t.equals(processedFiles.length, res.files.length, 'calls back for each file processed');\n        t.deepEquals(processedFiles.map(pluckName).sort(),res.files.map(pluckName).sort(), 'same file names');\n        t.end();\n      }\n  )\n})\n\ntest('resolving of name, full and relative paths', function (t) {\n  var expected = {\n        name          :  'root_dir1_file1.ext1'\n      , parentDirName :  'root_dir1'\n      , path          :  'root_dir1/root_dir1_file1.ext1'\n      , fullPath      :  'test/bed/root_dir1/root_dir1_file1.ext1'\n      }\n    , opts = [\n        { root: './bed'          ,  prefix: ''     }\n      , { root: './bed/'         ,  prefix: ''     }\n      , { root: 'bed'            ,  prefix: ''     }\n      , { root: 'bed/'           ,  prefix: ''     }\n      , { root: '../test/bed/'   ,  prefix: ''     }\n      , { root: '.'              ,  prefix: 'bed'  }\n    ]\n  t.plan(opts.length);\n\n  opts.forEach(function (op) {\n    op.fileFilter = 'root_dir1_file1.ext1';\n\n    t.test('\\n' + util.inspect(op), function (t) {\n      t.plan(4);\n\n      readdirp (op, function(err, res) {\n        t.equals(res.files[0].name, expected.name, 'correct name');\n        t.equals(res.files[0].path, path.join(op.prefix, expected.path), 'correct path');\n      })\n\n      fs.realpath(op.root, function(err, fullRoot) {\n        readdirp (op, function(err, res) {\n          t.equals(\n              res.files[0].fullParentDir\n            , path.join(fullRoot, op.prefix, expected.parentDirName)\n            , 'correct parentDir'\n          );\n          t.equals(\n              res.files[0].fullPath\n            , path.join(fullRoot, op.prefix, expected.parentDirName, expected.name)\n            , 'correct fullPath'\n          );\n        })\n      })\n    })\n  })\n})\n\n\n"]}