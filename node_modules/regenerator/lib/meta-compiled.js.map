{"version":3,"sources":["meta.js"],"names":[],"mappings":"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","file":"meta-compiled.js","sourcesContent":["/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\nvar assert = require(\"assert\");\nvar m = require(\"private\").makeAccessor();\nvar types = require(\"recast\").types;\nvar isArray = types.builtInTypes.array;\nvar n = types.namedTypes;\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction makePredicate(propertyName, knownTypes) {\n  function onlyChildren(node) {\n    n.Node.assert(node);\n\n    // Assume no side effects until we find out otherwise.\n    var result = false;\n\n    function check(child) {\n      if (result) {\n        // Do nothing.\n      } else if (isArray.check(child)) {\n        child.some(check);\n      } else if (n.Node.check(child)) {\n        assert.strictEqual(result, false);\n        result = predicate(child);\n      }\n      return result;\n    }\n\n    types.eachField(node, function(name, child) {\n      check(child);\n    });\n\n    return result;\n  }\n\n  function predicate(node) {\n    n.Node.assert(node);\n\n    var meta = m(node);\n    if (hasOwn.call(meta, propertyName))\n      return meta[propertyName];\n\n    // Certain types are \"opaque,\" which means they have no side\n    // effects or leaps and we don't care about their subexpressions.\n    if (hasOwn.call(opaqueTypes, node.type))\n      return meta[propertyName] = false;\n\n    if (hasOwn.call(knownTypes, node.type))\n      return meta[propertyName] = true;\n\n    return meta[propertyName] = onlyChildren(node);\n  }\n\n  predicate.onlyChildren = onlyChildren;\n\n  return predicate;\n}\n\nvar opaqueTypes = {\n  FunctionExpression: true\n};\n\n// These types potentially have side effects regardless of what side\n// effects their subexpressions have.\nvar sideEffectTypes = {\n  CallExpression: true, // Anything could happen!\n  ForInStatement: true, // Modifies the key variable.\n  UnaryExpression: true, // Think delete.\n  BinaryExpression: true, // Might invoke .toString() or .valueOf().\n  AssignmentExpression: true, // Side-effecting by definition.\n  UpdateExpression: true, // Updates are essentially assignments.\n  NewExpression: true // Similar to CallExpression.\n};\n\n// These types are the direct cause of all leaps in control flow.\nvar leapTypes = {\n  YieldExpression: true,\n  BreakStatement: true,\n  ContinueStatement: true,\n  ReturnStatement: true,\n  ThrowStatement: true\n};\n\n// All leap types are also side effect types.\nfor (var type in leapTypes) {\n  if (hasOwn.call(leapTypes, type)) {\n    sideEffectTypes[type] = leapTypes[type];\n  }\n}\n\nexports.hasSideEffects = makePredicate(\"hasSideEffects\", sideEffectTypes);\nexports.containsLeap = makePredicate(\"containsLeap\", leapTypes);\n"]}