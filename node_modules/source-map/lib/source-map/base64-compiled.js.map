{"version":3,"sources":["base64.js"],"names":[],"mappings":";;;;;;;;AAMA,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;AAC9B,MAAI,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;CACrD;AACD,MAAM,CAAC,UAAU,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE;;AAEzC,MAAI,YAAY,GAAG,kEAAkE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;;;;;AAKhG,SAAO,CAAC,MAAM,GAAG,UAAU,MAAM,EAAE;AACjC,QAAI,CAAC,IAAI,MAAM,IAAI,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE;AAC/C,aAAO,YAAY,CAAC,MAAM,CAAC,CAAC;KAC7B;AACD,UAAM,IAAI,SAAS,CAAC,4BAA4B,GAAG,OAAO,CAAC,CAAC;GAC7D,CAAC;;;;;;AAMF,SAAO,CAAC,MAAM,GAAG,UAAU,QAAQ,EAAE;AACnC,QAAI,IAAI,GAAG,EAAE,CAAC;AACd,QAAI,IAAI,GAAG,EAAE,CAAC;;AAEd,QAAI,OAAO,GAAG,EAAE,CAAC;AACjB,QAAI,OAAO,GAAG,GAAG,CAAC;;AAElB,QAAI,IAAI,GAAG,EAAE,CAAC;AACd,QAAI,IAAI,GAAG,EAAE,CAAC;;AAEd,QAAI,IAAI,GAAG,EAAE,CAAC;AACd,QAAI,KAAK,GAAG,EAAE,CAAC;;AAEf,QAAI,YAAY,GAAG,EAAE,CAAC;AACtB,QAAI,YAAY,GAAG,EAAE,CAAC;;;AAGtB,QAAI,IAAI,IAAI,QAAQ,IAAI,QAAQ,IAAI,IAAI,EAAE;AACxC,aAAQ,QAAQ,GAAG,IAAI,CAAE;KAC1B;;;AAGD,QAAI,OAAO,IAAI,QAAQ,IAAI,QAAQ,IAAI,OAAO,EAAE;AAC9C,aAAQ,QAAQ,GAAG,OAAO,GAAG,YAAY,CAAE;KAC5C;;;AAGD,QAAI,IAAI,IAAI,QAAQ,IAAI,QAAQ,IAAI,IAAI,EAAE;AACxC,aAAQ,QAAQ,GAAG,IAAI,GAAG,YAAY,CAAE;KACzC;;;AAGD,QAAI,QAAQ,IAAI,IAAI,EAAE;AACpB,aAAO,EAAE,CAAC;KACX;;;AAGD,QAAI,QAAQ,IAAI,KAAK,EAAE;AACrB,aAAO,EAAE,CAAC;KACX;;;AAGD,WAAO,CAAC,CAAC,CAAC;GACX,CAAC;CAEH,CAAC,CAAC","file":"base64-compiled.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  /**\n   * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n   */\n  exports.encode = function (number) {\n    if (0 <= number && number < intToCharMap.length) {\n      return intToCharMap[number];\n    }\n    throw new TypeError(\"Must be between 0 and 63: \" + aNumber);\n  };\n\n  /**\n   * Decode a single base 64 character code digit to an integer. Returns -1 on\n   * failure.\n   */\n  exports.decode = function (charCode) {\n    var bigA = 65;     // 'A'\n    var bigZ = 90;     // 'Z'\n\n    var littleA = 97;  // 'a'\n    var littleZ = 122; // 'z'\n\n    var zero = 48;     // '0'\n    var nine = 57;     // '9'\n\n    var plus = 43;     // '+'\n    var slash = 47;    // '/'\n\n    var littleOffset = 26;\n    var numberOffset = 52;\n\n    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n    if (bigA <= charCode && charCode <= bigZ) {\n      return (charCode - bigA);\n    }\n\n    // 26 - 51: abcdefghijklmnopqrstuvwxyz\n    if (littleA <= charCode && charCode <= littleZ) {\n      return (charCode - littleA + littleOffset);\n    }\n\n    // 52 - 61: 0123456789\n    if (zero <= charCode && charCode <= nine) {\n      return (charCode - zero + numberOffset);\n    }\n\n    // 62: +\n    if (charCode == plus) {\n      return 62;\n    }\n\n    // 63: /\n    if (charCode == slash) {\n      return 63;\n    }\n\n    // Invalid base64 digit.\n    return -1;\n  };\n\n});\n"]}