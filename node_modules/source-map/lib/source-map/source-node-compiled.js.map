{"version":3,"sources":["source-node.js"],"names":[],"mappings":"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","file":"source-node-compiled.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\n  var util = require('./util');\n\n  // Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n  // operating systems these days (capturing the result).\n  var REGEX_NEWLINE = /(\\r?\\n)/;\n\n  // Newline character code for charCodeAt() comparisons\n  var NEWLINE_CODE = 10;\n\n  // Private symbol for identifying `SourceNode`s when multiple versions of\n  // the source-map library are loaded. This MUST NOT CHANGE across\n  // versions!\n  var isSourceNode = \"$$$isSourceNode$$$\";\n\n  /**\n   * SourceNodes provide a way to abstract over interpolating/concatenating\n   * snippets of generated JavaScript source code while maintaining the line and\n   * column information associated with the original source code.\n   *\n   * @param aLine The original line number.\n   * @param aColumn The original column number.\n   * @param aSource The original source's filename.\n   * @param aChunks Optional. An array of strings which are snippets of\n   *        generated JS, or other SourceNodes.\n   * @param aName The original identifier.\n   */\n  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n    this.children = [];\n    this.sourceContents = {};\n    this.line = aLine == null ? null : aLine;\n    this.column = aColumn == null ? null : aColumn;\n    this.source = aSource == null ? null : aSource;\n    this.name = aName == null ? null : aName;\n    this[isSourceNode] = true;\n    if (aChunks != null) this.add(aChunks);\n  }\n\n  /**\n   * Creates a SourceNode from generated code and a SourceMapConsumer.\n   *\n   * @param aGeneratedCode The generated code\n   * @param aSourceMapConsumer The SourceMap for the generated code\n   * @param aRelativePath Optional. The path that relative sources in the\n   *        SourceMapConsumer should be relative to.\n   */\n  SourceNode.fromStringWithSourceMap =\n    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      // The SourceNode we want to fill with the generated code\n      // and the SourceMap\n      var node = new SourceNode();\n\n      // All even indices of this array are one line of the generated code,\n      // while all odd indices are the newlines between two adjacent lines\n      // (since `REGEX_NEWLINE` captures its match).\n      // Processed fragments are removed from this array, by calling `shiftNextLine`.\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var shiftNextLine = function() {\n        var lineContents = remainingLines.shift();\n        // The last line of a file might not have a newline.\n        var newLine = remainingLines.shift() || \"\";\n        return lineContents + newLine;\n      };\n\n      // We need to remember the position of \"remainingLines\"\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n      // The generate SourceNodes we need a code range.\n      // To extract it current and last mapping is used.\n      // Here we store the last mapping.\n      var lastMapping = null;\n\n      aSourceMapConsumer.eachMapping(function (mapping) {\n        if (lastMapping !== null) {\n          // We add the code from \"lastMapping\" to \"mapping\":\n          // First check if there is a new line in between.\n          if (lastGeneratedLine < mapping.generatedLine) {\n            var code = \"\";\n            // Associate first line with \"lastMapping\"\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n            // The remaining code is added without mapping\n          } else {\n            // There is no new line in between.\n            // Associate the code between \"lastGeneratedColumn\" and\n            // \"mapping.generatedColumn\" with \"lastMapping\"\n            var nextLine = remainingLines[0];\n            var code = nextLine.substr(0, mapping.generatedColumn -\n                                          lastGeneratedColumn);\n            remainingLines[0] = nextLine.substr(mapping.generatedColumn -\n                                                lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            // No more remaining code, continue\n            lastMapping = mapping;\n            return;\n          }\n        }\n        // We add the generated code until the first mapping\n        // to the SourceNode without any mapping.\n        // Each line is added as separate string.\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[0];\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[0] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      // We have processed all mappings.\n      if (remainingLines.length > 0) {\n        if (lastMapping) {\n          // Associate the remaining code in the current line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        // and add the remaining lines without any mapping\n        node.add(remainingLines.join(\"\"));\n      }\n\n      // Copy sourcesContent into SourceNode\n      aSourceMapConsumer.sources.forEach(function (sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n\n      return node;\n\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === undefined) {\n          node.add(code);\n        } else {\n          var source = aRelativePath\n            ? util.join(aRelativePath, mapping.source)\n            : mapping.source;\n          node.add(new SourceNode(mapping.originalLine,\n                                  mapping.originalColumn,\n                                  source,\n                                  code,\n                                  mapping.name));\n        }\n      }\n    };\n\n  /**\n   * Add a chunk of generated JS to this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  SourceNode.prototype.add = function SourceNode_add(aChunk) {\n    if (Array.isArray(aChunk)) {\n      aChunk.forEach(function (chunk) {\n        this.add(chunk);\n      }, this);\n    }\n    else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      if (aChunk) {\n        this.children.push(aChunk);\n      }\n    }\n    else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  };\n\n  /**\n   * Add a chunk of generated JS to the beginning of this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n    if (Array.isArray(aChunk)) {\n      for (var i = aChunk.length-1; i >= 0; i--) {\n        this.prepend(aChunk[i]);\n      }\n    }\n    else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      this.children.unshift(aChunk);\n    }\n    else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  };\n\n  /**\n   * Walk over the tree of JS snippets in this node and its children. The\n   * walking function is called once for each snippet of JS and is passed that\n   * snippet and the its original associated source's line/column location.\n   *\n   * @param aFn The traversal function.\n   */\n  SourceNode.prototype.walk = function SourceNode_walk(aFn) {\n    var chunk;\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      chunk = this.children[i];\n      if (chunk[isSourceNode]) {\n        chunk.walk(aFn);\n      }\n      else {\n        if (chunk !== '') {\n          aFn(chunk, { source: this.source,\n                       line: this.line,\n                       column: this.column,\n                       name: this.name });\n        }\n      }\n    }\n  };\n\n  /**\n   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n   * each of `this.children`.\n   *\n   * @param aSep The separator.\n   */\n  SourceNode.prototype.join = function SourceNode_join(aSep) {\n    var newChildren;\n    var i;\n    var len = this.children.length;\n    if (len > 0) {\n      newChildren = [];\n      for (i = 0; i < len-1; i++) {\n        newChildren.push(this.children[i]);\n        newChildren.push(aSep);\n      }\n      newChildren.push(this.children[i]);\n      this.children = newChildren;\n    }\n    return this;\n  };\n\n  /**\n   * Call String.prototype.replace on the very right-most source snippet. Useful\n   * for trimming whitespace from the end of a source node, etc.\n   *\n   * @param aPattern The pattern to replace.\n   * @param aReplacement The thing to replace the pattern with.\n   */\n  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n    var lastChild = this.children[this.children.length - 1];\n    if (lastChild[isSourceNode]) {\n      lastChild.replaceRight(aPattern, aReplacement);\n    }\n    else if (typeof lastChild === 'string') {\n      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n    }\n    else {\n      this.children.push(''.replace(aPattern, aReplacement));\n    }\n    return this;\n  };\n\n  /**\n   * Set the source content for a source file. This will be added to the SourceMapGenerator\n   * in the sourcesContent field.\n   *\n   * @param aSourceFile The filename of the source file\n   * @param aSourceContent The content of the source file\n   */\n  SourceNode.prototype.setSourceContent =\n    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    };\n\n  /**\n   * Walk over the tree of SourceNodes. The walking function is called for each\n   * source file content and is passed the filename and source content.\n   *\n   * @param aFn The traversal function.\n   */\n  SourceNode.prototype.walkSourceContents =\n    function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    };\n\n  /**\n   * Return the string representation of this source node. Walks over the tree\n   * and concatenates all the various snippets together to one string.\n   */\n  SourceNode.prototype.toString = function SourceNode_toString() {\n    var str = \"\";\n    this.walk(function (chunk) {\n      str += chunk;\n    });\n    return str;\n  };\n\n  /**\n   * Returns the string representation of this source node along with a source\n   * map.\n   */\n  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n    var generated = {\n      code: \"\",\n      line: 1,\n      column: 0\n    };\n    var map = new SourceMapGenerator(aArgs);\n    var sourceMappingActive = false;\n    var lastOriginalSource = null;\n    var lastOriginalLine = null;\n    var lastOriginalColumn = null;\n    var lastOriginalName = null;\n    this.walk(function (chunk, original) {\n      generated.code += chunk;\n      if (original.source !== null\n          && original.line !== null\n          && original.column !== null) {\n        if(lastOriginalSource !== original.source\n           || lastOriginalLine !== original.line\n           || lastOriginalColumn !== original.column\n           || lastOriginalName !== original.name) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n        lastOriginalSource = original.source;\n        lastOriginalLine = original.line;\n        lastOriginalColumn = original.column;\n        lastOriginalName = original.name;\n        sourceMappingActive = true;\n      } else if (sourceMappingActive) {\n        map.addMapping({\n          generated: {\n            line: generated.line,\n            column: generated.column\n          }\n        });\n        lastOriginalSource = null;\n        sourceMappingActive = false;\n      }\n      for (var idx = 0, length = chunk.length; idx < length; idx++) {\n        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n          generated.line++;\n          generated.column = 0;\n          // Mappings end at eol\n          if (idx + 1 === length) {\n            lastOriginalSource = null;\n            sourceMappingActive = false;\n          } else if (sourceMappingActive) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n        } else {\n          generated.column++;\n        }\n      }\n    });\n    this.walkSourceContents(function (sourceFile, sourceContent) {\n      map.setSourceContent(sourceFile, sourceContent);\n    });\n\n    return { code: generated.code, map: map };\n  };\n\n  exports.SourceNode = SourceNode;\n\n});\n"]}