{"version":3,"sources":["index.js"],"names":[],"mappings":";;AACA,IAAI,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;;AAEpC,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;;;AAGxB,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAU,IAAI,EAAE;AACpD,MAAI,GAAG,EAAC,CAAC,IAAI,CAAC;AACd,MAAI,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;AACtB,QAAM,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;AACnB,QAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,GAAG,IAAI,CAAC;AAC/C,SAAO,IAAI,CAAC;CACb,CAAC,CAAC;;;AAGH,MAAM,CAAC,QAAQ,GAAG;AAChB,KAAG,EAAE,IAAI;AACT,KAAG,EAAE,IAAI;AACT,KAAG,EAAE,IAAI;AACT,KAAG,EAAE,IAAI;AACT,KAAG,EAAE,IAAI;AACT,KAAG,EAAE,IAAI;AACT,KAAG,EAAE,IAAI;CACV,CAAC;;;AAGF,MAAM,CAAC,KAAK,GAAG;AACb,KAAG,EAAE,IAAI;AACT,KAAG,EAAE,IAAI;AACT,KAAG,EAAE,IAAI;CACV,CAAC;;;AAGF,MAAM,CAAC,KAAK,GAAG;AACb,KAAG,EAAE,IAAI;AACT,KAAG,EAAE,IAAI;AACT,KAAG,EAAE,IAAI;CACV,CAAC;;AAEF,SAAS,MAAM,CAAC,IAAI,EAAE;AACpB,MAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AAC5B,QAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,IAAI,CAAC,CAAC;AACnE,WAAO,IAAI,CAAC;GACb;;AAED,MAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AAC5B,UAAM,IAAI,SAAS,CAAC,iCAAiC,CAAC,CAAC;GACxD;;;AAGD,MAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;AAC1B,MAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;AACb,QAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,CAAC,CAAC,CAAC;AAC7D,WAAO,CAAC,CAAC;GACV;;AAED,GAAC,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;AAC/B,MAAI,CAAC,CAAC,EAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC;AAClE,SAAO,CAAC,CAAC;CACV","file":"index-compiled.js","sourcesContent":["\nvar codes = require('./codes.json');\n\nmodule.exports = status;\n\n// [Integer...]\nstatus.codes = Object.keys(codes).map(function (code) {\n  code = ~~code;\n  var msg = codes[code];\n  status[code] = msg;\n  status[msg] = status[msg.toLowerCase()] = code;\n  return code;\n});\n\n// status codes for redirects\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true,\n};\n\n// status codes for empty bodies\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true,\n};\n\n// status codes for when you should retry the request\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true,\n};\n\nfunction status(code) {\n  if (typeof code === 'number') {\n    if (!status[code]) throw new Error('invalid status code: ' + code);\n    return code;\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string');\n  }\n\n  // '403'\n  var n = parseInt(code, 10)\n  if (!isNaN(n)) {\n    if (!status[n]) throw new Error('invalid status code: ' + n);\n    return n;\n  }\n\n  n = status[code.toLowerCase()];\n  if (!n) throw new Error('invalid status message: \"' + code + '\"');\n  return n;\n}\n"]}