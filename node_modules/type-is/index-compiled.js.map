{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAOA,YAAY,CAAA;;;;;;;AAOZ,IAAI,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;AAClC,IAAI,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;;;;;;;AAOhC,MAAM,CAAC,OAAO,GAAG,aAAa,CAAA;AAC9B,MAAM,CAAC,OAAO,CAAC,EAAE,GAAG,MAAM,CAAA;AAC1B,MAAM,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAA;AAChC,MAAM,CAAC,OAAO,CAAC,SAAS,GAAG,SAAS,CAAA;AACpC,MAAM,CAAC,OAAO,CAAC,KAAK,GAAG,SAAS,CAAA;;;;;;;;;;;;;;;;AAgBhC,SAAS,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE;AAC7B,MAAI,CAAC,CAAA;AACL,MAAI,KAAK,GAAG,MAAM,CAAA;;;AAGlB,MAAI,GAAG,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAA;;;AAGjC,MAAI,CAAC,GAAG,EAAE;AACR,WAAO,KAAK,CAAA;GACb;;;AAGD,MAAI,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AAClC,SAAK,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;AACvC,SAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACjC,WAAK,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;KAC5B;GACF;;;AAGD,MAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;AAC3B,WAAO,GAAG,CAAA;GACX;;AAED,MAAI,IAAI,CAAA;AACR,OAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACjC,QAAI,SAAS,CAAC,SAAS,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;AAC9C,aAAO,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAC9C,GAAG,GACH,IAAI,CAAA;KACT;GACF;;;AAGD,SAAO,KAAK,CAAA;CACb;;;;;;;;;;;;;AAaD,SAAS,OAAO,CAAC,GAAG,EAAE;AACpB,SAAO,GAAG,CAAC,OAAO,CAAC,mBAAmB,CAAC,KAAK,SAAS,IAChD,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAA;CAC3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BD,SAAS,aAAa,CAAC,GAAG,EAAE,MAAM,EAAE;AAClC,MAAI,KAAK,GAAG,MAAM,CAAA;;;AAGlB,MAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;AACjB,WAAO,IAAI,CAAA;GACZ;;;AAGD,MAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;AACxB,SAAK,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;AACvC,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,WAAK,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;KAC5B;GACF;;;AAGD,MAAI,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;;AAEvC,SAAO,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;CAC5B;;;;;;;;;;;;;;;;;;AAkBD,SAAS,SAAS,CAAC,IAAI,EAAE;AACvB,MAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;;AAE5B,WAAO,KAAK,CAAA;GACb;;AAED,UAAQ,IAAI;AACV,SAAK,YAAY;AACf,aAAO,mCAAmC,CAAA;AAAA,AAC5C,SAAK,WAAW;AACd,aAAO,aAAa,CAAA;AAAA,GACvB;;AAED,MAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;;AAEnB,WAAO,KAAK,GAAG,IAAI,CAAA;GACpB;;AAED,SAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAC3B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GACjB,IAAI,CAAA;CACT;;;;;;;;;;;;;AAaD,SAAS,SAAS,CAAC,QAAQ,EAAE,MAAM,EAAE;;AAEnC,MAAI,QAAQ,KAAK,KAAK,EAAE;AACtB,WAAO,KAAK,CAAA;GACb;;;AAGD,MAAI,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;AACnC,MAAI,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;;;AAGvC,MAAI,WAAW,CAAC,MAAM,KAAK,CAAC,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;AAC1D,WAAO,KAAK,CAAA;GACb;;;AAGD,MAAI,aAAa,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,aAAa,CAAC,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC,EAAE;AACnE,WAAO,KAAK,CAAA;GACb;;;AAGD,MAAI,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE;AAC1C,WAAO,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,IACtD,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;GACvF;;;AAGD,MAAI,aAAa,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,aAAa,CAAC,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC,EAAE;AACnE,WAAO,KAAK,CAAA;GACb;;AAED,SAAO,IAAI,CAAA;CACZ;;;;;;;;;;AAUD,SAAS,aAAa,CAAC,KAAK,EAAE;;AAE5B,MAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;;;AAG7B,MAAI,CAAC,UAAU,GAAG,SAAS,CAAA;;;AAG3B,SAAO,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;CAC1B;;;;;;;;;;AAUD,SAAS,gBAAgB,CAAC,KAAK,EAAE;AAC/B,MAAI;AACF,WAAO,aAAa,CAAC,KAAK,CAAC,CAAA;GAC5B,CAAC,OAAO,GAAG,EAAE;AACZ,WAAO,IAAI,CAAA;GACZ;CACF","file":"index-compiled.js","sourcesContent":["/*!\n * type-is\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar typer = require('media-typer')\nvar mime = require('mime-types')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = typeofrequest\nmodule.exports.is = typeis\nmodule.exports.hasBody = hasbody\nmodule.exports.normalize = normalize\nmodule.exports.match = mimeMatch\n\n/**\n * Compare a `value` content-type with `types`.\n * Each `type` can be an extension like `html`,\n * a special shortcut like `multipart` or `urlencoded`,\n * or a mime type.\n *\n * If no types match, `false` is returned.\n * Otherwise, the first `type` that matches is returned.\n *\n * @param {String} value\n * @param {Array} types\n * @public\n */\n\nfunction typeis(value, types_) {\n  var i\n  var types = types_\n\n  // remove parameters and normalize\n  var val = tryNormalizeType(value)\n\n  // no type or invalid\n  if (!val) {\n    return false\n  }\n\n  // support flattened arguments\n  if (types && !Array.isArray(types)) {\n    types = new Array(arguments.length - 1)\n    for (i = 0; i < types.length; i++) {\n      types[i] = arguments[i + 1]\n    }\n  }\n\n  // no types, return the content type\n  if (!types || !types.length) {\n    return val\n  }\n\n  var type\n  for (i = 0; i < types.length; i++) {\n    if (mimeMatch(normalize(type = types[i]), val)) {\n      return type[0] === '+' || type.indexOf('*') !== -1\n        ? val\n        : type\n    }\n  }\n\n  // no matches\n  return false\n}\n\n/**\n * Check if a request has a request body.\n * A request with a body __must__ either have `transfer-encoding`\n * or `content-length` headers set.\n * http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3\n *\n * @param {Object} request\n * @return {Boolean}\n * @public\n */\n\nfunction hasbody(req) {\n  return req.headers['transfer-encoding'] !== undefined\n    || !isNaN(req.headers['content-length'])\n}\n\n/**\n * Check if the incoming request contains the \"Content-Type\"\n * header field, and it contains any of the give mime `type`s.\n * If there is no request body, `null` is returned.\n * If there is no content type, `false` is returned.\n * Otherwise, it returns the first `type` that matches.\n *\n * Examples:\n *\n *     // With Content-Type: text/html; charset=utf-8\n *     this.is('html'); // => 'html'\n *     this.is('text/html'); // => 'text/html'\n *     this.is('text/*', 'application/json'); // => 'text/html'\n *\n *     // When Content-Type is application/json\n *     this.is('json', 'urlencoded'); // => 'json'\n *     this.is('application/json'); // => 'application/json'\n *     this.is('html', 'application/*'); // => 'application/json'\n *\n *     this.is('html'); // => false\n *\n * @param {String|Array} types...\n * @return {String|false|null}\n * @public\n */\n\nfunction typeofrequest(req, types_) {\n  var types = types_\n\n  // no body\n  if (!hasbody(req)) {\n    return null\n  }\n\n  // support flattened arguments\n  if (arguments.length > 2) {\n    types = new Array(arguments.length - 1)\n    for (var i = 0; i < types.length; i++) {\n      types[i] = arguments[i + 1]\n    }\n  }\n\n  // request content type\n  var value = req.headers['content-type']\n\n  return typeis(value, types)\n}\n\n/**\n * Normalize a mime type.\n * If it's a shorthand, expand it to a valid mime type.\n *\n * In general, you probably want:\n *\n *   var type = is(req, ['urlencoded', 'json', 'multipart']);\n *\n * Then use the appropriate body parsers.\n * These three are the most common request body types\n * and are thus ensured to work.\n *\n * @param {String} type\n * @private\n */\n\nfunction normalize(type) {\n  if (typeof type !== 'string') {\n    // invalid type\n    return false\n  }\n\n  switch (type) {\n    case 'urlencoded':\n      return 'application/x-www-form-urlencoded'\n    case 'multipart':\n      return 'multipart/*'\n  }\n\n  if (type[0] === '+') {\n    // \"+json\" -> \"*/*+json\" expando\n    return '*/*' + type\n  }\n\n  return type.indexOf('/') === -1\n    ? mime.lookup(type)\n    : type\n}\n\n/**\n * Check if `exected` mime type\n * matches `actual` mime type with\n * wildcard and +suffix support.\n *\n * @param {String} expected\n * @param {String} actual\n * @return {Boolean}\n * @private\n */\n\nfunction mimeMatch(expected, actual) {\n  // invalid type\n  if (expected === false) {\n    return false\n  }\n\n  // split types\n  var actualParts = actual.split('/')\n  var expectedParts = expected.split('/')\n\n  // invalid format\n  if (actualParts.length !== 2 || expectedParts.length !== 2) {\n    return false\n  }\n\n  // validate type\n  if (expectedParts[0] !== '*' && expectedParts[0] !== actualParts[0]) {\n    return false\n  }\n\n  // validate suffix wildcard\n  if (expectedParts[1].substr(0, 2) === '*+') {\n    return expectedParts[1].length <= actualParts[1].length + 1\n      && expectedParts[1].substr(1) === actualParts[1].substr(1 - expectedParts[1].length)\n  }\n\n  // validate subtype\n  if (expectedParts[1] !== '*' && expectedParts[1] !== actualParts[1]) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Normalize a type and remove parameters.\n *\n * @param {string} value\n * @return {string}\n * @private\n */\n\nfunction normalizeType(value) {\n  // parse the type\n  var type = typer.parse(value)\n\n  // remove the parameters\n  type.parameters = undefined\n\n  // reformat it\n  return typer.format(type)\n}\n\n/**\n * Try to normalize a type and remove parameters.\n *\n * @param {string} value\n * @return {string}\n * @private\n */\n\nfunction tryNormalizeType(value) {\n  try {\n    return normalizeType(value)\n  } catch (err) {\n    return null\n  }\n}\n"]}