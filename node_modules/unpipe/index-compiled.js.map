{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;AAMA,YAAY,CAAA;;;;;;;AAOZ,MAAM,CAAC,OAAO,GAAG,MAAM,CAAA;;;;;;;AAOvB,SAAS,oBAAoB,CAAC,MAAM,EAAE;AACpC,MAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;;AAExC,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACzC,QAAI,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,QAAQ,EAAE;AAClC,aAAO,IAAI,CAAA;KACZ;GACF;;AAED,SAAO,KAAK,CAAA;CACb;;;;;;;;;AASD,SAAS,MAAM,CAAC,MAAM,EAAE;AACtB,MAAI,CAAC,MAAM,EAAE;AACX,UAAM,IAAI,SAAS,CAAC,6BAA6B,CAAC,CAAA;GACnD;;AAED,MAAI,OAAO,MAAM,CAAC,MAAM,KAAK,UAAU,EAAE;;AAEvC,UAAM,CAAC,MAAM,EAAE,CAAA;AACf,WAAM;GACP;;;AAGD,MAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE;AACjC,WAAM;GACP;;AAED,MAAI,QAAQ,CAAA;AACZ,MAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;;AAEzC,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACzC,YAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAA;;AAEvB,QAAI,QAAQ,CAAC,IAAI,KAAK,SAAS,IAAI,QAAQ,CAAC,IAAI,KAAK,SAAS,EAAE;AAC9D,eAAQ;KACT;;;AAGD,YAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;GACtB;CACF","file":"index-compiled.js","sourcesContent":["/*!\n * unpipe\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = unpipe\n\n/**\n * Determine if there are Node.js pipe-like data listeners.\n * @private\n */\n\nfunction hasPipeDataListeners(stream) {\n  var listeners = stream.listeners('data')\n\n  for (var i = 0; i < listeners.length; i++) {\n    if (listeners[i].name === 'ondata') {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Unpipe a stream from all destinations.\n *\n * @param {object} stream\n * @public\n */\n\nfunction unpipe(stream) {\n  if (!stream) {\n    throw new TypeError('argument stream is required')\n  }\n\n  if (typeof stream.unpipe === 'function') {\n    // new-style\n    stream.unpipe()\n    return\n  }\n\n  // Node.js 0.8 hack\n  if (!hasPipeDataListeners(stream)) {\n    return\n  }\n\n  var listener\n  var listeners = stream.listeners('close')\n\n  for (var i = 0; i < listeners.length; i++) {\n    listener = listeners[i]\n\n    if (listener.name !== 'cleanup' && listener.name !== 'onclose') {\n      continue\n    }\n\n    // invoke the listener\n    listener.call(stream)\n  }\n}\n"]}