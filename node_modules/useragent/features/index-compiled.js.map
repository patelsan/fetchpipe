{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;AAKb,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK;IAC5B,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;;;;;;;;;AAU/B,KAAK,CAAC,SAAS,CAAC,SAAS,GAAG,SAAS,SAAS,CAAE,KAAK,EAAE;AACrD,SAAO,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA,GAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA,AAAC,GAAG,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA,AAAC,EAAE,KAAK,CAAC,CAAC;CAC/H,CAAC","file":"index-compiled.js","sourcesContent":["\"use strict\";\n\n/**\n * Plugin dependencies\n */\nvar Agent = require('../').Agent\n  , semver = require('semver');\n\n/**\n * Checks if the user agent's version can be satisfied agents the give\n * ranged argument. This uses the semver libraries range construction.\n *\n * @param {String} ranged The range the version has to satisfie\n * @returns {Boolean}\n * @api public\n */\nAgent.prototype.satisfies = function satisfies (range) {\n  return semver.satisfies((Number(this.major) || 0) + '.' + (Number(this.minor) || 0) + '.' + (Number(this.patch) || 0), range);\n};\n"]}