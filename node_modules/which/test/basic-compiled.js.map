{"version":3,"sources":["basic.js"],"names":[],"mappings":"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","file":"basic-compiled.js","sourcesContent":["var t = require('tap')\nvar fs = require('fs')\nvar rimraf = require('rimraf')\nvar mkdirp = require('mkdirp')\nvar fixture = __dirname + '/fixture'\nvar which = require('../which.js')\nvar path = require('path')\n\nvar isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys'\n\nvar skip = { skip: isWindows ? 'not relevant on windows' : false }\n\nt.test('setup', function (t) {\n  rimraf.sync(fixture)\n  mkdirp.sync(fixture)\n  fs.writeFileSync(fixture + '/foo.sh', 'echo foo\\n')\n  t.end()\n})\n\nt.test('does not find non-executable', skip, function (t) {\n  t.plan(2)\n\n  t.test('absolute', function (t) {\n    t.plan(2)\n    which(fixture + '/foo.sh', function (er) {\n      t.isa(er, Error)\n    })\n\n    t.throws(function () {\n      which.sync(fixture + '/foo.sh')\n    })\n  })\n\n  t.test('with path', function (t) {\n    t.plan(2)\n    which('foo.sh', { path: fixture }, function (er) {\n      t.isa(er, Error)\n    })\n\n    t.throws(function () {\n      which.sync('foo.sh', { path: fixture })\n    })\n  })\n})\n\nt.test('make executable', function (t) {\n  fs.chmodSync(fixture + '/foo.sh', '0755')\n  t.end()\n})\n\nt.test('find when executable', function (t) {\n  t.plan(4)\n  var opt = { pathExt: '.sh' }\n  var expect = path.resolve(fixture, 'foo.sh').toLowerCase()\n  var PATH = process.env.PATH\n\n  t.test('absolute', function (t) {\n    runTest(fixture + '/foo.sh', t)\n  })\n\n  t.test('with process.env.PATH', function (t) {\n    process.env.PATH = fixture\n    runTest('foo.sh', t)\n  })\n\n  t.test('with process.env.Path', {\n    skip: isWindows ? false : 'Only for Windows'\n  }, function (t) {\n    process.env.PATH = \"\"\n    process.env.Path = fixture\n    runTest('foo.sh', t)\n  })\n\n  t.test('with path opt', function (t) {\n    opt.path = fixture\n    runTest('foo.sh', t)\n  })\n\n  function runTest(exec, t) {\n    t.plan(2)\n    which(exec, opt, function (er, found) {\n      if (er)\n        throw er\n      t.equal(found.toLowerCase(), expect)\n      process.env.PATH = PATH\n    })\n\n    var found = which.sync(exec, opt).toLowerCase()\n    t.equal(found, expect)\n  }\n\n})\n\nt.test('clean', function (t) {\n  rimraf.sync(fixture)\n  t.end()\n})\n"]}