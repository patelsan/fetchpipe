{"version":3,"sources":["test-headers.js"],"names":[],"mappings":"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","file":"test-headers-compiled.js","sourcesContent":["var sys = require(\"util\")\n  , assert = require(\"assert\")\n  , XMLHttpRequest = require(\"../lib/XMLHttpRequest\").XMLHttpRequest\n  , xhr = new XMLHttpRequest()\n  , http = require(\"http\");\n\n// Test server\nvar server = http.createServer(function (req, res) {\n  // Test setRequestHeader\n  assert.equal(\"Foobar\", req.headers[\"x-test\"]);\n  // Test non-conforming allowed header\n  assert.equal(\"node-XMLHttpRequest-test\", req.headers[\"user-agent\"]);\n  // Test header set with blacklist disabled\n  assert.equal(\"http://github.com\", req.headers[\"referer\"]);\n\n  var body = \"Hello World\";\n  res.writeHead(200, {\n    \"Content-Type\": \"text/plain\",\n    \"Content-Length\": Buffer.byteLength(body),\n    // Set cookie headers to see if they're correctly suppressed\n    // Actual values don't matter\n    \"Set-Cookie\": \"foo=bar\",\n    \"Set-Cookie2\": \"bar=baz\",\n    \"Date\": \"Thu, 30 Aug 2012 18:17:53 GMT\",\n    \"Connection\": \"close\"\n  });\n  res.write(\"Hello World\");\n  res.end();\n\n  this.close();\n}).listen(8000);\n\nxhr.onreadystatechange = function() {\n  if (this.readyState == 4) {\n    // Test getAllResponseHeaders()\n    var headers = \"content-type: text/plain\\r\\ncontent-length: 11\\r\\ndate: Thu, 30 Aug 2012 18:17:53 GMT\\r\\nconnection: close\";\n    assert.equal(headers, this.getAllResponseHeaders());\n\n    // Test case insensitivity\n    assert.equal('text/plain', this.getResponseHeader('Content-Type'));\n    assert.equal('text/plain', this.getResponseHeader('Content-type'));\n    assert.equal('text/plain', this.getResponseHeader('content-Type'));\n    assert.equal('text/plain', this.getResponseHeader('content-type'));\n\n    // Test aborted getAllResponseHeaders\n    this.abort();\n    assert.equal(\"\", this.getAllResponseHeaders());\n    assert.equal(null, this.getResponseHeader(\"Connection\"));\n\n    sys.puts(\"done\");\n  }\n};\n\nassert.equal(null, xhr.getResponseHeader(\"Content-Type\"));\ntry {\n  xhr.open(\"GET\", \"http://localhost:8000/\");\n  // Valid header\n  xhr.setRequestHeader(\"X-Test\", \"Foobar\");\n  // Invalid header\n  xhr.setRequestHeader(\"Content-Length\", 0);\n  // Allowed header outside of specs\n  xhr.setRequestHeader(\"user-agent\", \"node-XMLHttpRequest-test\");\n  // Test getRequestHeader\n  assert.equal(\"Foobar\", xhr.getRequestHeader(\"X-Test\"));\n  // Test invalid header\n  assert.equal(\"\", xhr.getRequestHeader(\"Content-Length\"));\n\n  // Test allowing all headers\n  xhr.setDisableHeaderCheck(true);\n  xhr.setRequestHeader(\"Referer\", \"http://github.com\");\n  assert.equal(\"http://github.com\", xhr.getRequestHeader(\"Referer\"));\n\n  xhr.send();\n} catch(e) {\n  console.log(\"ERROR: Exception raised\", e);\n}\n"]}