{"version":3,"sources":["test-request-methods.js"],"names":[],"mappings":";;AAAA,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC;IACrB,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;IAC1B,cAAc,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC,cAAc;IAChE,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACtB,GAAG,CAAC;;;AAGR,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,GAAG,EAAE,GAAG,EAAE;;AAEjD,QAAM,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;AAC7C,QAAM,CAAC,KAAK,CAAC,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;;AAEhD,MAAI,IAAI,GAAI,GAAG,CAAC,MAAM,IAAI,MAAM,GAAG,aAAa,GAAG,EAAE,AAAC,CAAC;;AAEvD,KAAG,CAAC,SAAS,CAAC,GAAG,EAAE;AACjB,kBAAc,EAAE,YAAY;AAC5B,oBAAgB,EAAE,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;GAC1C,CAAC,CAAC;;AAEH,MAAI,GAAG,CAAC,MAAM,IAAI,MAAM,EAAE;AACxB,OAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;GACjB;AACD,KAAG,CAAC,GAAG,EAAE,CAAC;;AAEV,MAAI,SAAS,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;AACnC,QAAI,CAAC,KAAK,EAAE,CAAC;AACb,OAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;GAClB;CACF,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;;AAGhB,IAAI,OAAO,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;AACvD,IAAI,SAAS,GAAG,CAAC,CAAC;;AAElB,SAAS,KAAK,CAAC,MAAM,EAAE;;AAErB,KAAG,GAAG,IAAI,cAAc,EAAE,CAAC;;AAE3B,KAAG,CAAC,kBAAkB,GAAG,YAAW;AAClC,QAAI,IAAI,CAAC,UAAU,IAAI,CAAC,EAAE;AACxB,UAAI,MAAM,IAAI,MAAM,EAAE;AACpB,cAAM,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;OACrC,MAAM;AACL,cAAM,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;OAChD;;AAED,eAAS,EAAE,CAAC;;AAEZ,UAAI,SAAS,GAAG,OAAO,CAAC,MAAM,EAAE;AAC9B,WAAG,CAAC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;AAC1C,aAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;OAC3B;KACF;GACF,CAAC;;AAEF,MAAI,GAAG,GAAG,wBAAwB,GAAG,MAAM,CAAC;AAC5C,KAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACtB,KAAG,CAAC,IAAI,EAAE,CAAC;CACZ;;AAED,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;AAC1C,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC","file":"test-request-methods-compiled.js","sourcesContent":["var sys = require(\"util\")\n  , assert = require(\"assert\")\n  , XMLHttpRequest = require(\"../lib/XMLHttpRequest\").XMLHttpRequest\n  , http = require(\"http\")\n  , xhr;\n\n// Test server\nvar server = http.createServer(function (req, res) {\n  // Check request method and URL\n  assert.equal(methods[curMethod], req.method);\n  assert.equal(\"/\" + methods[curMethod], req.url);\n\n  var body = (req.method != \"HEAD\" ? \"Hello World\" : \"\");\n\n  res.writeHead(200, {\n    \"Content-Type\": \"text/plain\",\n    \"Content-Length\": Buffer.byteLength(body)\n  });\n  // HEAD has no body\n  if (req.method != \"HEAD\") {\n    res.write(body);\n  }\n  res.end();\n\n  if (curMethod == methods.length - 1) {\n    this.close();\n    sys.puts(\"done\");\n  }\n}).listen(8000);\n\n// Test standard methods\nvar methods = [\"GET\", \"POST\", \"HEAD\", \"PUT\", \"DELETE\"];\nvar curMethod = 0;\n\nfunction start(method) {\n  // Reset each time\n  xhr = new XMLHttpRequest();\n\n  xhr.onreadystatechange = function() {\n    if (this.readyState == 4) {\n      if (method == \"HEAD\") {\n        assert.equal(\"\", this.responseText);\n      } else {\n        assert.equal(\"Hello World\", this.responseText);\n      }\n\n      curMethod++;\n\n      if (curMethod < methods.length) {\n        sys.puts(\"Testing \" + methods[curMethod]);\n        start(methods[curMethod]);\n      }\n    }\n  };\n\n  var url = \"http://localhost:8000/\" + method;\n  xhr.open(method, url);\n  xhr.send();\n}\n\nsys.puts(\"Testing \" + methods[curMethod]);\nstart(methods[curMethod]);\n"]}